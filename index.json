{"project": "numpy", "project_url": "http://numpy.org/", "show_commit_url": "https://github.com/numpy/numpy/commit/", "hash_length": 8, "revision_to_hash": {"42": "e8c50dc6676e380e814c77927445ab3594382bc4", "740": "d8e22e7e6479aa38b62c53f14ebaf98328131061", "760": "3cb02b56a10d3fe8cf6a7ae7b36e9a2f52661c2e", "871": "957cf7970b0d2b2c600ae6459fb45db8ef498de1", "1215": "ac4db180f8cab1d302e699426a7257ec6b0df426", "1435": "5ac24f59ed0053f58781d198e64e6ebe6dbe1d69", "1441": "513d80a5a37a3f6e7bb31e4fc4437fd229d8906c", "1591": "2efca402e8c6aae80ec131fa350c04e5463c8692", "1767": "cbec6098bf702e19d2923d15d420e9410d94bf5c", "1916": "c79bcec14a12a38a1563d1189324257e5df71397", "2054": "3a01f1da914f586ade80cad147d6ea6781d08265", "2167": "d99b776ffb2a6d5718bfdb7f17b46c06a3dc84fc", "2472": "9da998fd005e4d4774cd7f0152490a5bf8c35c99", "2788": "6dd69530d58ba65f4a37167ddec7c9cf19e44c18", "2916": "87596eef24789199f98b502559f110cecdd05025", "2949": "cc6bed52164cf955d56081835e1790622220ca62", "2986": "64be3e2a89c72a8b23ad11b3719bd66725658c61", "3015": "c90202ce60184a803b311754b26f1386bcf1757f", "3096": "56ac5f7711cc399db40738a625d2f33f24fb6166", "3192": "f25e1581827ee3ec98518fe3ad7b855904202383", "3259": "c9d632d3d112854a7a865762097dedc6535a41ed", "3290": "3301a33d6b8daa647ff744b1e6302705de5d67ba", "3366": "1a6b656657baa12f6e3ab41ebb731e2a162f262c", "3543": "9d647f6a0b2f1583ac4e1f9542523ac9db565d45", "3724": "2be238df5e6682083c448264e52d2d8df0055e9c", "3846": "8410a4199e0efea7f56ed474c9754cf4895695b2", "3983": "cd8db12913c9bd7323b77a03a8fa11667634b1a9", "4589": "d83d143053c28864fd9762b8892cb78f7b58f927", "4635": "e43987ae07a1e3ba4b1fb63273069028e4e3d2ce", "4881": "b38e5c2a3b7841aad8df6af35c8e49400ad5b5d9", "4904": "54bb7abd3adc59578c559acb2d2938ae42b401a1", "4948": "6727624e1c42177c0a60a1baf9e46c41ccbdcf20", "4998": "ff040d986da26c846c3b865afa99e0f6ced82b7a", "5005": "68072bf7d9c57895ebe51cfca2aaac52506faec2", "5090": "c29e590ee6bdde6168216642285828fa140c0205", "5144": "ad3f9e63e0598351c51bed7c4686300527f2488d", "5203": "f5596a9d809fbba266aad1702fd048f1de32d1f0", "5277": "d4f826b4bafeea0e4a16b2cb3954b2155483e91a", "5964": "480b20bb72547d35f91a79c2c1bc6166316a56d3", "6082": "efc49bb76f9d9eacb3825d6f42ba283e0c0985c2", "6105": "2f9063f598515a2708decd55a13cd5672851047f", "6111": "c3e0147d49286c0cb1b65a95d42f5eb4a4779129", "7077": "94a1fa8166f715024c3ace71ef25b8498d0c8661", "7287": "76b40e882632f60ecc600770c8eee8d4594754b8", "7290": "4b42c8f6b81d87f35ed8dcf4430224992cf2d296", "7596": "c7ba5001b484eb7565f3a4b1fecadb81f74884bd", "7601": "2edbff0a555835435e19e22fd3e80a522b2beb70", "7605": "05cc071eb092c3953d26dfd53831f9828596cf6c", "7607": "351726ab14cf919aab55fb91608f6448bb063609", "7838": "1ddfa53167695671adbd72de056ae9d30f5c20f7", "7900": "9673b8f82442d84bcdc22690d44ab4d30dabcc81", "7919": "d68b2318454e777a3ae41df019bbed86fdf00f4a", "7924": "c069eee07f2a976b3c2660670dc7bca6438ee94f", "8049": "97cb28e72124ff621958127fde68e1327ac2e324", "8077": "33047912898fb4e15045e8940b0988fb1e474de2", "8094": "de969d7f94ddfc1854565518d5da61fbfc8bf4a3", "8515": "cd6c14be42c149730349ba551d8083f3c08b9c73", "8649": "9b2031f636545bf8e91e59770eb284f56d2a04fd", "8733": "65bcb41240e260e5f8c85e4e30a8f6bc68c72567", "8748": "ceba67b52a8c9ad7ce36553add4506d84a70ad30", "8759": "1e85f6fd045dd75a0697bed5bb619fb792632da2", "8765": "039ceba764704d0b4182cd2ecd6b88242f792804", "8847": "b11e3af9487cf3342bbad742231c312a02398f91", "8956": "9b46e7b7c47cb676999014cbb93709a12e7d63e3", "9026": "41fa279b579c68ac5f5991800034ba94c7ca8b50", "9071": "68538b74483009c2c2d1644ef00397014f95a696", "9830": "09bb26867d73173d74b4f9d4d481064e6044fa71", "9876": "ca07bce202ae26b6f0a73870eb2ef0b88e0210c5", "9952": "651ef74c4ebe7d24e727fd444b1985117ef16fae", "10100": "50366a2ac0d6158e4434ec5e5b4a9a521610628b", "10201": "f2175177b060d01ec5bf6f7e038d71563995fb42", "10586": "1cd02e093d4a27ff526dfffa2152a67e93817fbd", "10683": "e0e3a8732859639917be89f525bd359cf8d608d7", "10713": "a43307cdcc06a358097a9e88de388409a5b99735", "10714": "0c5a166183764aeb3fd1fba799caea489f20682f", "10894": "21bda0e23c6d2e02776e00268bcfee71740f3580", "10952": "697316a867a32e9f72778a29226c9febbf867ee8", "11907": "1bcc80257c94427436eea2e50c70c78179ed1fb9", "11963": "4777d09b39ac0a331e1ac9578e3a754c0e084574", "12166": "260e8f26f8f808e473f1c839411e28bd33edae4e", "12280": "0ccaab00ba14eebeb6620e6c64723189e2bd0a11", "12411": "a60b3901cd635d28bef8328e83bafd35ce631e08", "12438": "3bf8706cefd28d33fb3ea1915d8a11f54ee7cfef", "12590": "4322701029c8bf1d87203cafe781a0128dd86a62", "13048": "23f8dcf86cf692fcc9dce48350d5d86c0bc63ada", "13148": "48c77a64aba109de54d90f103203f1990325c37c", "13266": "62a7575fd82ddf028517780c01fecf7e0cca27aa", "13574": "96b4349da97fd49fb04b678ce16897101677b09f", "13746": "faa6fa074c966cf30b68b2244bb55691edb1bba1", "13794": "c7ad14f5f3069e93a674e0ddf260d7da6c71a5a7", "13799": "4563730a2d036307f1b67b2856d749aabdd8d546", "13857": "36d947fe379e7534624328f7382e4e1175823170", "13918": "07601a64cdfeb1c0247bde1294ad6380413cab66", "14134": "c88fd91482782f35a78d6144331471085b8695b0", "14153": "d44b9c61499f8bc5a9fc94286cd52f05e15e003f", "14443": "c04513ca87f3471c407d00fa3be9d456cc34a1a3", "14555": "762c6f15bf57506e21239a4dd68192e4da6014f7", "15095": "03164d2d819f9b38e1c684d6d9e128f11867dc3c", "15167": "b9640613ddeaa5993916718ebec8c71d4001d489", "15218": "60df9b1eb6375e3decf12ba7506404c46af0469a", "15290": "772c80b1ce1db7e30497fcf555ac9af56b0d7fce", "15308": "edb902cdc6573553afcf11047ecdfb447e444322", "15380": "2c24d62c775dac583235606a396b4966a3f1144c", "15403": "66d357ae3aedcd324a1c607e037adc65d3ae1c02", "15429": "183fdb290cd46b1f01303d24ac0c9fc3ff24fe05", "15442": "e905cad9646ad65316458bbc7f5c83a9d5ec8728", "15495": "f769c64026f5ff993ec1e28cbd9f39b8da75347d", "15606": "cec39effb1739ae0a7690e56d58d3e9432569d5f", "15747": "90d1f8fb7e43a1c6664d6a1a05d01d9fafbfc7ea", "15750": "8ae543cb13769a0afa6e176898824db7fd992d27", "15826": "c890b10a8ade5df19f97b02a2b10a75f9f6075e9", "15860": "c16af049301ed0a88c57e403854f90725a4a8a7d", "15898": "5667fbafb5d84e3a412a07aac72c769baa590579", "15967": "c9a83043c0669fd17306843eb21abd236b675537", "16072": "ea8aa221f98d0bbd24884e9d6e31fbb613f478f1", "16076": "e46c2d78a27f25e66624a818276be57ef9458e60", "16140": "4d87d909bab7a7dd4bb570444cf35d98d551668f", "16292": "2d1d5c4535bd6df34bed4bf304e253667abf8096", "16308": "66e91fdef4755075689f63e55732d512deb955f2", "16373": "a280f5e5d725de732a906b67172114b263ac3bfa", "16415": "fe0231d5e5256696c9aa923e62e0ca1d02223b40", "16528": "f2756423f00b03063c9424f014ee814ae2ac2884", "16552": "c303c9b77afbc7fe6f4049683c3ccaabdebe7be3", "16636": "fdfc4807cbe2de71f74053c45ae0de383332c4e1", "16649": "199dc1a43a37adbc0d92f58574494ed80a1fed25", "16687": "4092a9e160cc247a4a45724579a0c829733688ca", "16723": "537d35c2cf49cae0a496c37564fa282ec80e3695", "16761": "1b6831be8dc33308e77f3d3253f5ee777e3bb178", "16826": "7ef145115fede2c20df2cfc51ed28fcc9742b696", "16881": "abcb51151634c09b0db4eb462939f910555b7971", "16905": "175476fec763984573e60485a447978cbcb381c0", "16985": "ccc6b8d8fcf92cc6dc19f7e14d91fc6c127114a6", "16988": "c3c2b689cd4e1ccc24b18e764f105ed0e400ae92", "17030": "93240e0d8ea23644a5b7874037e658c54966ff54", "17084": "e1f191c46f2eebd6cb892a4bfe14d9dd43a06c4e", "17156": "8eedd3e911b7e3f5f35961871ddb8ee1559d4225", "17223": "fe3e46d2876af2546a5fcc752ead8aa736ea2658", "17241": "ade91ea2f28284668fbf78971538ac4827d653b8", "17276": "bb6e3dc30016b89bf154f7d7fce4248e760bd40f", "17296": "b0a6e5583f2952a040c45d0d50f5e93372dc175b", "17384": "94b36b557ce7d88bbfe4091c59aa376764b7047d", "17442": "67551112fa684d1686ed173eb9724a4b8a7a86fa", "17455": "ce6d3ffc991c63c1a91fd806b4eb3d0008caace2", "17528": "aab7993af0f6f3b9ac0d76952933b19163d65496", "17559": "bfc9a059c48c57c4ef20bebe88d6f6ce363d1464", "17583": "4cf6f18cff3a4080c6a53e5c2bd63e6b9bf7e5db", "17616": "75d28bb59899eedcb83bd8e38be708a9cc5958e7", "17621": "b94c2b01ff7ef5b8dc44726512cfa232e9054882", "17657": "561f1accf861ad8606ea2dd723d2be2b09a2dffa", "17729": "f737b354e6ab2aef8b4c05bca0011de46a4b53b0", "17817": "bbd5a7750fbed42a4aaf12f196282a9504a1e865", "17962": "66f1b8a5411e8265ed87ff7bf97c67960af2624d", "17963": "61e667e4a6b6e55356dc97d2f66eb7afb4a69b55", "17999": "11f77c8b19dae99981910695a806cbf4def67e24", "18066": "d9347181d825d9426e783cfeafee304735bd25aa", "18178": "fc159a547f091d1d6f75db470a0b8e9b2e7acea6", "18342": "857125603f3cf72e2078ed2effd0f6ce40f0ca28", "18416": "d6ab6da640156e4a75a78d5d6e7f25a098b5f52b", "18468": "59aec750c677b348dce102bc6fa1e6f9395362b8", "18492": "847119387dedec1ce7a85c1c0f29bcf86bc0348d", "18529": "e94ed84010c60961f82860d146681d3fd607de4e", "18549": "deb4be85025088553d80d6637dbc17d7f8101f41", "18680": "1462df1c20eae44d28e6b665b5d194788f57efc5", "18687": "0c06b0b8593d947c5d63b72b6d84ecf83ae5da5b", "18759": "c003e6ef6e421d23b5bf98f01df20f1350f61ea1", "18857": "a0c5f64f4f1a7f6ee80dc9b95aa813df28a87d72", "18943": "c53c89f0d8572086dd13cbe1c3c98a4e73b41d09", "19123": "cde88ddf408f41ca2669adc4401fb69682726a55", "19137": "767744c86e1e4a27bf77f90a85f17e564c9b94ea", "19142": "31465473c491829d636c9104c390062cba005681", "19234": "e657629bbc2bfb880a1b2fa24a39c5921c1f965e", "19348": "3d0c041ca162d69cc5bbb4d9d051eca7933f12bd", "19486": "ce140e8d5c28f1f057db1102cf78263e48f86d61", "19604": "d64539a97a7d21857b71e181f848a17d15a48ef7", "19627": "c18ab2c3975c8fa8b59724fe6855c528d72fef8c", "19766": "6914bb41f0fb3c1ba500bae4e7d671da9536786f", "19777": "3d2205dfd1d28fb8106e60223cf7207a3c05dbab", "19891": "c3fd79150bc183e8852f1330ea6e8cb4ca7ce7bc", "20034": "71555c48be7f07833bd540dacb50deb8069b551f", "20042": "7dcee7a469ad1bbfef1cd8980dc18bf5869c5391", "20123": "5324067c702a41e901354a01a5f0d05ff49b6cb4", "20126": "6a58e25703cbecb6786faa09a04ae2ec8221348b", "20224": "20cb312563b2e7c0b180db8dffbcd71d7dfd0bee", "20361": "45ee22fa2fdd2bace756ed62685a346da91c4cb2", "20435": "73299826729be58cec179b52c656adfcaefada93", "20480": "798aee26bdb9dcc0e806ca9271f0f98297188dec", "20657": "1c50f244d4d1eba4f3f63e93a05a2b2f938685a4", "20710": "83419d6462461110035fa27e322efed557c739ac", "20777": "d3348c1123d3862a42d50a7fee14e50b268944a4", "20876": "7850096157436c650803e8ea6d98ec0d42d96102", "20890": "fca7a15f30776ebce9e6814eb927e837f567a518", "21025": "ccc68b80305ff5b363d10f6e905fb4e5276a8adb", "21033": "26311ed7bf80e02c827189e80084602d72e4f284", "21087": "ccfbcc1cd9a4035a467f2e982a565ab27de25b6b", "21173": "b5e01bcb668da0413170a886c258e00d2540e752", "21301": "5adb81051086a45fe3b59ba506b567340ec9bd5e", "21323": "ab30683fe1277a7fd471be63975a02ed8d766f94", "21448": "3c89e2f913406f55b6e998017c1149e3ba383bcc", "21555": "b261d8e562d162397fb0458cf8f281e0bb8e4ced", "21564": "8706d48bd9918fca93ee50cb8bdc04d8ed16cbbd", "21651": "590f07121dc55e6d9d9ce514887c9bbc253fb266", "21852": "f82c2b62d18b381baefc30f8e8d7788d08a0bd16", "21877": "872372bd56ccb5fe98faae8be7d14e4a8c69e037", "21951": "de28edd8f514b82c0524b55f622078d47f479322", "22033": "70a84c3192b4f231925e8e36f50d6a26bff3b46d", "22135": "9d416356baf4a653b2c647a921ae24ba7d39e8df", "22287": "c9424106d678a05a0520e74d529a448241223f32", "22301": "09dd75e9e2139bc9742e6009b7babe41d4c002df", "22366": "0cf81b01c87383ac19e145d312a10efa73e92715", "22436": "971e2e89d08deeae0139d3011d15646fdac13c92", "22447": "85d64e375f53f6028519d3aaad0b421934dcbe24", "22608": "685b9ace06f1dc50e2698099d7a2b6a241379318", "22621": "09e04dcbe3d0c836437b2d4745b353b256ec6265", "22685": "cdd7ab252988ff4254705e0a89874edeb5cea8eb", "22727": "0eeb158ead494e130a25239ac8473a06451b1072", "22864": "06da877ceae914a875bd1a55cd8e271332358803", "22956": "8529dfaaec65248420faffe095bac03c23881735", "23110": "08b17aee272fb3f64bb0e5e96e0376c0f9fd9424", "23140": "171a3e5811e43643788c20075be9ba52efb83b81", "23318": "5bf9ab98edd254dee1162d6f1863053e040cf828", "23538": "7ebbc2ed3b4a388dd3942e1d8ef2de18074a09b3", "23612": "9776a73cee9eaaff6af40e971fa2bb7f8f1086c5", "23727": "37a1ad069a800f5ef98286f25fb3fb632375168d", "23799": "9bd91ae86d2c5abccb031846d05199bbc831a342", "23987": "eb5dda56f2a5a845ad1121914d461f22a815fcaa", "23989": "1cb2230bb1bfb9b2544dab798dffeedce64ad39f", "24160": "d9b1e32cb8ef90d6b4a47853241db2a28146a57d", "24257": "044f5131450f38cdfbab63d6999b60e7e3bbabe5", "24433": "29759461091f9a4a40ff2f4ae2126e0a5af1fcdd", "24443": "dc089026b4ad0d2d9ea992c7f1b9b5e716dd82cd", "24465": "cbdc3b7477aa0b497406bbb2df1025bed290f3cb", "24549": "fce34f559f17674e7a3301c46b0a9cc991c143d4", "24666": "53adf81bc503d749b13160a27e49160c5bbe48d7", "24835": "49e00940a82f9590d774539cd188b634c29fc39f", "24911": "ff3df08438d570b0ccdda3f8a008278d8a4ad394", "25018": "7b9b41a4c7dbd7b719d62f343f57f841f5809693", "25109": "346f5b61e5a0da82f46760a66101589e7b776426", "25130": "ae88e02a48c4744afd22c63be388870037f3c84c", "25289": "e1c290003bd7ee9940eb9b400dda64453228aa96", "25290": "0aeab48b9e914d1dc7041b7e3f3b7e575ffcbbed", "25381": "2410c6d0a63cb56455fc9ab6affcf1a776c82134", "25418": "c18b3f59b5f5752ab038224fd3bdf2dadba55ecf", "25425": "3dec7099ce38cb189880f6f69df318f35ff9a5ea", "25436": "648fe68f79dfbad21947db4b55873703db0675c4", "25522": "91118b3363b636f932f7ff6748d8259e9eb2c23a", "25616": "a5e5e51187d4476841503ce816924ea99936dba0", "25650": "b1e69da5058846e4fbe538c5641597c49f34f9a2", "25681": "388e8197e15403345950edc23ae5fc7a3cb0f644", "25742": "9b7e890b014f6ad3b4288246f0565f7afd6eca84", "25786": "96727cf007217256700a1d805569a73d2171f1d5", "25848": "330435bb3420d798de08f86bf47287e55cf9e516", "25862": "b69cf68a24cffea0a884a102da1797755de8f022", "25886": "dae4f67c797176c66281101be8f3b4d6c424735c", "25889": "615b6a5ef4040e5602a21aa2ff528c90d3ec6dd4", "25890": "19b66496e248a4e4954a2a43f7100169a355236f", "25891": "7b4c8731353586b50756be3b5c6e134211840876", "25893": "cef4dc9d91d980c3df816de00154a22e96439fa4", "25895": "af0dfce126a1d83cc33b8da9d91bce664f5d5297", "25903": "1bc8dfc55c512c569f8f9de360cf49ace5f2cb39", "25905": "8bd5dddda46805928bba355a288815831c50c96c", "25907": "abdd996ee5a40889ac627445ebfda19bfec326d0", "25908": "74afdda39be21af56b8f9ea9abdb1e8f994e5350", "25909": "491f41acd2c6a0e7886662a2448b3d245ae432a9", "25910": "1f9ab28a9ee5a0cda956da35d0c77a3a4c4bcd55", "25917": "0437b83a931c5cc24296deecaa52d825e4d377e1", "25918": "2eedaa4cf94cf54bbd4d8428aa39271410f22e9f", "25919": "8a1592844f98e26a181ab2c1fc8f2e6fd3647f00", "25920": "cd02ddc9c0ea2b7f5f879c0564709eabcec6f1af", "25924": "4edd4375472f23c43048e078ba2db1826957f0e7", "25925": "60f539b37514a9eb13c1ebfb8a252934f9084d30", "25927": "4d2b5850488013319ff8354a1e764a0a2064fe63", "25931": "5eff78bb16df99ffe2e9cad86c4ec649893c0646", "25932": "df40e550d442e910826e4817d38cebb902f48d77", "25933": "760800d2c602b1c4e1a10d3a0ba12944df28cc73", "25937": "f1a247f9952085db72c3f8248f8336a0961d825c", "25938": "473a68a53028f8a24b88bb9fc08b38dc3b69800e", "25939": "3963ed0ea4e7d89174b1e992d84b47c0751f533f", "25941": "9b1acd42e8d4cfd476dc97b8d5bfe12b0c229d9d", "25946": "de446a536903f906969a1c5860a32ba11078a5ae", "25948": "b2545d01be561f7f8bb71c6064ba48de3d3e8dc1", "25949": "b6c7048bfd72a999f0cd948a346de94fe13f8123", "25954": "670ac4fc50e82f6f162b2dd776de2ef28fac2a4f", "25956": "124dc4ebed8b805206e9ec1f25963877011ed93a", "25957": "a7adfda540f88d765f10ae8963abe4ae43cbfb34", "25959": "ee3e17a7c3e3efdeafe907b394de56aed01a70e0", "25960": "3cdc3ffb779733e7d9136ecb66a22bce31021c6b", "25961": "40fad321343dd8a28129c668c8037a35e9b33989", "25962": "acba24414487e0e171bedbc8d1ae3cfc63f4b2c7", "25968": "e6c2765d428bdce57b6d5bf0554d177ab0b45bf5", "25969": "7eaac94d183888639422c7b55471613f1d5bce18", "25972": "62991d50511f75e58c4c57f40e84de25a8d7e7dd", "25973": "94d3302039856667988f82d637f9a35998d19a79", "25975": "eb167a3fe540780f397a14817f54a95333fbcc6c", "25977": "cea994fac86dbc5af7bee3f15fc5b475a99163fa", "25980": "917c6f18ba6691bd29e7e103b65dff75af735faf", "25993": "84ddedadaee13fe22cc36a0c67c3cb73e818ee9f", "26000": "e180d2aec3fe18bfc5ad1505659a23003929c76e", "26001": "2fd9ff8277ad25aa386c3432b6ebc35322879d91", "26006": "3296617cc4c0d4a82520caa411050f7c0aeb9aa5", "26007": "6894bbc6d396b87464cbc21516d239d5f94f13b7", "26010": "d5064d4ab5152c71c4b639fe581cc80b74a103e4", "26012": "1b3543cc456c352df8550ae2f0db0a5cfe422f35", "26013": "9331e55b0c16d9b8611132a4ce0fd24e52d6e629", "26014": "91411eea6306d5b9aabab4b5abf5a16df4c3396b", "26016": "459bfb4af46de23e01e215784520aa2b81393dfe", "26017": "0c32bb4140215f99b935eae9001eabb10e3c47dc", "26018": "901211eddd5e17c8c7c85bc5f791679559d4efb5", "26019": "ff4cfe7ecd46ee15fd88297964f6a5cb5423c291", "26021": "31ff7f34809c5d1b9c35de8ccea262d8f480bbef", "26026": "5db7e2e6f805c180a0f117c6faa204f757b512ca", "26027": "2c36dbbd6dd13b449c43dca85493f94022f19f9d", "26028": "8087e1de04d011f7ce66bf80dbef4a0599b14f7a", "26033": "24192935730d6dbb24e3d11b7f40f309b786c0ad", "26034": "105e175a7708a05886d06a24ed2b60bdd6cf329c", "26036": "9da90debf54029a50502fd759c8de56f2dc47129", "26042": "928425156abfa65a613fac016f86d6a3b6c03768", "26045": "df256d0d2f3bc6833699529824781c58f9c6e697", "26046": "5a59087fa5badc20e2cd5264f7cfc6911fc6fb12", "26047": "c9bfd4eb68e61c67aa27ed0cb2788f60d11cf354", "26048": "2e9169601aff252a661b845399ec61c3e575407f", "26050": "59a97520cf0aa68b92a775d809e1cb67d886b50c", "26051": "b074b21c326ecaa6b6519fc7dfcf54fa4e4457af", "26052": "ef0957302c6383524448cef2cd4cf18c7da18ea8", "26054": "5cfc2d3ca06fb6afc95c16db172f710ed6e7eed4", "26055": "aba1b4a7864752b005c9f5d1bd58fa02e08ccff4", "26056": "32f382c86f384a02eeb87f67fea806e6b9961b5c", "26057": "33351f646e0b523139fbba4986eba54a3bfe55a7", "26059": "90133e16d02c67206e350ce222d76f938596706f", "26062": "26527695f9ee7b7bc3fdd3af67d7e8b068cb1e0b", "26066": "5b16107a537c0ebd2e4517c02ecfb9a24f54c827", "26067": "cd3b44d5f0915245138d44fdb3ee376601e34716", "26071": "f77c5e83c07985aacbddb89525785a3f66ce1b3b", "26072": "4f2b219647ae6a7928590be2b709894ae2403274", "26078": "c71ce0e6dbd9ec67b3ac7fb5ac3eb609f8a56829", "26082": "2fc96a0bc15624d7f1f74750bddffeca46f1e73c", "26084": "20f22d849002d80485787adeb8a7340dab159f94", "26086": "cdbc935201f3c322a312e8ae8b78d044cbe27bf4", "26088": "5134132ae9cc9c3fba1d5420353277cf3d96eb90", "26089": "c2dd245047ff2eb80972600163ecac9048d74e1f", "26090": "965b41d418e6100c1afae0b6f818a7ef152bc25d", "26102": "0b9b176dcef7f14f56dbd543c89e6da6c6b7b2e4", "26103": "1be88ff070cce6ac720804e861583682564f7e0d", "26109": "bcce3ac27e05ffd10584c3c8c666dade21714d1f", "26114": "5b126f882bc90a22f7fe20518f727eafe8238d86", "26115": "ad0049026f4afa5d6e8312c1a46b3777be396104", "26116": "9ae4a0d1ebc52a556ed13248172e8280ad9fc6bd", "26117": "d5010b129e4f3714dcad04eb7115372848fbce36", "26119": "b3f41eeafd2708a6b519cf3c7ba3576dfa1cc5b3", "26125": "637af579ef5985bd8c267817cf445aca5bb34531", "26128": "e1968acbedfb312b47993ac2869a5f544383195b", "26129": "974a54058fe52ead24bc54a0015d3e065f78f5e3", "26130": "54c2a266780c02852003330f59bf3bf20e36eaa0", "26131": "fed47a489e3da26fffb98a6dda32dbc9ba0f63c3", "26132": "b03c575834a68f3a8dad5e2974ccee7fa76003ac", "26133": "68439794b84836f43ec389be0e702ff64ee76d44", "26135": "dfd4c9de8d849363e3d4cda7a0792ed0670165cf", "26137": "5ff70eb0fd61a39207d5166479507e1b099cb707", "26138": "1c58504eec43f9ba18ac835131fed496fb59772d", "26139": "1cb387128f66895b42c19578ccd60c34649de988", "26142": "2582c681082e6c2c74d424e255afa8efefa4f899", "26144": "43ca3a5bd882dc69bca0fa777113e6821c9f44e0", "26145": "22356fc0ec8ca50aeb8f40633f7c7d906a648ab8", "26147": "243dc1e90e59daf18b17a6a1ebb705cc7bc66e92", "26148": "078ac01a85c4db46e7f148829c2e0d0e0f30c36f", "26150": "77c5841b93873bb1d71c38be3e41cf81ede59743", "26151": "f0a74b2d4e50a1b4f9d9189c6b2e31b920913a8b", "26156": "5d8bcae56a337d21d7bf60d042c7dff32d91b451", "26161": "642181c76b11bd1cc87ee7443d3ee215744df0fd", "26162": "f01b4e54a4b46a84a5a79b03bd2bd2f21b190f12", "26163": "170d1bbf566937452fd9bf14a84a69c9edb43277", "26164": "18bfeaf2716001afa8785638a75f90259dbc8aa1", "26169": "12f9da5615e6c1e387a9101a8923867343dfaeca", "26170": "3310cd0e8f1b36d7da8c1352441b1240be4bedc5", "26171": "9ccb42d02f7b3fb2b47854bbd4ab418676e6be42", "26174": "ad5d58c29ab4793cd66afa07eed0f77c7ad59dc4", "26177": "081c7230546861259bac75a316338b1c00005d5e", "26178": "3f6dba405c259a41e91077868f54722ef0a2a325", "26183": "2ac14a153ed79377130a38e1425574e97602455e", "26184": "8c2112dfb073c069a56d8840a21ac2ee69f920e0", "26185": "8626a559680d9d6e681c02e703bcaf3de389fc6d", "26186": "caa9b6045cedfaf0a4735bd2be55164549a4ddcf", "26187": "c67396b805291e1a880084e701f160b21d2b4b1d", "26190": "063b3140ec3792f0420da9f386d8240693213ec9", "26192": "569dfcd79aeb2a584e008861e5e29b7b5115d94e", "26193": "0f6a3aaa34fe72586f8c66ecc4744fc960d62ae2", "26201": "0ce156413feb21a4f2a8eae3b1cd954d04240edd", "26210": "e78d0764d414952716ec75e3c44a74359643cffc", "26213": "76b711ad87d114f0f7926877adccf14dce04614c", "26214": "42228fcb513c08729f822fa6be70e16a7a68067f", "26215": "1f3650643f341af8ca5c12529a479d73d3103895", "26216": "9005d7df9b644b3b3de55118b7f7ffa026e4284b", "26217": "51d1a99a84f5e2183b79dcc04713ffd90cb0caf2", "26218": "8f7adad487ebac177964a577f5d263da975d8333", "26219": "3ac8f65681e2ee55c8b8bbb25f1d4aacba07d9bc", "26220": "e44d0ecad9a8565b5f159c674e2001e725e58bfc", "26224": "4b9f7b54219c1a653ca8fa2fb53f96ea54a765d8", "26229": "b489287af94b32d6a6d550c6e05f1cf92adf3248", "26232": "efa7bad30d92f5f58448e753b3d280d3bea157be", "26235": "c6916f44904b46c7c7bdb92ceb5242f3f6e00474", "26242": "fc1f196584ff6dd530982febba2322679317c632", "26243": "c31ba764540a12843b3caf711b447fe3e08c5a46", "26244": "52c9e6f2e3e72081576fc7f629fe3eb0c67b143b", "26247": "b38ccec64c502579f48c1fc13d0b34f689171f25", "26248": "40d5ce5437db00f6507580651ec5c6dffc161134", "26249": "0b516d28e606d97266a95234a8deea268ecc3ec8", "26251": "e51992aa22f9868ac4ab09608c5ba98cc93fb590", "26253": "73e7d8e82efde0fbed5b888f31bd894d5d7d6936", "26255": "11c1e161be588da14a501f54d8a3974bee7a03f3", "26256": "1d598997543637b9882d1663117b573210a20583", "26261": "b07baa1e0ee0a4ca5dfd89bf51a0f57340b639b8", "26264": "99d056fde04538ffacc877cfaea926ab979ea824", "26266": "2f790d8768095a7c237794eaff31b8ae4a0411f9", "26267": "9eb7560e77c43af561f5242cf30df6b1d7442e83", "26269": "8dfaa4a5e0ca329e16a853d5982ea5af5d044b47", "26272": "482625dd29b4f3f3c43a731611063286f8bffb73", "26273": "dc854841806549086812aeeaa6d5c2e98799a4be", "26275": "cf7b712691a960cbcd6a744350c83a95f8d0154e", "26277": "b57c5349442d11f7f72aacec299e2c6740ec0a32", "26278": "630f094b99afa8c693652066a3fb8918b9f3e142", "26279": "897431cc9207af9cbc34ce6295dd44256aad5db0", "26281": "e800a3e08a1cc4cff200e5b837d5e027cc55c82a", "26282": "517f53dc91164f4249de9dbaf31be65df02ffde7", "26283": "96c21f037679c0766142fa8dc3fb143b5927439f", "26284": "bcb036a58aac566d4050b163a0f6b77e09c40123", "26288": "6d6df47fefdc503fbcffd8cb14a5daaa956ef220", "26292": "6ee49178517088966e63c2aedf6a8a5779ad5384", "26293": "59984a3596e00e088b10c58f02856e8088fcd4df", "26294": "619422b493eaf88c42373af1725ac0aa2297fa91", "26301": "017f717934274e481f1304d3c2f52bfaa193e7f2", "26302": "f80584a48ca9bcb2ff451a017bee2479ad78aa28", "26303": "651bb25d6b409b9031c40cf33f991d24f350edd3", "26306": "a695a9f240922790c8062b3349fe07812eabd251", "26308": "87964f1c5738492b152e80f7e38010c69214e5ae", "26312": "389f56c80c9d940d79fe4136b7a99f8d29aef8d8", "26316": "20f10762fc20a29923b6943235c2577b8e3ac9f3", "26319": "cc7038fb59f8dbe8ff08cae4723aca38169a5a59", "26321": "05595e9afdb11b664898a5eacaec6c7d1e284cf9", "26323": "92b880f64024c0694c69a6397568ce758102f9d8", "26324": "7e3fd81c039b0e22715c4e6eb63439bdf5a620bf", "26334": "e67737e2e63e36161c8f80715c0a347e46a06d91", "26340": "d13a4f06ea84da112d5069b3fde148e307e7f94c", "26342": "4cd98714b665b389833f1d8b4b1d2df9e12685ad", "26344": "909d6b8fabe2f0fcdeba6927e4506f19aae52f2e", "26345": "44e26f24621ce86ed6b24bfba4a04e82319d7bf0", "26346": "4753652c605833e2398d7e46b754a71729a54713", "26347": "92bda60074d0afcc3d29a0131037f11b350a99d7", "26350": "6f8d7fd467b69229c0a7ed3662966573e8b3d85c", "26354": "ae6ba5d215451273990f2826f2cf28f091d71446", "26355": "4200221ea22bf6c49a4038908aca75b2b07af0fe", "26356": "100e7b8459858805bc66af122445495fb840bdca", "26363": "6c9ecdf2847d03d04f5111d6df427a29fbb36319", "26366": "94721320b1e13fd60046dc8bd0d343c54c2dd2e9", "26369": "22724bac3465e6f699313cb6301722cddc6351b3", "26370": "7309a004dc0f206f7dfc8d355711a2d8d7c9c62c", "26373": "2ded173ae40ef8368e93367a02fc7db0b02cd34c", "26374": "14c3c183aa6b8bf504e8b763a3ce0c8ddd0ef6b6", "26377": "58dbafac8dec98557fb99e7884a970e2ed9a9973", "26379": "ad5ad8a3e6a3e8533c5c5ec6e40bd90fa4d733c5", "26381": "30bf46c0538266ade0ac0e1a18486a226196b738", "26383": "b022f204f697e8ef6c719fc8e84bcf5dad8ba6c3", "26385": "deb794394108dd27f27a5a2781bf3b5131ffff65", "26389": "1a5462651bbf61adcf1816f2253eeca2b26ca162", "26393": "e525a8f83f84fadc3f80d3be3b497066022d108b", "26394": "13080b05787e1379cc30e18840ce704475b56179", "26395": "9babf6596876be7be02e823688a2b359756e27f3", "26405": "86721b1a6f3cb941365b8dd785691d56e5fe2c22", "26407": "ecf407ec846324cabaa0afd4bcfbe90899c94da1", "26409": "666b17976e1ee7bb2079259831ccba41d37cf078", "26412": "2f3b82638a24204a13c9b16a3a36a59f199df41d", "26413": "8931a70dbe29e0964cffbbf7637464229688c833", "26415": "872c6b7de255059a580de414d0030f86471193b1", "26417": "d3e64fcf2b1c97d75bae731107cf01d6c0e37caa", "26422": "e66453568b685dee47d6e6e634b3a47edffcaeed", "26430": "ae821835fdb8732aa2bb4ff10f45fb7981fb92ff", "26431": "9ff05dc5d5afd4e801f1acf27b33ca2ed74c48f8", "26432": "ba9f93d8ad9763ef9867bac5761a40fa4770aa82", "26434": "bb402268b0fdc403b05a38a20b7bc324759b41f1", "26444": "c6e27fb0188d77e86fa30c8bb3fcce8f1b398202", "26446": "84a4c4b03a43c915151193685588f80759f2ea44", "26450": "7f836a9aca57de7fcae188b66ee1d8b60c6fc7b1", "26453": "e4a8977758f56d4e1b5efc6117e515490b278b46", "26454": "5d683506587aad4acf689db4145f41a6d6f6ca52", "26456": "94df9336010b9515cbad0d9754edf1ec94d54f27", "26457": "823c59c659832c0a9b95829dbc5ebe7f5c81e1d2", "26458": "beb031d64b42f4643d1ba5186c091fb1328ac8c9", "26469": "5294c82afa7d5f20152ee5b0d1406a909b735307", "26473": "1327a530ea88b83cac8591a402a61bd9a00ecd0a", "26474": "56f444a0c50d949bf9eba653bb91346fdb8f1069", "26476": "5f7114ca823736e3f55176cf6a3fbeb77efe0279", "26480": "3d99ec9df4d90656286d0482f0f50af886616a96", "26483": "59e8fc601bf38c94bf1ee0a7153a7ee385133e4b", "26485": "a813a5feb53cef3b22d60599ec330cc945f1b85c", "26486": "8b81727c50fd7dcb99e4644e8d76f2eaedc4d066", "26488": "bb63a1a49bf1fe766ceab3237e0003aef5f19854", "26489": "50ce0fce70cac779919d97578381a9d762f42594", "26491": "3ba84d2fedf30aba7d47f81e36bbf265745c4e1c", "26492": "892a3fa83ca8ef2db9d896efb482f88ad21d6b5b", "26496": "411fa9ba04f904f3038175fc05722adb545fe954", "26497": "125b0c82053c42c43d1b4b36c6184ae71c75c548", "26499": "bd8be5417632c019dbc1d36400052805f95a372c", "26503": "b58bbb72ae0e24d7e03fd18f6f3fbdfe95481f8e", "26504": "4f88a0267a3a4992aacde45df7719fdef713bedc", "26509": "a6b4b2bdd6baf2afde27284097426e93912452e9", "26513": "fe610388a1f25c8d8ad80fbedd8117d91fdce9db", "26514": "32ae22722fc1f665a90d16b110c219b1c24c857e", "26517": "0ea1a6e4f7904b79d26239804c1712a389f46a6b", "26518": "0eb532de60c9caaaa568ea294e7e1427265b6552", "26519": "19efe2199845d1ba5464795eed89a347c70d22d8", "26530": "5e8ad11b75245caf2d158eacf369b011ef262795", "26538": "8cb86fd7b454b40c7b822146d5e26c55fdc183ec", "26540": "84c63b626c640a2473bd8cd0f8c38270d6ef5d3b", "26541": "249198b3df5fa16da4417501fa8a329043ddd20d", "26545": "8ab709c26db9d10fb9365c8faf05b395822482c0", "26548": "d329a66dbb9710aefd03cce6a8b0f46da51490ca", "26552": "f10a3df5f0b8434bf7c33faf00719c84333e65a0", "26553": "29f0b532988640cf2441b5eeaf57f87296ea111f", "26554": "f6196441b7240c0fa862790efdfb1a62bf557744", "26558": "dcf1614dfc11f9004e408ed8c833980c951c541e", "26562": "78d7ab3d0c35cb8aa0cdf449e0db1472e6ad60dc", "26564": "84809accddc771d525319c227d78c0152b1f7874", "26569": "d41b43ebdac8ae6110598649401dfd780194fc3d", "26570": "6ce63913d3533bdf4028ab6bfcf0e1d3a91820ee", "26572": "41e254f96e8d5bd558d2edbf8b198eb4143e8b74", "26574": "66c756ce333dc40120d4dd77b14517c6819cd410", "26588": "a7e65a0bfced15f1ebee9c9d4a6b49d6008007a6", "26589": "16692b1a3c241245fabb98741c0e90e630ab3822", "26595": "fc2518ba6b11fc52b0ff477b9e83576be90562d8", "26602": "78593a1059f0a9c04385f97b2c1caa221efefa5f", "26607": "fc92666e6331a0b9b7832a3ff0e6dd5b2822a0de", "26608": "471a2ceaf3f0b77ca63003b196e8ba8c54283806", "26610": "a699f2879ab3836fe6d1619c518c85956a3075c1", "26612": "ba5205c1b8a7bebdf37535c701ffcd8bd79362bb", "26617": "a597fe9e738768d97c398a869fd188860b3047b2", "26618": "daffccfa95251024a814139a622feb367e7c74c0", "26621": "da0d66baff4731e13017e7e0802eded966b85664", "26623": "c65e5dc7c91bbb257e98e6b61e5e827db49c1552", "26626": "37d2ec8dc68aef30f784eb35cdd64f78dbcd076c", "26627": "3f11db40d80b6ff122f41185b0b93637bdff0e39", "26628": "543655176a05e2f6a54dbbadfb754416f14fb215", "26630": "e4894aef5c93c845081388818a2eb4264c5e1d72", "26636": "c02feb9c70befed4cc078902d28f9df37d9f984f", "26637": "171ea2a856e7b40d0806501613f7361e09f0a2f8", "26641": "b5b417b3d3d988178a844ce6f20457966509b038", "26642": "74ad82c422f53dcf8637970a6f399adb37c1a67a", "26643": "36e017194c32a53cf2965a513243cb3c348095df", "26644": "aa874275d41d924523b718b961515eb8a1665dee", "26652": "27aeb6f71183635e3adcab602118b3d8912e006d", "26668": "4262a9c717a1504d0548d74c3276e296b04a8826", "26669": "671804035cda35211f97f6cf9f80d16152a872fd", "26674": "58cce65ce37a3e68c82878b77c844ce69a489caf", "26675": "ba4e4b6558050e0ef0fa3a312a46d65a5f021c16", "26685": "5a4140d722117afc89869d5772ddd7a67448cfbc", "26689": "076c599f25255d991f59056bd16f80aa72631ffe", "26692": "f9e161df7113350b6a0f83d975dbbb5c2fe93ee7", "26696": "470c783b50e82ff43fe3e808071b2f95f8f85f31", "26697": "a96b18e3d4d11be31a321999cda4b795ea9eccaa", "26709": "a906c1fa8cb68e937c87bfe63df07073e983338b", "26712": "ce6c68aebab74ce82ef83e1c6983faffe462066d", "26714": "d7d65c9d56ddbda8f48ad4b988aecad03fe3a8c5", "26715": "5c4b58674f80cbc3a29546bba32df7f16e11d68e", "26716": "cbde47818a821ef951ca73e851579ca75d23a82b", "26723": "84d84293bec9d17548097b41fa273aee44285f5d", "26725": "7bb4697b2ec2425bfb41410079841854b2abdd18", "26726": "8b901c7f33b7dd76e04df53203c19e1afd80dce7", "26729": "a0e136b0e0f21b241e97f0ed47f56f131d69f913", "26730": "55ecf648d68f3fb9691fbe0f9c1d5e6168cc5cec", "26732": "1b212bda1c2833467177eb0d62c6de6c224c6a80", "26737": "c063b7dc2a4d96a1ebc6c9c0373eae9f722bf69a", "26739": "bdd4e2e29c4b011cf455a72f85c92010656d2722", "26744": "c25557e0a9b2d80950a8501062fc337913a3549f", "26745": "266f40a00c04bf502093778c99a0cc06eda1865b", "26746": "211d5c193113f3e49e18422bd9926db9fb07f78b", "26750": "64b64cddba55312b3f49686ba7aaf72760166b29", "26751": "fb314a390851d4c21f3f6a2a87cffd329219c524", "26756": "32f514f546733ae1960077d2be93be970f4e13ef", "26759": "9ec27a3f5b81e6a7e808836410c9b6a73204c27e", "26760": "489de42a9585615ca9962a83882896069357ab97", "26761": "924cbe4dadcabd337a6d8b0ef6efa3091a3ed5fc", "26762": "821a18e55916d0d40227c58ea75f589ea3d9f078", "26764": "abce2a0604a4db5d8072a0b1478c7af439882ed7", "26765": "a5d021a1b6f439a19812926bc4d796ef5f346c44", "26781": "f1671076c80bd972421751f2d48186ee9ac808aa", "26782": "9439b56f8762b8c9b48d2f9e54dfb467aaa2b3f9", "26785": "4abd2a845d0723732f26dd9bbba34d076cb7321d", "26787": "c8a5ff07e5bda47eab870671634b107da5ab7934", "26790": "267621f07a902eceffc179fa01f984f3e2d4bdcd", "26796": "581eab37b5d558ba9b8035f3fa82cfa617e70e26", "26798": "6f822d20fe5d0596e2b284d3e246e38cb7cea7fc", "26802": "a60d5e8d7652641b861587f1fc8efa3cf2081bb5", "26803": "9e2d66a110090ee7416f4686593fdf9142ce6cbc", "26812": "d3ec3cb274fdb1a7d25cf7ee4bf2c94a8aeab281", "26818": "5451fcb06d5ae7cd3f4a9a02314d6e574bd4c83c", "26819": "ee60cc9164e5a20b98ee6722e25b0df41e411675", "26825": "f1c4ba3e97cbf5c494f29531b35da6144cac5aec", "26826": "8f8603dd18c9c70191fd75d98793dc94c8ac30fa", "26828": "d647ef2d98852e322d487d6045d5860223dcda79", "26830": "e73c8e5479297f235b37fba91d6d0e8464be66a6", "26834": "ad30b31af0bb3fbfdc0f11486807edc76cec2680", "26846": "073316d25d24b7cb4ffc09fc705448b0e17dc2dc", "26849": "e0d27e381889cc30ac0d5ab906146b7c2794ecc7", "26851": "fdec5a5d3dcd7fdf46886a162147d073546537cb", "26852": "d0928f871ccb42484c7e03c456ce489dea908313", "26853": "0ac02d3819157a9c64b78157428336200632cff8", "26854": "68ebc2bad1ad6a99e9939eff205a1a6d936cf4fd", "26859": "02d66ecd80a1851c3b206f4d778687b38c9d2c36", "26861": "0c384dad6a0a7bfc9842e92253c5f02b810b8bbd", "26862": "19bc8bbe37044b9f23d80bb282758071d0d8bf15", "26865": "f1206ddb24d35781328266b2b02fa27e6fbb9846", "26866": "a89f3ebaec7441f4ba5e30eb07206c2a7269778e", "26870": "9eabe2f87dbe087e878983bdd69edd8a9084c358", "26871": "5345c2575a28fa2dfbbec83c99636669476c2745", "26883": "ccb971d169e75c35ae0360e0949f31d2c0c49107", "26885": "cb98ad400c701f189d4e4043ee2cb44857733df4", "26887": "a0350ed099d1265dd86627280b03ea7070920092", "26892": "9e85b3701f80a5e48ca5e7fc5281af2aba591870", "26894": "f3ff68e5fe874f9626fcbe85000549083f4f222a", "26898": "56315089b048160d7c013f257ebf7ea9fea70d91", "26899": "8d225d918ed052a259331722b4eaf66d54a212d3", "26901": "ea7f5ebbda0016438dc1b80c98ea3de8dfec7ca9", "26910": "b26c86f65f2217578665998db3f3512bca613167", "26911": "a0be9d0615f10e5a1098466a58e18a215ff427a6", "26913": "0991b083bb0ee8bbd767deadbe237994397e79c5", "26919": "da1621637b7c59c155ec29466fb5f810ebd902ac", "26923": "1fb7047b0ceba98d43b50ebb398be899ff8f6a1c", "26930": "95a6774007d1d7898c7da40d9989e9f1dd1b0f40", "26932": "02883d85b5d3f68c12cb1df75f96e0fed741d4a4", "26933": "8245b392a344a1ae0db6e569ab68b368ad8883c1", "26937": "cdf83879fd0d050cade0fe7852550fcbcc177648", "26943": "b3f7132e0bf378eaf21af9194f447036b66c70b9", "26946": "240f7c9d95e60d14cf3f09decc3e61a451d78bf8", "26947": "eb22fe8f82b8c7b0561b25614cb0863b71b4427a", "26948": "a69ce0652b27b55d680a9d6def2a05c4376653c9", "26949": "e8c78e09ab38b80b586108dfb4151cbe70c7a694", "26952": "f253a7e39204142e3cf82d6beeef1ce22f5500cd", "26954": "2f156d8e3eb4f57067209fa4499eaeed8551c4ae", "26957": "69555f52b2e2c5032cf70d40d9f9b8ec9a048500", "26959": "209499058705258d60194f7d06890a6825778d6a", "26962": "5390a021ca3842e237d75e328bd47fb334e647f6", "26965": "92ebe1e9a6aeb47a881a1226b08218175776f9ea", "26967": "be8ab91f789c3b688d707940016b4c2d262913e9", "26983": "6d4895cc9fe614cf3164891b1f502453312f64ca", "27005": "0b9dcb2edef710bb35f1d5f8848fb5ba97990f7a", "27014": "dba16cd9f155c858bdddb530cab9971bf9af75fc", "27021": "fafd123410f1ad5c47341c66d8ea4cf541165e77", "27026": "ab37e1b29214bbfbe1fed28db68661160ca4acb6", "27040": "a41d513df0bc100e36973d634b95ba86f710a508", "27049": "a87ee593c3f5da5dcb42a8033ecbab0f0c9b7903", "27052": "942add94ed3bbe479c2e6f5ca8e2a8a6d4ca4831", "27054": "3cf4c289067b6df2ddf019eed3c9f73946d960a2", "27057": "6e3be61d6113e63a1d1be54e6c8341760ded5842", "27058": "9298eeb4f6c73ca1259f627860abe98b63f89da4", "27062": "4771e3f30f53c33dd9e27eb9dcbe2b938a38e9ae", "27065": "4317dadcf0758a287d3a0a2902d6064913b49b0f", "27068": "e641d8b35484d786f399e8cd9349b2a6c09269d1", "27069": "2ccfd794011ece560ba4bbeca6f9171176428a77", "27073": "245525514ed55258521ed0cfb2a1b00bad85aadb", "27074": "d0be29809a4c526d30afdb998bd6d0110b657dad", "27075": "c3cd5414426b0e61c331671a69a58103dabacf5b", "27080": "f7268a392b55430e968f67c51ed71799d4b02c2c", "27082": "777894c478153272a8a5ff37f3199c6e2800e5d4", "27086": "190dab07e0b88abafab2b6687d53a0c55b7a5b59", "27089": "5925773e51fc427ba5d5dca9e72f5e28a6e7ade5", "27090": "ded4fa6a0246e963a9fe2066c882d81981be906b", "27093": "7abe543492fe1741cecf574885dcf0bba36f7057", "27095": "3e8a54175b5b39700ddff4729f9764a5f789a445", "27096": "084c1dc7524016a59248b811270e8e4d210b7c1d", "27111": "d1add332f833a52baa69bba7f8d378e9dec37343", "27114": "8bcf6bc30f33a6a36aea0eee2c72f06516b4b6bb", "27115": "1c8efa16b296258e059a334e27e68428cf3cb48b", "27116": "2c2291136aca50b58cd7c09b29a25490c89c9b8a", "27117": "996e6419e44668a6daa28f58efcc0d2c07b3a9da", "27175": "86fcce61c9cddbc354ba67b2f818670f5822c688", "27177": "90177d698c61b9550e1e3033dd041e91f8e3c6c4", "27178": "18a6e3e505ee416ddfc617f3e9afdff5a031c2c2", "27179": "c43b2bfb15281e170cc5006829ebc559bd1915e3", "27180": "58da484abf6f466a9e8bf55c188cb5b501d31ceb", "27182": "34b748bbce51f880c712312b9c2d37a3560628c0", "27185": "a724ce89e37d00eddb20558dd383433071c07536", "27186": "1527375b05bbecd6322a98e20531ca945209de36", "27295": "9765987c2ade250c82bfeaba49d1f9301211d63a", "27317": "13661ac7002a6b39072e616c19ff43daaec60f7e", "27426": "dbf37449935bced333a3999afa860aaf304ab1a1", "27436": "5e84ac2bf2085d438da2d0dae5d370c4389bbdca", "27441": "c70bff83e452c9b76b7f5de2e6811b800d4f72cf", "27449": "b4fd7a79bc55f17f301d219492528e6f5f40c6f0", "27456": "0311c93c8c43cd913303c529673d69575901475e", "27472": "adf50b93d76fa55d03ccbc4910602cda23b32c7d", "27486": "64619c55896dad1927afe78c0702a58abf0d038f", "27532": "eaa59b4f04a0c75091e332afa95a304eddcd93ab", "27533": "2810becf98e20bfe2bf99311c5f4f3e150d12d09", "27534": "d34b9ead10e28e3a0a62d642a16efdae2030ed76", "27536": "0bd548e287b9e2fd0126f64d8be01a812e3c6a48", "27542": "4cba2d91e1546872d29af6b25ad35947f27e03ac", "27548": "97f9fcb599fec377f35be647afdc2d5c2c6ba1f9", "27560": "67c68b88e4120a84ec516725e322265446fc50e6", "27561": "551773f27ccc955ce24d15eae84eed924250c573", "27570": "196d633cb19274ddffb4ba42928126fd15e3282d", "27571": "1af65ee2225a011b39a9cceac306328be3737aa2", "27572": "b4d2295bb5ba3c866553c1d7c10938f7f00c3286", "27578": "69898992b339e4614780f626ed07c4244a08648b", "27579": "2d43a901ea6b16ff5bf1766177f16cec4eedfe0c", "27580": "fa45695b787070275696e979eb9f476ef3afc5e6", "27584": "6511a143a0bfd2be89799a7db2e9363eba5e7450", "27585": "529c61bdf69356b4a428d48bb5bc72c2417ed0cf", "27587": "97d2db483fc0ffd46f38d0e1c39d5fc001e33197", "27596": "5bf6d68e7241498556ee1b28fc146c1c21fbb5e4", "27601": "e4e0ab8e5ba9cdf17f9bd2c3c9e06e3d12030022", "27602": "a7401aee4d6d465977760e9e4b16f793d60f4ee4", "27603": "32b3f82e4862d85c5aebba2b2b82a931038cd103", "27607": "4cd6e4b336fbc68d88c0e9bc45a435ce7b721f1f", "27608": "53ea3a9dd802c13dc6930504d4a896bba8287cb0", "27620": "e1863f3582e3e8870205f8a9d1ed1cef1bf536b4", "27621": "bbe2cca1925873dea538674b96b53b5cef0a148a", "27626": "f4703789ee8181fb6a71f4250dc8316e81de7f78", "27637": "54811204a63c2606e89c4f053c4b9a7215207079", "27639": "60f9c616aa12800e27baef1db0f964cd9da6623f", "27642": "651fb50e07a8e11d31bed9c202823da2ce558c58", "27643": "72e8904d1074c2eb02558c017880b9a8b3e017db", "27644": "459991afcddfce6fbbae3fa83467fe607f2de7d0", "27645": "263b293d9caf8f54183509275a853de9b8d8839f", "27649": "3fbc84a5662ffd985a071b0bbdcd59e655041ad3", "27650": "db866874ccb8c8c814df57eb1edca4fd05eb1753", "27669": "f7cb42d52f121656b0a96ad5a9bc5c44506d2cce", "27670": "f1d0378d3735aa97a86af3b87b8a9d9ee4575af7", "27671": "6eaf8906c4dccc60592dedd0ec9a7aae0e7db851", "27673": "e3c84a44b68966ab887a3623a0ff57169e508deb", "27678": "1f8ce6341159ebb0731c2c262f4576609210d2c8", "27686": "f842c487da5096bd3e76a716ca033681981821c7", "27697": "04d8d96285e38f1683960611177b360fb1b9718f", "27699": "925f8381009bf63e54984fb4245466f0bef31ab0", "27702": "99bcf99750d7da499bf3887e6acf89f025e0b9f2", "27708": "912790315033d8a2b8d525eb36db410a851ca1f4", "27715": "b95ba5d22c8e567afb5085f6dcc8aa0e499fe525", "27719": "a8c8b63b70ce3303e56e2e89aefa7c9995cc2443", "27721": "02746c9f20b8f491fd2cd40d8807b24ddc6ce26b", "27722": "c970c04cbeb38c80901a02bc573a9333458d4c4a", "27746": "34ab10da8641ec9c98d8241ef94ae1ee0af946e9", "27755": "d73991e45e097d2d23732f5a2fcb1c9cf61f69fc", "27757": "9c9df9c649361fb651f4b2174e779b3036464ab4", "27763": "803386487f14484cfa24af915c24ad75211469e8", "27768": "274d5d64a989e44e99a9defeaf8fa1b11bda46b4", "27770": "459ffe5c008863b58805c9177a85668a3e5fb4f6", "27771": "e31f1fac208882f1255edf346ef10c769b775853", "27773": "f34c7c6b0edb8bb3044867d5984dfd607fe9f5b9", "27778": "e4630a2f5273307983b6ddca9b72aa0cf5a65784", "27780": "3a9588ae8041d611cb1df4be849db88fefc5ea46", "27786": "68752f786df542d340f25c41a8920d9b2aed66cf", "27787": "74712a53df240f1661fbced15ae984888fd9afa6", "27793": "be92e0099d4926be76ab4ec9ca6db6f2471397d1", "27794": "7e9d603664edc756f555fecf8649bf888a46d47c", "27802": "02798e4ce39ae7882b19a3fde209472b7411d48a", "27808": "3329d26c5d1d53f7fca1dfe253fdc43e93f0f6aa", "27815": "bc6000da993399284d2afd4fcfa1e4c4fe0d408e", "27816": "c7d83e7412169399586272176d5ad839b568ba57", "27819": "8adeca227a39640b0ad4db38ca34a77a0bb50c8f", "27823": "9dd6c60bfccea7f78371e1b88f223b93ae69d037", "27825": "48efb02a936da85e395ff29a477765ea3916770d", "27826": "3ad444b07ed53cf43d11e755701224a96840de62", "27841": "3f5097baec71b4c6b287534cc938a16b1f9fc474", "27842": "4cdd3606160de923fb4054cf93f4ea02a356def0", "27844": "245b73ef38844395c36ce4c1032092c81253d112", "27847": "7b7e7fe4936a0cd8b1278ebc3169463e392a486e", "27850": "d2b0d56350ab4ec48a19349a4c05cea0e2603b21", "27854": "bd263912e11f7f79310c5516fab6bd0a7b7c8eb9", "27865": "08690a9e394406562f636f90bcc899430bf3cdee", "27868": "e731e8676118c48770368eb470fed2d77fe82847", "27869": "f1f1436b853f3855d75667ab4055cce06960fda9", "27870": "bde2119e80d14a21950285f2d872b29506c7b851", "27872": "60a1e10c4593736b188b38e7d7c51aefb213af6a", "27873": "233c63a56974de22b846ac989cef1fabe45e7296", "27875": "bbc0a6b7efd4930053976e55b7937ed4606b5a14", "27877": "c6853c7c27bb8352ab498848439d4fee9eb79a33", "27882": "385575faba79b5c857112199206119bf9ac2277f", "27887": "3b294521a7394c2195e6b2980555c6b27258bac9", "27892": "70f4309a155808d3a60a9a71db2d9482c1ec3ad7", "27895": "e552726e3a5ff964a004d46558f534e7a47cab70", "27896": "64fb290a8cb8fa9201f18015f3de1186e950a137", "27898": "f981a7ff4b02204f215eb089ce77f9a3f3906b1e", "27902": "0d2536650ff1b750a9008cfd2893dcc1db58f94f", "27909": "bf37644ca5987f5fabfe72be6da1fcf7a0b6b6a8", "27913": "57f2a6fb79a7aba317f3fb57a0f1e2439ea99481", "27917": "a1454867ab910a356588c511700c99ec6bef93b5", "27919": "ffb6f185b5775c612524496e98c8e6240f9bfccd", "27923": "02e6b062027666b22c68d91e280b28f57ee9c2b5", "27924": "a2a6d0d24d99703ded59c31b98b259900469762f", "27932": "ce40769276729d7bde07eb556398a5f47b8ecacf", "27934": "82226d816c67a80ff634fd202c1df32865175232", "27935": "66685909f174c38ebfbf7f733f40bcf7d9e86d48", "27937": "015eb5f76e1dd5b38b08bbe8b648fdb34b25e938", "27938": "33e1dbee8d9e11a3e96efaae822ff6f3c44e3cef", "27940": "821c53daa1261a6285cb85c106eab25c4d88ea2a", "27942": "34d7d395d79f880dc9e156ff83af0cf5844867bf", "27944": "6525ed58f1757092d73f33ee8717be2b5988c3e8", "27947": "e6d04db287a4421edb3a060fc84d9f8c66718cb5", "27948": "cb107d1ca6ac633702650a21152de7d05d31862a", "27955": "0630be4c479f36113e9c3bac50a11d163d2208e4", "27959": "d92693b9c7f36679a7703a72397a2993ab158f88", "27960": "058af7581d22d15bc45f24283cbf5374a6a02541", "27961": "60945085cfd1abf4e04db461040bc675f1d325c7", "27963": "ed7d967ff37b649a3b5ce8adc51cdf4ec9dd39a3", "27969": "26cff95893d7609b7bcba4b6d374835ad975137c", "27977": "d49ecd53dbbaa9abdbeae6b5ac0486a2df376566", "27979": "33963bac8b276f2f2a6aa25e80caddbf23d9ff57", "27989": "88ed1552809f81e2ec8b04c8874443abf14e6f8e", "27992": "e695dd02a5c3c9cb0ebea8eebc72915af9deebdf", "27994": "57adb4bb6a8eb46fed597d4a781e47bcb86ebe11", "28002": "5165c654dbb2b08e8a38ac437ab35611726bf26b", "28003": "d19c664c70a3bcdd728a2a78bfe424491bdf2fc0", "28005": "b93b67ca5c208dbb8d0d0cfd640dd6125dba96a1", "28007": "47a918f644da4ed3947ee2f797c790027041f29b", "28010": "565fe77f9ed8ed5720b42ddc3dc30947a1f3e9ae", "28011": "24d368a809827cd2cd787a470a65b4a7cd721d10", "28013": "48896f5ef84e1b1f89c37ab85ed256c4c68796b6", "28014": "e6b8b19ee832ae89289721301a4f5afcd454ec4f", "28018": "d5a3e2747f08da24ffb8b889daacc47890b72c5c", "28019": "86fe6658e8ae9dc70825df110d444e3780ad1ad8", "28020": "88eda2f2f430e2f3b7e580fe38ac31e4c5fac942", "28035": "7f1cef6b4700c4df135abbeb446458ee468d3d98", "28039": "73157efcd17da95ce984d1595ac4907233b9dbf5", "28042": "81829432b3a00ae8ebe46e53d181810b462f0024", "28043": "2dbfb458fa3e96203f93118a9d142a6bedca9271", "28046": "3f6bb2073418e0ea0d88398e1848e2aa3f1b53eb", "28051": "cf1306a842d7b1064270bd06951a485121e60816", "28055": "9ebd2bfa64eab788d529af7404f85dc3a58ff411", "28058": "9b10c12e9d173d8b67c50e97e6998dbc57a549d4", "28059": "225c3360721ba515de88a1e191ede58e8b95593d", "28061": "923e77abdbc22c0ee5816086a334617bf7935f1c", "28062": "07a97601175f44ecda357514c0b91ea5139fb04e", "28064": "23e42e91052df51b55719b7c6759d3480b295cc9", "28067": "c20f08accae9d2b2bafde2265d7d30b73b059035", "28074": "789b21719fe89a3b38cae5a8800a4c0c3886a0f0", "28076": "2eed8784d5946e420500bf87f9af305d87aaa055", "28077": "590201aa6ef313f9d34fa4136d6f0b3b3c36e951", "28078": "291ac7f21e59440d249d0afaed3213a79cf70535", "28084": "9e37e585cc86ff6dc821d0566baacc137cb16343", "28092": "2378c3c987c479cca27470d3d66b5d50e91ad673", "28094": "2a267e6a49ed68da01761c92deb7c90be207660d", "28096": "18af0e10878fe49a893fd576317dabd424c7ca16", "28106": "86472322736260e7c2fb2ef72e7d01925adc9de0", "28108": "c954144b7682014428d547e7cbbcc154a8cc5fa0", "28116": "20d5999e2f01c32876368b97797047c3adc536bd", "28118": "d3d594039815cbdae8e9afd281d629d0ee266b84", "28123": "0cefa592833151266d3e0fc2f258685280b0713b", "28129": "328135c3a355baed063a1ccbb224c9dc1b71a464", "28135": "156cd054e007b05d4ac4829e10a369d19dd2b0b1", "28142": "822e00b9b87f8ce41ccf8112bf4105ebd1657f83", "28146": "aeb23741b1186e6ae525c4dd7f46ce9e1378e670", "28150": "4afd82d8dd2c1ef48c62bdf875a194e407f2d2d3", "28159": "2866c83df6f080393f9fe2110039d1ca272232fc", "28160": "f0171ba7643060cf7cf05a27e24ce66f09d5a9e9", "28161": "bb6b86e2afe88b371badfcefe298945002e47006", "28162": "07a54df60c6012da3b02a248c65cba9688681109", "28163": "588a517b68d9f273b607622dc854b1b3d014ac58", "28169": "a34cfc9cff3886ae770cb0a2d527498d60ab24fa", "28170": "d4c08f977ff7ec0bb7e043d9657b8c0747efc169", "28171": "4c6f0f88df24180bde7475030e3f40680a150e57", "28172": "a72b89c7c2e30f5df5cf27f68b6afd45361934fd", "28177": "18da0ef0480920c6256627ed91469a40997ba4f5", "28178": "9af9a963b9b154dbc958f05480dfdee6a2965292", "28179": "dbc4f5d3fff330a842576427674ee4fc5de0164d", "28180": "8eb6424128b4be16bab4115f9d172b32c397972d", "28182": "eb2c75189c9814dd463e0019419360b860d59ec1", "28186": "820a439494aa8c5a199edadd6bf38af400f67caa", "28187": "4ccfbe69b7a8c511d262a9759e576bb87ec119cc", "28189": "a5aae4f4cd852b64f5f36e8c225895b3a2113c48", "28196": "99cf84aed1751d4707f6f0c2cb9fcfb460f56ea7", "28199": "dc11e03f11b9354a84db0848e7ddc277ab779b68", "28204": "b4718373f5412ea0d52ecbe2a3f9bbed824953a0", "28205": "b9dd2be0108cb312b4c34239a1dc8d24ef3a05a9", "28206": "aebaa8d2dbff7af620a2fca3b5ca9fbb08d4c60c", "28207": "2ce4ab4063457f558e5aab1051aedc68ea17eb25", "28208": "7b0a764fee6e1614f3249e9082d8c4acf1dc62d5", "28222": "bb76bff17f86e468ca9fbc5071d95782dc932c10", "28227": "8fadcf13ddbbce596d008e206bf3127cfc379377", "28231": "fb27bd593222f42b4dad5286dcb9be4b74f34273", "28232": "bd178b3836e62064bd894a8a2b4c9f0ea71452ac", "28233": "136185cee387e0e3638abf38b4faf9b0f0cfadd7", "28234": "76e80b35bcf279f7837b999cc8c7d6dd2d0a3402", "28240": "32f1359fc2d11014b240dee2270acea1784a34bb", "28244": "854f95a25d702bcc3b1373defa9ba70de9ce32b8", "28245": "9bbb13b81d842dafe8ea4e03dff9b9b6c021fd71", "28249": "ac26202be0fee25871845e2fb479bf0b09be2b3e", "28250": "04934769d5d667404dd311256632618a13625e91", "28253": "6c44128939d0bcf60bc1b89a5c761b2ecabfdd3c", "28254": "84626f2cdf1e14fcd5acfad5169afbe6830a0bed", "28256": "395b754902c6a31ee34d4a985bf612d712c25b08", "28258": "0645461254a2110438b6df63ef193c1138c306ec", "28279": "c0043831c46ec07fdc34999d664af654ada0825f", "28295": "444bbc9a787ab1d8a487085e75772db210a77699", "28297": "ba1fdc94b0d7358c993361bdd73feca09d38171c", "28298": "d483de0f32baec73b0856230dd35f08373ecbb85", "28304": "043a0421504396fa7ab0f27d66f8bb5ea539606a", "28305": "56388f8f582b7800bc3af84958e2d1b0eae1bc05", "28306": "119a0330c9cbeb13fbf8801b4f5d956659ff92cc", "28308": "788976979452a2d0758040c3c79b9bcf9c78b7c7", "28309": "1245f9da021d65789a3332f0e046ca30d518e9c8", "28311": "ca39060bd4f98657139f782ff9c02a1f095ed3dc", "28312": "7b2b9f53503eba60da8eb6e3646cf3b9ab342b61", "28313": "d8e0863c76c23964974c454e043d6f9e0c9d29be", "28314": "fcba5a6c901717110b9767b418df410d7c8c6e73", "28319": "bb100bcc3b4975819c9140003463f39b7d8e255e", "28321": "ab5dc576c1ab55e2a2ebd7efd5e125fac3e84879", "28322": "2dcbc560320cb70c2664ed442b9083f80b23840b", "28323": "bffc8b422d7741ae47d0c5604bda475d3c92aad6", "28334": "723a92e463112b1163e5adb071644506a24027f4", "28350": "a8a3fdeec2c19a1ec776c3a33062502962e09cce", "28358": "9563a3a63fd3dfb3b687fbabad134b5ded72bd46", "28361": "3cd6c57ffc80fa88a3c4c268f53d8d08d37e3fe5", "28362": "ab22e0076608f4825bf9a3ca1b6a0a6a7a670d14", "28366": "5010177cfcab1efff8cf5b8eeee093491ae4bc8b", "28377": "c5b2676a5cc32b316a76d4ad636b6b3109f09c2e", "28378": "b10ee24730097204b72c12bcbb74555083e9b54b", "28379": "08f9eeb4a39761131af059b944225874835e94b0", "28382": "9c43c1f8d06b69715f03646cc26546f3bf4bc71f", "28384": "43683b3256a86659f230dcadbcde1f8020398bfa", "28385": "8829b807a841911ce18e79b308fee9fb92fb91b6", "28398": "6d7b8aaed5ae9f0435764675ebac8c9ada06738f", "28399": "5c3762157a0cd7a6a036a2144a5fbfc5278a919d", "28400": "8fa7f5949fb2452715a03d26bf83f85d418dd55b", "28401": "3052bbcf1ec4de331154f920dd9bba0bbc200b95", "28402": "5b5c15e3096f0f040a70040dc006fa23fec371d0", "28403": "0fe3a700a559d6bdf05d7aed95528290d3aaa698", "28404": "9bc70e740253b4314ccce42bcd29c8f24875d704", "28410": "d3cbba2ee0ad9909a3fa2f33b23aeb94785fd37d", "28414": "9b7a4c97491c53e9f0602699facadad26605752f", "28415": "3eefc256a7d87fdab7aac059b61f7deb2834d517", "28416": "c96717f9fa0e9efe506ad4eeebf36f5a8b27bd80", "28417": "1a12887866d06bd8b24d07f7109cb08e7e82e12d", "28426": "9dca4085c724b3e62d54dee33e42ebdba3bb975c", "28429": "4c83c0444c68b89b051f7ef8d8eb1a2276439d78", "28430": "d62b0ee88b20e5946fe49f0ba533b3e547e4d4f1", "28431": "8b15e57718042c75af22a25a7d604fa0f938f16e", "28432": "f8c608cc7a8abcfaea1cd655ddaab47065c5b1e5", "28434": "7f7d14a2b6e1078af25233bbdbc5d8533529fad8", "28435": "b219f69db011a89e6c514ee487dc437f607c4d94", "28439": "93d3e7c247b66ec54d1095df30e99a95b4af9c72", "28442": "49d62f84df0a82b10b3623024ca66b1f09958072", "28443": "43f80863ba2994a186293d86d516204ef38b0043", "28444": "2351cf4976b940eda199f9a17a12bd170d9b326e", "28445": "ae7f9a2cb71cccc9d49cd343e238464107397814", "28448": "4403503b501a46e4eeb9f23e010e913ac5bd7a95", "28450": "5f071c67660dd3eedd6eddb39681cd2943166e68", "28468": "cfee2df31bdc127c345894aee594cbcbb8cddd0e", "28473": "e77b53a880edf16808488084c67ef090c69b3258", "28477": "a20eca25e9b492efedafea4b7c5d84692d869f7e", "28489": "cb5507025e470ddf485bdaa115ffff07ffd0076b", "28501": "0ffaaf8cff4855f4127ae6025ec271bfe9c8666f", "28512": "509b5ae4a7bb3c99324fd302ead1bbf4b130c741", "28515": "3dca0c71d1446f4730c2b72d67719467a5ce528e", "28517": "4e61c8958beaac5a276cabe30f98721ec50734b8", "28518": "08edcad74d32d89f6b60cab43d61e58773e2e761", "28522": "4a4ca3946510a5f6d888d48d185d3b5d3532d03c", "28523": "0dfbc057a58f4992843b78847115225019e9d573", "28524": "c2313555d7d202e732872e9a55d717d368004aa1", "28526": "a64510672cfe7a6cc67a04b8f3bf1d47a938c353", "28537": "5d24993c2def9e3a368e29ee64a0d29f110d1657", "28538": "360ba0572483457837992d711a0a00580741fc88", "28540": "5da4a8e1835a11d5a03b715e9c0afe3bb96c883b", "28555": "2884e617b2d93010707525071c4308c3356fb8cc", "28556": "8fee756d8c9d2f5fe211fd9feb999c0da8a89821", "28559": "b88b2c0c19851810d4ee07f03a7734b6e19dbdaa", "28574": "ab24dc6130d834fda0744c193f002b3a5f671a90", "28580": "e0ffe3572b37190d9da5b1d07057e4e038bd3197", "28581": "950c6340164ef502c032d11f50130e4bd270c875", "28582": "097888c917d75fa85788ce7b4edaa98b2bdc6ad1", "28583": "1713503b4117550152ca47feee651e67275f3557", "28586": "269f2f2d30a2c6ef3c435386aa392b5b1715c662", "28592": "a0f9f503f2dbc9492e7cc20b52623993ced6214a", "28598": "f09166e85cea7c1639fbb1054171699394ecb62d", "28599": "94b347e867759325d8586ad3d1c3e01c590d83c1", "28602": "c0628451db9c87ff0b11f07e68e3d30a954f1ada", "28604": "98dddf908dcdae90930e09c40bc92135bd4407eb", "28605": "918ed48eeffaf26b6ebc0d9a1296d756a349bc7d", "28609": "520b7d12256fcfcb6a2b3791f8d1bd3794302af6", "28615": "7571d4ad2ca1be26a76c153431c937dbe24490bc", "28621": "e38a64fd8d78d838f950db685a16337aa78f9940", "28625": "44f8f9d6a73920eeb04ca577267b68b90cef6e3f", "28626": "ba77419b101535e8ec14192c35b924b32b6a31bc", "28627": "24a470494ebf452931ae9b7bf94689dfcca1fff0", "28630": "30cc38701d010d1cc053ddb9856b2d522c33c0f3", "28635": "d4ba8edb36eb8f272274d835294533eb00b0e57a", "28636": "af4b110273346e5969fba04365bc477747529fe2", "28637": "b66d03dfc4958d159c5dc3ddc9075f8bcc47f9c5", "28639": "4635c9966f9f9a1bbb775fafc4096fddee8160dd", "28640": "a37b3a82f1abc3e73287883acfd2b06f88a09f13", "28641": "220ae326b8cc407f3e4fa3c5d243c71a84749605", "28642": "8d161acfdcaaa5f09efa7c2f675e74631da6b293", "28644": "f4aadabcc0e1968f3b309642af52ef11ae77ca01", "28645": "c2b9d20cd6a8d28785972bd883f11d1a7fc3a8fa", "28646": "8988d371ba3652daf991169750e48b01aa16240c", "28651": "f1f8455865786829edb1191dcaa8b9a46c036106", "28652": "68b06ce36f7d9201481b73c150e2ccb3b5aa9540", "28654": "d0a457f2d16b64373e689c78d53f835844d5b432", "28658": "1e4c12dcacca05adc999c8f74608c002f1c2896e", "28659": "76930e7d0c22e227c9ff9249a90a6254c5a6b547", "28666": "c924809ce02135db2349187ca94e5a985840bb96", "28673": "ada944199d09c0e64dbd9282e31ec7e766d847f4", "28675": "d3cffdc67589a8189e5aa490a21bae4228fb3d96", "28677": "c1e3b726c0ea767e38b5cec3966c5b434e62f215", "28678": "33dc7bea24f1ab6c47047b49521e732caeb485d5", "28686": "c310f75c59fb5cfa2fcb58922db5cc78a304d447", "28687": "03692a740083a7ab54cd09a7c564cd1bbbe5c067", "28688": "e1f168276986395fbd6fe3e6305ae82d88b81a12", "28689": "e481e39350847af034bbab8e1237ef0085714886", "28696": "4ec84c5ee225e43ca27930944f74ccc04df39115", "28702": "8b6717eda19732e93d5d0802f68005b585e7c6b3", "28703": "266a6cfdf47b7065ac2c0ebc660488cdb596cdcb", "28704": "4950fd10e678faea859fc8d8bd5d7ea9df2007b1", "28709": "03ec0bc0e7a631e6d7339eae3399602a59e2738c", "28711": "92bf2f6d81252f97a7acc69fcc016636b29d1277", "28715": "e538e11d2b0acd93f5ce74fb3c6a0e25a4aa3ef8", "28717": "b1862a3006a354be01b860a1a23f100e6401dd1e", "28719": "0b311f4f6c5208946f72d022a97c818c58178b52", "28720": "45840adcf20eabc665d2fc17f28bf93e75bdf20a", "28739": "1de46fe2feee9d3c500a83331ac9b75af5aef947", "28740": "643bc75dc8537de3722de745752a1eaa065cf4bd", "28742": "90bcdead2c29f535f4140782610dde10ddd38592", "28746": "7a505741392ee24cb85ee096eec3b3e4a624ac15", "28751": "953757c691b0ffa5c4e0e0f58fd40de6ae983d52", "28752": "a3c09377e80a37deedc486ec30a7e852b7a8e564", "28758": "905075211bb0bae80cb7f837419180f25a253dd5", "28760": "b01a4732cedf8ffe6def3a877e22dacacc796bd5", "28765": "4d290795d4e8c60053eb789acf173159dc4c1575", "28775": "bffb00600e686d7d321d5b7529390201382c41b7", "28783": "fb5aa9dbadfb216ee75e76ca3c7e3bae204eaa20", "28784": "695eb87f10af2d012937492d4943b59b57cdbfaf", "28786": "b6f8b211d79327948d2c6972a62e0700975d613b", "28787": "26f8b11b6e5529789d8e8f6c677ac02432d84f59", "28789": "91d9bbebc159ada6cccd0e1fcec1926e26b19c6f", "28805": "9e26d1d2be7a961a16f8fa9ff7820c33b25415e2", "28813": "78a58c3d5b9b5fb5d7def57bc5b026e539744910", "28814": "ba596df4cc23445a117c3785239a75a3cab6b2f2", "28818": "cfb6a4d88d88307d507a86d1d70cd7d84c611406", "28820": "f1e479659566ab798bec511c97d32b0ab8b645c9", "28824": "779613108f2d7a138bf20c8e6c82d9f98e2cde74", "28825": "fd1b878b62469cc9cdcb80e66bdec9d2949d8133", "28826": "7a42940e610b77cee2f98eb88aed5e66ef6d8c2a", "28828": "8e956b4f613d1a7332f0a07f53afe0855ca59f83", "28829": "eff302e5e8678fa17fb3d8156d49eb585b0876d9", "28835": "e3722cea8adb7b66084a7edbc6afb978c5521c16", "28847": "1d2eb4b33d115b88681a3225172a5bf8629c6211", "28848": "30114c3b34feef351143fd4676839eaab93af931", "28849": "e4feb7027e397925d220a10dd58b581b87ca1fec", "28851": "de3fcf1473c7a13da1f8f643f6bf33c0c306f73d", "28853": "995ea11dc9fcf746f52c0e942cd1cf1b3a5c1a03", "28855": "23d0c17dec171c2d7c21bb40be773aa809ea2685", "28858": "1342aaa49d9544029f1ff1e56b404adfa1bef468", "28859": "74e135b261e4613963cc50ddb97ac2edbd5936ba", "28861": "812b696bc47cf1fc71719758aba43e4be4f6a512", "28862": "c9f9081fd7156e351f7a30d8e3b75968cc5503c4", "28866": "ebe111e30186fe24473b854db789172c11c67d4c", "28869": "3fc052fc6e64c6306974d4606551cc9b4711039f", "28870": "8e038f4a930c0c899e599ee58a56391e026a608f", "28873": "b6391657bcbaebf9b917ae2f4472ba9c8e872cba", "28876": "c4693fe6f291ff142f6729ba1d3d6baa1b968b38", "28877": "d7a75e8e8fefc433cf6e5305807d5f3180954273", "28884": "d714c8244011a01dfb6f6f453da132a9b10fd935", "28885": "5b63f260933672b7182daf4fb15ffcd15bae68bf", "28900": "bac54ecb0b815eea2e8116d21aa96e1387793468", "28912": "80354c5fd729ef3bbcbfc41a661fd0cfb0f4a107", "28913": "b2f29f2751a8c9fcd83bb106d5e020d1901377d6", "28916": "dc3fe03617103814d56941b74f4ebbf9b33cf3b2", "28919": "3095b43db1831d876915bb581078e8d11c9febfb", "28920": "811f9eea3b105919846760a6eca4edd22cc11c1d", "28926": "f7bc512184a1de3992b0d154e6244a7a0d9a574f", "28936": "e0af5e076a1bb8f378b73ed622240170d06a16fd", "28937": "b34df2990805634bed20d41b8e314cd0a796bffe", "28938": "11cba18268c04d43a56cca3635e49fce1e3a759e", "28945": "ab12dc87f4717fc0fdeca314cd32cd5924928595", "28946": "e3f288ed51e292af99368eae2d5725772666d923", "28961": "557ed6af978a2816b1c7c0e785c5cae6b7c92504", "28962": "e393b066cbf09d982c44063e051341dd061a1b82", "28965": "3b39031332a5581ed7b95ea41f66c5f8149cfbbe", "28966": "08d7e1163a70224b448469e072981b7347ed179d", "28973": "85df388d344f4ebd70921dca0bc723770e05a37b", "28974": "073b9b9435b1bcabc0d7641fd7c9d9f5333a578e", "28975": "cd50d88237a95eed03536b18eb1faf60885233ee", "28978": "2e5502ecaab235d9a1b5e4ae341a86714f981355", "28983": "098a3b417dbb3c620e423e29f194585b68882d5e", "28986": "21e48ca557d476feb2654a6c25551ee0412be3c4", "28989": "1c9bd177c44fa9c4914b3e8d6be7aee62a0f601f", "28993": "ce82028409c1147a6df62d8f7437e0a9262ee2b7", "28996": "caa27a907ed9dc65ace7c1a14954ae6b75b086d8", "28997": "f5f845b7bd0b737740e419826698ab4a9e61564d", "29003": "9c28deb7d838b6e0c171d54bb6a2a8e5498c9a5c", "29004": "7d0430be0712f0a02102c8637da7741eb3b948bb", "29008": "a31071b0b4c8a6f5cb5999b6e04f5ba6057fd546", "29011": "7f6895cd7eaf814d99ca7438857b17d95a21a2a0", "29013": "43c73d4871e78a857470b799e9f481b78e9b1d1d", "29014": "504fd7b2eedb90dd3aa0b326ac8c3120118b5f2d", "29015": "eb66994093be5b57324580cf389b0ec1b41e9e1f", "29017": "8bb6d8245e813d6ee026ac90310d19f3d10edf5d", "29021": "a481a044c8cbd679ca736341056314ffd71d54a4", "29022": "717df4e93234a1a290aa1b472b5c1c4e600009cd", "29024": "610433b03ef720c8bec7dbf7573a6abe4f913031", "29028": "1b8b46b3f2f68f5be8e52e798eb91c2ac5952745", "29032": "31647f1b3e56c2f2a471cd2c3a583311534173f8", "29035": "d4f7d9e215773e979eb43a1e5a3cbb51f96bd09d", "29040": "555b3d8e10745bed72e25e70465ac447009fa8d2", "29041": "72a8368962fd1365d480a88a1c84a1aae243dd6a", "29048": "0f63c5ef0e9789fd18a676a750c43d3d69211324", "29051": "8f4b73a0d04f7bebb06a154b43e5ef5b5980052f", "29055": "c4ae3ce646c4dd9a12669b379a40287e3c5955bd", "29060": "444f696f69c98208aab00ecbcec7dfd1689da9fb", "29062": "da887a666ad975ece7fb7465005aa99c0ddef8d2", "29064": "10eeabee267e17c042bd1ff991823b16c85ed563", "29066": "5363cfa7d07641e84fbb5f21a217018c9b55b2fa", "29068": "73fe877ff967f279d470b81ad447b9f3056c1335", "29071": "3dbf5ce5fdbc996e8abb6929a219689cf8c18e69", "29074": "2facd1966c379d20a9b15a62a054ee77f74613bb", "29075": "fde2e536a1c1a1ba90727958f0b6da34fa53db1f", "29079": "49e026df832a691638786774708c8ccece6e41c1", "29082": "e4c78e3c0c06576be6cb12354730018b765c627a", "29083": "09d5b2f8ad8a04eed93b6bc4789c4595bd33c2f2", "29086": "a190258d4e90f2a17a9469e5dd9fb5f4b045aa90", "29090": "d0f19a2d633b12119909b7c9205a8c8932ebbd51", "29091": "e745a19cb0ea9af0fd252a4625ec793130f87414", "29112": "662f973ba58563b268d009e67806aa1150ca1cb2", "29115": "9054ae60ee6989743f3cebfd7faf4f38c0e24756", "29116": "5c7002926ec8ad12785b36024f9da80b7017ad1c", "29128": "bf4ac1f81defc727165da4ae5bfea198c75e82f7", "29131": "59a2c17a7851b4cd88d2631654d5fe5d50f0ba11", "29133": "2908338b19c26c043eab61c2af7bdff96b02b1bc", "29146": "af8e67c4fd368bae710b01f32611b10dfab02b61", "29154": "da54e54cb7dac1c745bc2378769d192eb0dded5b", "29155": "9c63473c30b773dcab7adf699e1bd5dfcbb46e9b", "29164": "cafda248a5856a6424324929c1708ea8048d89d6", "29165": "a56fe3b1b3fd358329736dee1edb0ad24eadfce6", "29166": "09416c2934a5f592970e1d97c0298924eed009f6", "29168": "efaf210f7128f32e6d3d193f79ccc6b43ff8c006", "29172": "54232c06e1bc9c2ffdea8a3c2f74dd1f6b064878", "29173": "f10da39336097fca740dd1c407939eb9c6c4ca3e", "29178": "72be9ca10b5391fc036c4cd61830e168712b51ea", "29179": "b91f3c00ee113596acd3e508a593187258291f61", "29188": "33273e4ae770cac1ee0cb304ad5a0056bb59ad56", "29199": "bec2b07db5c999721d2d2c10334f3afe78aaadd9", "29208": "bb54de4905b2ff127fc8b907a5c284e0cf9f8d65", "29209": "2fc0786c175d9dba4526caa425224792d556d116", "29211": "38ca158ad2c8d07bec2d844686eb993e1ba03f38", "29212": "d3653bc6be7a655c2322b2d95f6209626e438171", "29214": "3f04a32ffab73d218ac48f061b7b0d3112b3451c", "29215": "e5875457faf3202c3530f33387341529a2715a7d", "29217": "04b58d3ffbd2c8d30c36ae6ed6366f1069136c43", "29221": "223ccea5ca2323ea011138a0aeecfe1bf2ce63b4", "29232": "bfc7e4347f9b999712768ef7ca8bb3cd0e17dc63", "29238": "e2f946aca446d3690e154e191fd22d7002341e57", "29239": "6a9db2e5941bd0b7552103409141d7b5ee9f0d58", "29240": "d9dee6a6b95c3fea8747e591ef1f44f36445f70c", "29241": "8e1ca2754ca5bb4fc9613b2c2f8b7ee1db0019e9", "29244": "c90cb814567b4f798e884b773fe96e42d8aa63de", "29250": "af51d6615c37f43b6d842b72a4b02dc14e024f3e", "29254": "11141c45c21c85eea0ff1bd4054e314163b448d6", "29256": "8ef114b9c98ca5a04b67fb072ff4a0f5a06de894", "29262": "6d47dd75103b1cf90403877c091c1b6b1800c3ff", "29271": "fd996225c5f712e7fc4e301c6e698a8a10854dd9", "29276": "11a8f8d7dba0eb7b0bc31f74bec659e2e497abfd", "29279": "2863c52c9d8e28cd33973e97be492e30c6e1e1eb", "29280": "872373b030eb6c181ab7f29c0928ccd8b0f74528", "29281": "7a4e602a1f9e39ec3662e21a12c35c6df0cf9295", "29284": "b74ee9ff8f0c3be41dfbd1bd5a10f54e67c40f39", "29285": "f42b5a01c8e82dee90d08fd470a16b2fe957fa14", "29287": "b969f8c9a2178bec235d6c47db3e7cd68c5d39c1", "29290": "9772bea95f3d079c2b59107ddd9731602b5edde0", "29291": "c922e983b4048a8710871c9394cc5ad6c4a8be2c", "29293": "5de64de6dbdf89b1bd8828c59393c4239364755a", "29296": "11c2c1e4fcd131154d7aaf8bf25bd779bf67ce35", "29304": "48808e1a6a775283b2d482d65f93390ddeb534af", "29306": "fb215c76967739268de71aa4bda55dd1b062bc2e", "29311": "4ed05c3143eacd88a88d73e8e31d64578b7a9bfd", "29312": "aca2d10c79c4d86d60eba1111272679471540f57", "29313": "de8bb00dbf007b65095e858ff2490b8df39b9047", "29318": "f55f5d45518c2f83271330041b982e55dcd6bbf9", "29320": "d5b6b41bcff0bd85e34f1f4afb6130fdec72ec7b", "29328": "f103c9e9d5f4af6b7ed5ee93dfe76bcfc36da0d8", "29329": "2d6c55528956e2f9233364657bc865eb57603514", "29330": "ada2724f71a1ed479fa080f51623f2cc6ba07a46", "29341": "ed222954f9595510257e207e6d289f15f100ace0", "29342": "c03d892ece761aa17f7452d78a21c76afd5c6c8a", "29343": "ac7676930a8ea25502c2856fa364c0cef0913ae3", "29350": "5cf29978851d7ca7f81fc5d8f5b5089d22b535c5", "29355": "fd07632dda668ffcc38985576a6595d33edbf03a", "29356": "b4491833d636344ef295f1609bcf4742c1d94d10", "29359": "80ffa42124541d5a82f5af67375f14efcf548110", "29361": "78cf92c19a7cfe9a07b970a2156d177a9ba627b0", "29366": "6c141d0663e2d0da30cf601c5726cbc44830d15f", "29367": "3efd3af3305698e8e0b0efed2ad653eaf1c35b4e", "29369": "fa2b3b83c106d28ef280f271086d47482f21315d", "29371": "9f12028b9453c17b72b26355fd503e512af96a5d", "29378": "d3763198673ffc1092539041b8bd23134ae22bee", "29392": "0a1bd4ead41b1fdfb53142097b5e08555f280545", "29396": "2f466b31820b6af40c3bc1ca3957682b6f20365a", "29398": "2b7be2005f3d74141f9f8e83be603be0ddbe7046", "29409": "6373ded2ed1403cc3ec40dc5d919b316a1b58e44", "29417": "43598128a0f452f2d016bcdb9f52d2ca8b148b0c", "29419": "61723384df3678b12a19439d1218f50554e1498d", "29423": "32b564ade7ef22439b5f2b9c11aa4c63f0ecd6fd", "29424": "cba30dbc4012f0968e25d4da3b48f3d9d745aa00", "29427": "40dec6d12d70de265e605046675f2e62f6676344", "29431": "b666225ca3e7a7e2d0121554424b0b39d9412c4f", "29433": "8742209a1fbe9f35cdeead79f12e0029d3776992", "29435": "3e2406a51845dbefd696d596fd2e0961b92ed09a", "29461": "d7aa4085623b222058edb0ff38392c38c5e00c54", "29471": "95d73525a7e0a42c49cb2bb46e6b701168948e29", "29472": "ce78e8c55b7729e79f87e4e67b85e9d6f03f001a", "29473": "abe26c2e3e3bce8227af75fbaf7ab7e36a9cd1cb", "29474": "8eff1f6a2fed8d9df52750271f4e07dc4ea5e1bf", "29475": "d7d9d7ba33d6486dff1a8cc1c55ed542e0bfb47e", "29478": "7b085eac10d08c49453541a896297f42f09ddfe7", "29488": "5c15cc3d76d171f07f9809a14a0dffd5ab37e599", "29490": "2bdecde364f133ce94b7f9271a6d34a8fb5cae86", "29492": "3f3e6045d594e28cd1953de9353b9f7cc103386f", "29493": "3823775ca779f5470b46c24d141fd483fee931d5", "29495": "f6a71feac4ac1623c8cd69dea5a560fe1e9af00d", "29500": "0316d19de1f5ba05e8409fda83ffeddf59ffc76d", "29501": "1900913b4c226e4cb49ab466671ed56bccb3f700", "29502": "00f6ddb9881a9587c915b3db00fa6e99bd025bf3", "29506": "7b0653cdd0d0a5ddcda061ee2eaf247f6303bc1e", "29507": "26e0003573463d0c5ca6c07289cd5151b4dba3b2", "29508": "6d8956e46026b68a4c2a50f1aab0c4f36a46053d", "29514": "871009f6415a2f588230e2e36bc9dbe751698ee1", "29517": "01c9bfe4f48d23ec2d2db50ffc58d6e5e42cbe93", "29518": "5ca0ef6272ef3eabe2feb4049b7cb05a52516495", "29524": "fc2fe480f42e78c23a1cb1c8088bc1148784e16c", "29525": "e1ec9e868bf03ec4284b9a5fb291418983b3a4fb", "29527": "a5dc2b5b917fc50575e10bbe139a0c78e43a1c1c", "29528": "7dcd29aaafe1ab8be4be04d3c793e5bcaf17459f", "29529": "7a18e4ac4f0b9f0933a190ac25cd75729bcdd146", "29551": "17e3ef963a039b8312af119e300a9e68a37e568c", "29552": "67ddfd05d65cb1f106504bb92978cc94bcec8612", "29553": "ba4eab8681a12863269e5159910cbaeb06517ef9", "29556": "9fd5ca55cc8c76759927831f44a98e2c65ea73d1", "29557": "46e984e9f93774570b9d15288f3c24f5e0cae63e", "29562": "002611249a38b45e691219567f7ecee4d1250b4b", "29564": "e9070852051515395e0ae9bbe66f929111d59c41", "29571": "06b995cae91b98778b78e5249129912b5372a959", "29572": "6f65e1fc25f265ff36bdbfb3aa482f65fd84a684", "29576": "dc35f0155a80e8ae1e3f146da9a717888a55f1c0", "29578": "0eb9f54e5e466c8d7a76ae116712b368d045c7e0", "29585": "740a8cf8c103e4e329021802af007295261b0da2", "29587": "02d6e9a4b4bae1eca7896fdba043575ef3aaf038", "29588": "572d5a1dadb398d0b7d27468230f186f72987b3b", "29596": "b126821abbf14c88f85646b3fa074d3466bf2dbf", "29598": "60d46ea7bb53da9792ee03dc32341d51e4638960", "29614": "a8f38c5f49f92be3897888d2b02cb734a2f32187", "29615": "30678f57d5f4c68e4a0590fda104b32895a216b8", "29616": "68e4d56eb9b539cccd582de7e7fb09c373d37609", "29618": "6562324781f287cf07a4dc694fddb297e32d7ca8", "29620": "d23d968fef1464407bcb1b28147dcfff133bced4", "29622": "02d508c90a214e0aeaf78b4ad41a578e267dce12", "29626": "eb4317d0a4c94b3f1454dca58c76caed8bbdc7e6", "29629": "10e43ca5882a22de3ef9082ffce82c65c3261b8f", "29641": "028bdf88e6c71a705d0c6bfd55d1117c7f44f6aa", "29642": "9437402f1d60778cd723e6119044ef0510ef17c0", "29660": "579ee2a137b5b4f8dcf70a7a548d6c4194e31257", "29662": "b51b540285d4cf2af69976c1e3b285f7c21b46f7", "29663": "98cb6bc8522b89ef308da40a26fa910fd1a17097", "29664": "2eb2e93ef43618f01258c43f4e7024cb5e3fc173", "29677": "a3881774f72499728ef05d2234ef62cfa3774076", "29684": "c5f7feea27931f62ef31b071e7e10ce28d7baa16", "29686": "a14c41264855e44ebd6187d7541b5b8d59bb32cb", "29693": "d2b969d57ba162f0d19660e895ce94bc59638b72", "29694": "7d3b555ca383a20dcf4618ce3e3d0392ad556b04", "29706": "9a2a786ea3606d06e2372f88badc5802fd7e95b4", "29711": "f9dd21e64584f6e821805daa450b8bc9f8ef3526", "29714": "cefab37bfba72ae062a58be3c7bdbd59c2c4d309", "29715": "1932e4bdc460975d8b35ae8351e037d26e5ee6f8", "29716": "592b71c8cd10ef3cf9bccebb6c3ed0198f105484", "29719": "e5f6012b9d59848d1b76e1b09982cbc67989572b", "29721": "6c79e97d7bac51adb292ce6f7d4d77376f818d52", "29724": "8c671cb7a2e99dbd4146a77c0e88f4d24efc911f", "29725": "0721406ede8b983b8689d8b70556499fc2aea28a", "29730": "6e2e9e678a44650d45f036d4a6c72609a3b8ab20", "29731": "168978df69efecb07943fd8ce3a7c95aab7122cb", "29744": "cb557b79fa0ce467c881830f8e8e042c484ccfaa", "29981": "badbf70324274bdb4299d8c64d3d83a26be2d4c0", "29992": "b19ad5bfa396a4600a52a598a30a65d4e993f831", "30114": "4c780c2d4b35a54cf45ca7d931efcaca73d0bf24", "30318": "3c91a3e1704c8aa7f1258aa30892040df9d952f4", "30440": "27b98cbe0dd9d2969e9c227e7a2070aa56f41d6d", "30634": "7aeb763c0cb7b2ada635e9e97b7b3b416f994a8c", "30656": "5cbc5802f9835dd073d8a3a1d4fd34ddfb6b73e8", "30659": "fe3d717080e812383900507168a6bd7093c4e434", "30840": "e40a0b2f152eb98f9ee75f7091f64e3998349492", "30913": "0cb9f7f7aa8f4255fafb5431dcc595ce183bc376", "30944": "75f852edf94a7293e7982ad516bee314d7187c2d", "30961": "5265343e268264101ec317594b1b97814d8d5875", "30962": "542e35e121988a9a942435da91d407d11a6ff96b", "30963": "8bcfd67720dadab6cc8562183b3d5b3458a8a91b", "30968": "a914cb7cf691a1e676b55459aed58f793883a1a7", "30969": "e0ceabc087303ce18d38183de9058df23f63df6e", "30970": "1e2aa70c87031d2b4e0a53c0a2153ac4a89d8fe9", "30971": "0fe94ce8a6c4fbe94305e4a4be45fe06e774be29", "30972": "7fe64b4a15daa340ed086b6bab85c1a274e5ea6f", "30973": "53d74a1fc054a5f997007fd851476776599cb6f6", "30974": "4d820990180a54ca7ce22ba698646deee17292f8", "30976": "f079a56b18714bd622f7ca457d14ebe873b67c55", "30987": "7d8fadac32f102f25642b47e82437f4243ca2658", "31011": "b235f9e701e14ed6f6f6dcba885f7986a833743f", "31026": "80b387c66e4f10faafdb1a21c011c173f77b0942", "31048": "4647bfbb57768efda59160c3beb98cf02badd6c5", "31068": "764662504a233ce218543aae3257dafdaa39e4f0", "31085": "31e153c4b80b03d0ef0670bd9aa9e52745c7e3fc", "31126": "f8a30474faaa135ea1b23ad0184f74a19d8b480e", "31140": "164682330d70ffe84e706a67955435b76e1cf19d", "31143": "07685e4386b4dbfbe52a1ecd95bc7fcc397b2411", "31144": "07272c441ee1a12e260a55b252835ff1e1ca0c50", "31145": "2f0ed6acea1308c89e6c814b1317d96362370703", "31147": "6ff787b93d46cca6d31c370cfd9543ed573a98fc", "31148": "35a793c31faa1d7aeb1fd44cf79407132efcab08", "31152": "755d7c3ec0371c25ff25c3142034f3555ab4fd27", "31153": "45c57078fd599194b49148fb66808f03490ee423", "31155": "6d9e294c47e790067e0b5724afecb4e38a542bd0", "31172": "e69faef03428b82f5651a5fb521610ddea2bd22a", "31175": "4fcea6deac29276605e58b0a011f7ef6d089f66b", "31181": "d5da698181fe6e920b03cef8a6a20e39c7d40cdf", "31182": "3300c03992d963f9c571975c17ed93f17b090672", "31186": "bdb5cc7b54d19f1f79eba1680a59f6852c6e3614", "31188": "b63e25648f2d7d0c2d56851352740620848da3ae", "31189": "3d83143c2c2f877ee921c4c7c6746d836c459839", "31192": "d785aa39f99720950cd7f9acfe1133494cb5ff58", "31193": "6568c6b022e12ab6d71e7548314009ced6ccabe9", "31194": "068074f4acab87b0fabf194517b7dfb0f038af5a", "31204": "d78893c1116b3ada9eb1ebbddc17aee69693eb5c", "31205": "f128be6c671d320c84771e923ddaf6467645216f", "31212": "edb880dd9b3c7241b96ccef34c43bd9f90e4a6e4", "31216": "882f00bd47ceacbbcf34cad5d491be43fee0c99e", "31222": "1d7939e1d26adbedaeec98c8153ea2e37297f520", "31223": "1f95d7914ff23ffeb95767de79c55b4f702e6f2f", "31224": "8dde6f8f4a6180e5a26332733367e3fcdc5aac66", "31225": "b32b72e3d98d784b98d9c38d4f9905574a60707d", "31242": "df9c973f28fb9c0e713db29285b07b57c622652a", "31265": "8eaceff8aa2ed313d78b4f84e35b90a24505662d", "31270": "c750d24ef3a9a897fb19d3f0b4910f07f078e302", "31274": "bb71b5fb7b65b662c1fffa3f8120cbfd02e2c164", "31277": "89babbd98fc75399709543f55013ff856280c668", "31282": "202467c653efa89e94cc20feea0ea277cd0a8458", "31286": "b47c3c1c70644c84dac18de878cd53d1b103595a", "31293": "e14d47ce9fe29884a524322b295b723cf8ee1e08", "31298": "89c80ba606f4346f8df2a31cfcc0e967045a68ed", "31308": "64e62ef69babccb36cb2ee014225c6845b163c0e", "31309": "e02af0b2991171c39bb3013fa83bdbe727cd3cda", "31310": "f3533711c854d05e2d767e3e8373c882d4d9f3ae", "31311": "a4e931f15e87cada0b9bb9ad80378115e72ba7ba", "31327": "93a9ed22b6fb6ecd6c4a10382306b1e5c6d06abc", "31330": "3fc4b7178d6edfb01dfddad57344330fd930440d", "31331": "785d1eb24ae8690b6b7389f6badbc91f949552a4", "31333": "676a619f2ede19db5f8c8d42f7221a6b10362015", "31334": "f726490c4c83e48fe05e0a80073e9716800a508a", "31347": "e9fb9335399580aaef1e5fa01e6f7afc79b82792", "31363": "94de9f7007b9264328dfa16dcf60a8c34a2c8ec0", "31370": "8eed39d6562045c650f4c8aeec5319f4bf34402b", "31371": "131b6bf29e20e801368907f71e5d8594a484f742", "31373": "63884710e540d1218ed3713b8998d515abd3c71e", "31374": "df6d2600c51502e1877aac563658d0616a75c5e5", "31383": "d3382a5e7e3c45a2fc9840509de0c8eadc25fa07", "31385": "639f94d164407a311295fa67d3a5363cb718f965", "31386": "b575bd6928402e9738f439610ec13058f3402f3a", "31388": "4c37b8df70952d9192c528f1988e7285b44fd7ae", "31390": "4bd449439ccce1be0bc43abed15423b46dbdcacb", "31394": "3cec3ae80e626952a6b61a72516713217d99fefe", "31396": "f4353323d0be0c3b3c7d0c752d6c135bc6d36465", "31398": "2a6a8f5a03ca78392aabc9a2d938760285fcee30", "31399": "b797a0cb97a8a9e7e36962dc8c37c075967aa88b", "31405": "f69c2fae9cc592fe42355b1533bd1a7e32216ace", "31409": "2e5e6f6949af92b3f7abd99e558f1f6ae5be2185", "31414": "28a05b3a60014f755d72eb86e8a352f6d4476d07", "31415": "8365e3ac35fe9c0b4cba8bc707dc1910e0c1f387", "31420": "86bae1ae269969a48759257900320c0f0664d37d", "31422": "d61fdc7d4c33d7f2104afde7e32d56af59f9d4f9", "31444": "1078723d2741d3379b65a70ee7aa23d9e7f08457", "31445": "3409bd3f38adc03cdf0096c53e897818517bc286", "31447": "c3d1107b8931313c85947439c406dab98ebfc8ea", "31457": "092905febd53742d2a700322f88b652d6a5fd4fb", "31463": "e58c1a7f0decf7e43afbdeaa755492e665dd5533", "31464": "978bbe7fdb519edf1f28df4982ce13523ef59a4d", "31466": "6e5cdc9d0923558dc66ad878f2e5392d29185754", "31473": "83377c70a3dc49a7f3200c85d9736b346c42760f", "31476": "b908da64dd4fa8dc70932f51202f9701db4cc868", "31477": "2f782a2f1afa1b25ffacb3ca1ffdbbab0abc1504", "31482": "6df71138184f26cd87bb086acb1e6b3dc1be4bbf", "31483": "2a862700bd376800ff4495e572ca4c85c919a218", "31484": "77bc3225e6f4badf83190ec300a0e10e56949644", "31488": "402802d8a16da735017bbefa8621a91f5707beba", "31492": "e12112e7caf72f93e07128f6e7a8a3399f1c6bc9", "31493": "2c1a34daa024398cdf9c6e1fbeff52b4eb280551", "31505": "4516ee94feef318c72bdd96282d0cac98a10e433", "31506": "6822c098a73f168dfe4400867b0d82f29a7f5e89", "31507": "f25905b5d25a2fca1e23adad11d4597a1e658276", "31513": "41977b24ae011a51f64faa75cb524c7350fdedd9", "31517": "a1ee7968df16a4f57c8e22164d19aa2d14a6cdad", "31519": "2a9a95d250c91f842b9fdc32cbeaeaced8b5896b", "31521": "b5cdbf0434019e802b5e1a44bee06e67e0beef75", "31525": "672a2ec822bb2d3619096a66b76afc79eea118e6", "31527": "c136cb7f2982554a9ae305aafd81b9f68ac03ec5", "31528": "481e731368dd47705248b1832ebd70913e99772e", "31530": "f9408ee13adbe81c7740daa03a52fc73d71e71ba", "31533": "07cbfffec5156f8491c885d4e893fb7b920428b2", "31534": "b3e3567544dc2b41e1bcc89157b977cf12ef2efb", "31544": "d97e31e891e868457d710d53b8ddadb0d473ec8a", "31549": "cc7f1504aaf7b02de09ba87ee91dfe4446d90031", "31558": "de4a75535fa48ab93ae226c70182e411b27daade", "31559": "3aad1490f24f4d39980a72bea0617083aaf508ea", "31560": "99eac42354f9c900bf8897abec6e7c1bd6c9ff6c", "31565": "969ada67c1b9b32b863a9ce77f56689ca7ba3b43", "31566": "2f52098908b00397e425904b89ac89d84e344627", "31567": "261a769dd135c1e4007a6d0bdbed68a8c929497a", "31586": "455f1f3168ab0105d05add646ff63a17b80fdcdc", "31590": "c4e20ec45f0aef437df9bbdc18849d15e9d7e850", "31593": "eeef9d4646103c3b1afd3085f1393f2b3f9575b2", "31595": "38d843e6b526fc5e8a936b77dc8d33750f5735d8", "31596": "f2912a114cc89539818469935610ed00746a1eba", "31598": "1b34367c162122a276c104b080ff1919412b33a3", "31599": "cbe8b45fd84e79872c8a36772bbb096769e429a7", "31604": "334428c4d10b778fd74fc3919f3dc9a3b1959875", "31655": "6cd4b015dfd512fb4bc9d2e06a0f0cef4503582b", "31660": "2fe48d2d98a85c8ea3f3d5caffd952ea69e99335", "31839": "3544fae2859d8ecac378b9ddc8f909c69455a831", "32017": "05fcb6544f72ea173011a77cee14d72979ffe293", "32283": "f4ef0fd5d97afc7788c46eb51889e90623f5577e", "32300": "d4d0584ccb508cad69288b504e6c8b04aa0d5caf", "32548": "c0b003e9c787ccab27f6fe57c154d7b881da5795", "32571": "5cc7ef066fca7a821a2160b095578384c301ae3c", "32693": "640fff6b33eb092319160b300b80bbbe3669cd35", "32777": "150c1233a717240998567d1cc58911701224ceb6", "32822": "c6d2aae8a92371bc9f7ddda990176fb014adb0d7", "32958": "0bbe78772c50db4fe3d1c5b8dbec439dc45c00ba", "33079": "950f507d4c981a6a3292029936ac0277ab05840f", "33083": "e3b831cd85e2f4d73b0db8e8d501828b50a96c64", "33086": "c3d0a09342c08c466984654bc4738af595fba896", "33169": "4adc87dff15a247e417d50f10cc4def8e1c17a03", "33266": "b3a7a69a198a8385735584b88408c91a1eef5a4b", "33324": "7ce4118531b585b5d8f0380c6b896ae22d93bd96", "33491": "bc6a6084f6e49bd78c12508131395304a63cc6ca", "33492": "aa358cc4c7f847d4420d27eac864e86c46a622bc", "33498": "c0d36c88b8b525f5869eefd893d1d77ffe41903e", "33503": "bcdfd208a9b99036cc6e379180c3242b08dedc47", "33507": "49c560c22f137907ea6a240591e49b004f28444b", "33514": "45fb3a28100d509b695f432cf100f36f0e4c2f9f", "33517": "273b7fe0a94ae3a8ac96f4b34a396a8d3584c210", "33520": "8840d950e0eedf2eadb96d9867d8f8341e51aaac", "33532": "9d9cc5ca473d52eeda693a254fc0a1cbd4f4f1c4"}, "revision_to_date": {"42": 1010250430000, "740": 1080942012000, "760": 1081968728000, "871": 1097349846000, "1215": 1129103142000, "1435": 1131769706000, "1441": 1131851529000, "1591": 1134458827000, "1767": 1136491532000, "1916": 1137917799000, "2054": 1140130368000, "2167": 1142327266000, "2472": 1148854131000, "2788": 1153471716000, "2916": 1155540872000, "2949": 1156194384000, "2986": 1156794775000, "3015": 1157428144000, "3096": 1158779673000, "3192": 1160425354000, "3259": 1161233179000, "3290": 1161767157000, "3366": 1165042730000, "3543": 1175637762000, "3724": 1180631535000, "3846": 1187462962000, "3983": 1194559578000, "4589": 1211082979000, "4635": 1211787689000, "4881": 1216657071000, "4904": 1216831681000, "4948": 1217537675000, "4998": 1218608267000, "5005": 1218666290000, "5090": 1220400184000, "5144": 1221033369000, "5203": 1222317976000, "5277": 1225192990000, "5964": 1237357434000, "6082": 1238247937000, "6105": 1238767315000, "6111": 1238907901000, "7077": 1259629925000, "7287": 1261409435000, "7290": 1261963508000, "7596": 1271580439000, "7601": 1271583582000, "7605": 1271594530000, "7607": 1271932516000, "7838": 1280662582000, "7900": 1282045592000, "7919": 1282740471000, "7924": 1283257801000, "8049": 1287297181000, "8077": 1289224772000, "8094": 1290078864000, "8515": 1300868697000, "8649": 1301858926000, "8733": 1303929670000, "8748": 1304439777000, "8759": 1304793730000, "8765": 1305358911000, "8847": 1307957944000, "8956": 1309549599000, "9026": 1310325134000, "9071": 1311186558000, "9830": 1336165331000, "9876": 1337434901000, "9952": 1340207109000, "10100": 1345509889000, "10201": 1348118703000, "10586": 1356729952000, "10683": 1358806942000, "10713": 1360182042000, "10714": 1360443096000, "10894": 1364150879000, "10952": 1365311159000, "11907": 1378050610000, "11963": 1378665363000, "12166": 1380482446000, "12280": 1381686735000, "12411": 1383002462000, "12438": 1383485948000, "12590": 1388487707000, "13048": 1393769459000, "13148": 1394750047000, "13266": 1395783838000, "13574": 1402237862000, "13746": 1406747979000, "13794": 1407263229000, "13799": 1407580724000, "13857": 1409154091000, "13918": 1410080234000, "14134": 1414340499000, "14153": 1414930922000, "14443": 1422808828000, "14555": 1425216987000, "15095": 1438571554000, "15167": 1439313035000, "15218": 1440437938000, "15290": 1442167168000, "15308": 1442856145000, "15380": 1443496521000, "15403": 1443965287000, "15429": 1444097817000, "15442": 1444246477000, "15495": 1444660531000, "15606": 1445719784000, "15747": 1447359318000, "15750": 1447523025000, "15826": 1449252277000, "15860": 1449535709000, "15898": 1450120843000, "15967": 1451156228000, "16072": 1452119720000, "16076": 1452133260000, "16140": 1452890281000, "16292": 1453770183000, "16308": 1454010965000, "16373": 1454696242000, "16415": 1455061855000, "16528": 1456185152000, "16552": 1456430799000, "16636": 1458159437000, "16649": 1458424675000, "16687": 1459109632000, "16723": 1459899883000, "16761": 1461635775000, "16826": 1463421856000, "16881": 1464312772000, "16905": 1465241258000, "16985": 1466868751000, "16988": 1467212908000, "17030": 1468957977000, "17084": 1470957503000, "17156": 1472804424000, "17223": 1473642948000, "17241": 1474533068000, "17276": 1475538767000, "17296": 1476267905000, "17384": 1478052306000, "17442": 1479339043000, "17455": 1479839944000, "17528": 1481584212000, "17559": 1482099063000, "17583": 1482185626000, "17616": 1483298534000, "17621": 1483500506000, "17657": 1484509772000, "17729": 1485283774000, "17817": 1487089484000, "17962": 1488819480000, "17963": 1488844343000, "17999": 1489850965000, "18066": 1490549420000, "18178": 1492296725000, "18342": 1494027681000, "18416": 1494454540000, "18468": 1495130479000, "18492": 1495894847000, "18529": 1496849195000, "18549": 1497720358000, "18680": 1499381877000, "18687": 1499545390000, "18759": 1501345771000, "18857": 1503154856000, "18943": 1504902015000, "19123": 1506523104000, "19137": 1506634535000, "19142": 1506715810000, "19234": 1508364013000, "19348": 1510116698000, "19486": 1511848316000, "19604": 1513126148000, "19627": 1513610313000, "19766": 1515268836000, "19777": 1515484999000, "19891": 1517271421000, "20034": 1519028223000, "20042": 1519161772000, "20123": 1520804989000, "20126": 1520870266000, "20224": 1522598890000, "20361": 1524328425000, "20435": 1524857809000, "20480": 1526071745000, "20657": 1527886211000, "20710": 1528296187000, "20777": 1528825313000, "20876": 1529537186000, "20890": 1529677916000, "21025": 1531154140000, "21033": 1531541491000, "21087": 1532350593000, "21173": 1533347857000, "21301": 1534866571000, "21323": 1535204483000, "21448": 1536932764000, "21555": 1537663658000, "21564": 1537712698000, "21651": 1538672188000, "21852": 1540157357000, "21877": 1540490671000, "21951": 1541288187000, "22033": 1542238907000, "22135": 1544026839000, "22287": 1545254129000, "22301": 1545759610000, "22366": 1546640909000, "22436": 1547420295000, "22447": 1547487819000, "22608": 1548968040000, "22621": 1549224135000, "22685": 1551036477000, "22727": 1551199362000, "22864": 1552764536000, "22956": 1554498202000, "23110": 1555880064000, "23140": 1556233740000, "23318": 1557978374000, "23538": 1558987643000, "23612": 1559763700000, "23727": 1561494061000, "23799": 1561921238000, "23987": 1563234580000, "23989": 1563257813000, "24160": 1564157414000, "24257": 1565015251000, "24433": 1566664735000, "24443": 1566767519000, "24465": 1566940237000, "24549": 1567805205000, "24666": 1568519870000, "24835": 1570297098000, "24911": 1571167831000, "25018": 1572074676000, "25109": 1573423148000, "25130": 1573837559000, "25289": 1575582767000, "25290": 1575588273000, "25381": 1576983312000, "25418": 1577373829000, "25425": 1577645001000, "25436": 1577847206000, "25522": 1578332821000, "25616": 1579110486000, "25650": 1579561134000, "25681": 1579750139000, "25742": 1579900612000, "25786": 1580240386000, "25848": 1580629016000, "25862": 1580859687000, "25886": 1581001029000, "25889": 1581066015000, "25890": 1581067313000, "25891": 1581092965000, "25893": 1581113535000, "25895": 1581194848000, "25903": 1581560419000, "25905": 1581571304000, "25907": 1581578632000, "25908": 1581584293000, "25909": 1581631643000, "25910": 1581639435000, "25917": 1581801724000, "25918": 1581807838000, "25919": 1581865113000, "25920": 1581865174000, "25924": 1581947377000, "25925": 1581952670000, "25927": 1581959210000, "25931": 1582092952000, "25932": 1582094956000, "25933": 1582099319000, "25937": 1582104566000, "25938": 1582167568000, "25939": 1582221034000, "25941": 1582268595000, "25946": 1582444348000, "25948": 1582466556000, "25949": 1582466609000, "25954": 1582481276000, "25956": 1582484619000, "25957": 1582552569000, "25959": 1582669352000, "25960": 1582669521000, "25961": 1582753192000, "25962": 1582754561000, "25968": 1582887617000, "25969": 1582887920000, "25972": 1582897487000, "25973": 1582898405000, "25975": 1582912514000, "25977": 1583046109000, "25980": 1583091440000, "25993": 1583121616000, "26000": 1583157954000, "26001": 1583174052000, "26006": 1583220994000, "26007": 1583243059000, "26010": 1583314496000, "26012": 1583340995000, "26013": 1583342876000, "26014": 1583343379000, "26016": 1583389354000, "26017": 1583409534000, "26018": 1583421879000, "26019": 1583447023000, "26021": 1583481176000, "26026": 1583498298000, "26027": 1583508463000, "26028": 1583615726000, "26033": 1583641698000, "26034": 1583713311000, "26036": 1583718878000, "26042": 1583796049000, "26045": 1583805203000, "26046": 1583865384000, "26047": 1583881185000, "26048": 1583881428000, "26050": 1583940055000, "26051": 1583949207000, "26052": 1583954774000, "26054": 1584001566000, "26055": 1584007305000, "26056": 1584031935000, "26057": 1584036322000, "26059": 1584122716000, "26062": 1584286187000, "26066": 1584295219000, "26067": 1584296074000, "26071": 1584367433000, "26072": 1584396126000, "26078": 1584471457000, "26082": 1584492157000, "26084": 1584530131000, "26086": 1584550014000, "26088": 1584560937000, "26089": 1584562319000, "26090": 1584568389000, "26102": 1584607710000, "26103": 1584853187000, "26109": 1584901685000, "26114": 1584919441000, "26115": 1584960084000, "26116": 1584975311000, "26117": 1584976327000, "26119": 1584983168000, "26125": 1585061034000, "26128": 1585086760000, "26129": 1585088665000, "26130": 1585090050000, "26131": 1585091646000, "26132": 1585112367000, "26133": 1585151551000, "26135": 1585223866000, "26137": 1585244669000, "26138": 1585245020000, "26139": 1585245242000, "26142": 1585315084000, "26144": 1585334027000, "26145": 1585351402000, "26147": 1585422485000, "26148": 1585431557000, "26150": 1585564386000, "26151": 1585564487000, "26156": 1585669089000, "26161": 1585686121000, "26162": 1585686186000, "26163": 1585689125000, "26164": 1585689347000, "26169": 1585696148000, "26170": 1585716348000, "26171": 1585716491000, "26174": 1585732985000, "26177": 1585851934000, "26178": 1585870189000, "26183": 1585904809000, "26184": 1585905152000, "26185": 1585925887000, "26186": 1585931169000, "26187": 1585932588000, "26190": 1586026918000, "26192": 1586051875000, "26193": 1586085712000, "26201": 1586288611000, "26210": 1586326085000, "26213": 1586351231000, "26214": 1586358502000, "26215": 1586542776000, "26216": 1586542977000, "26217": 1586546647000, "26218": 1586547373000, "26219": 1586628977000, "26220": 1586631822000, "26224": 1586636584000, "26229": 1586648759000, "26232": 1586792719000, "26235": 1586854482000, "26242": 1586968605000, "26243": 1586969730000, "26244": 1586992818000, "26247": 1587063334000, "26248": 1587066217000, "26249": 1587075317000, "26251": 1587095149000, "26253": 1587137365000, "26255": 1587155167000, "26256": 1587261080000, "26261": 1587316043000, "26264": 1587372145000, "26266": 1587391972000, "26267": 1587415290000, "26269": 1587488821000, "26272": 1587517562000, "26273": 1587526289000, "26275": 1587540511000, "26277": 1587548030000, "26278": 1587548790000, "26279": 1587550957000, "26281": 1587576119000, "26282": 1587599121000, "26283": 1587618849000, "26284": 1587668370000, "26288": 1587718217000, "26292": 1587828828000, "26293": 1587829206000, "26294": 1587839038000, "26301": 1587848676000, "26302": 1587849277000, "26303": 1587849778000, "26306": 1587908044000, "26308": 1587921671000, "26312": 1587982574000, "26316": 1587995663000, "26319": 1588007206000, "26321": 1588012075000, "26323": 1588014696000, "26324": 1588016627000, "26334": 1588064304000, "26340": 1588108088000, "26342": 1588175624000, "26344": 1588192757000, "26345": 1588193213000, "26346": 1588194507000, "26347": 1588197136000, "26350": 1588244623000, "26354": 1588334505000, "26355": 1588354882000, "26356": 1588355182000, "26363": 1588459281000, "26366": 1588463410000, "26369": 1588483057000, "26370": 1588500530000, "26373": 1588551652000, "26374": 1588551679000, "26377": 1588560795000, "26379": 1588599349000, "26381": 1588606167000, "26383": 1588626229000, "26385": 1588641350000, "26389": 1588702831000, "26393": 1588729206000, "26394": 1588744825000, "26395": 1588745449000, "26405": 1588792163000, "26407": 1588808277000, "26409": 1588839727000, "26412": 1588852154000, "26413": 1588856783000, "26415": 1588876189000, "26417": 1588894814000, "26422": 1589003218000, "26430": 1589209994000, "26431": 1589216982000, "26432": 1589217517000, "26434": 1589233207000, "26444": 1589242620000, "26446": 1589251866000, "26450": 1589295892000, "26453": 1589303247000, "26454": 1589304718000, "26456": 1589311959000, "26457": 1589313519000, "26458": 1589313675000, "26469": 1589349273000, "26473": 1589373453000, "26474": 1589376761000, "26476": 1589386915000, "26480": 1589403733000, "26483": 1589420230000, "26485": 1589493444000, "26486": 1589497515000, "26488": 1589525949000, "26489": 1589549641000, "26491": 1589641190000, "26492": 1589648081000, "26496": 1589670652000, "26497": 1589695815000, "26499": 1589708157000, "26503": 1589730909000, "26504": 1589735317000, "26509": 1589753604000, "26513": 1589807456000, "26514": 1589808311000, "26517": 1589811515000, "26518": 1589818949000, "26519": 1589819516000, "26530": 1589836719000, "26538": 1589846044000, "26540": 1589872005000, "26541": 1589872128000, "26545": 1589894334000, "26548": 1589895577000, "26552": 1589928063000, "26553": 1589931613000, "26554": 1589970040000, "26558": 1589983220000, "26562": 1589987648000, "26564": 1589987882000, "26569": 1590008953000, "26570": 1590009693000, "26572": 1590053507000, "26574": 1590092974000, "26588": 1590139400000, "26589": 1590143352000, "26595": 1590154924000, "26602": 1590164787000, "26607": 1590191607000, "26608": 1590193144000, "26610": 1590240957000, "26612": 1590241450000, "26617": 1590263882000, "26618": 1590264917000, "26621": 1590363770000, "26623": 1590415642000, "26626": 1590427282000, "26627": 1590427310000, "26628": 1590489885000, "26630": 1590509943000, "26636": 1590527886000, "26637": 1590528477000, "26641": 1590539692000, "26642": 1590560750000, "26643": 1590561513000, "26644": 1590581784000, "26652": 1590588478000, "26668": 1590613796000, "26669": 1590614345000, "26674": 1590646978000, "26675": 1590669328000, "26685": 1590735179000, "26689": 1590761802000, "26692": 1590764672000, "26696": 1590787857000, "26697": 1590790617000, "26709": 1590807669000, "26712": 1590846558000, "26714": 1590848267000, "26715": 1590850259000, "26716": 1590853438000, "26723": 1590927950000, "26725": 1590941255000, "26726": 1590941793000, "26729": 1590946520000, "26730": 1590949651000, "26732": 1590950540000, "26737": 1590962166000, "26739": 1590992277000, "26744": 1591019233000, "26745": 1591019265000, "26746": 1591022246000, "26750": 1591074121000, "26751": 1591102832000, "26756": 1591145547000, "26759": 1591248192000, "26760": 1591248538000, "26761": 1591248611000, "26762": 1591249110000, "26764": 1591297053000, "26765": 1591297423000, "26781": 1591445413000, "26782": 1591455734000, "26785": 1591473588000, "26787": 1591482945000, "26790": 1591554158000, "26796": 1591560560000, "26798": 1591563808000, "26802": 1591572525000, "26803": 1591579591000, "26812": 1591598396000, "26818": 1591623499000, "26819": 1591623594000, "26825": 1591651075000, "26826": 1591652406000, "26828": 1591673321000, "26830": 1591680336000, "26834": 1591716375000, "26846": 1591812472000, "26849": 1591821106000, "26851": 1591822054000, "26852": 1591822215000, "26853": 1591822243000, "26854": 1591824433000, "26859": 1591879292000, "26861": 1591896704000, "26862": 1591897052000, "26865": 1591904974000, "26866": 1591920033000, "26870": 1591947282000, "26871": 1591960733000, "26883": 1592076612000, "26885": 1592092058000, "26887": 1592169093000, "26892": 1592181334000, "26894": 1592189382000, "26898": 1592220074000, "26899": 1592228482000, "26901": 1592238382000, "26910": 1592295249000, "26911": 1592297309000, "26913": 1592318386000, "26919": 1592334531000, "26923": 1592343519000, "26930": 1592393975000, "26932": 1592418118000, "26933": 1592418926000, "26937": 1592472932000, "26943": 1592489163000, "26946": 1592506088000, "26947": 1592509843000, "26948": 1592510642000, "26949": 1592531421000, "26952": 1592574365000, "26954": 1592594061000, "26957": 1592616853000, "26959": 1592670261000, "26962": 1592673986000, "26965": 1592677046000, "26967": 1592682702000, "26983": 1592770222000, "27005": 1593035474000, "27014": 1593187020000, "27021": 1593265206000, "27026": 1593357925000, "27040": 1593536634000, "27049": 1593624511000, "27052": 1593720735000, "27054": 1593734949000, "27057": 1593771672000, "27058": 1593781564000, "27062": 1593883121000, "27065": 1593961042000, "27068": 1593975580000, "27069": 1593992525000, "27073": 1594038673000, "27074": 1594038719000, "27075": 1594038894000, "27080": 1594060199000, "27082": 1594065499000, "27086": 1594083847000, "27089": 1594132885000, "27090": 1594133082000, "27093": 1594135255000, "27095": 1594157848000, "27096": 1594168516000, "27111": 1594225363000, "27114": 1594234181000, "27115": 1594236859000, "27116": 1594241876000, "27117": 1594242543000, "27175": 1594271853000, "27177": 1594312330000, "27178": 1594319664000, "27179": 1594347498000, "27180": 1594378234000, "27182": 1594390805000, "27185": 1594414567000, "27186": 1594440821000, "27295": 1595103610000, "27317": 1595354235000, "27426": 1596978344000, "27436": 1597154431000, "27441": 1597163870000, "27449": 1597279283000, "27456": 1597325561000, "27472": 1597673130000, "27486": 1597833655000, "27532": 1597928155000, "27533": 1597930456000, "27534": 1597931660000, "27536": 1597939266000, "27542": 1598016072000, "27548": 1598122148000, "27560": 1598197399000, "27561": 1598197443000, "27570": 1598229785000, "27571": 1598230503000, "27572": 1598231538000, "27578": 1598268450000, "27579": 1598268699000, "27580": 1598269669000, "27584": 1598278462000, "27585": 1598278563000, "27587": 1598296102000, "27596": 1598454837000, "27601": 1598554748000, "27602": 1598555652000, "27603": 1598565149000, "27607": 1598637918000, "27608": 1598647494000, "27620": 1598737983000, "27621": 1598776589000, "27626": 1598810292000, "27637": 1598877811000, "27639": 1598887115000, "27642": 1598949515000, "27643": 1598953423000, "27644": 1598953474000, "27645": 1598960238000, "27649": 1598962236000, "27650": 1598967068000, "27669": 1599067952000, "27670": 1599068197000, "27671": 1599068570000, "27673": 1599068992000, "27678": 1599069695000, "27686": 1599110770000, "27697": 1599146692000, "27699": 1599148289000, "27702": 1599156584000, "27708": 1599169616000, "27715": 1599185387000, "27719": 1599199045000, "27721": 1599222487000, "27722": 1599223855000, "27746": 1599492267000, "27755": 1599495436000, "27757": 1599497500000, "27763": 1599511570000, "27768": 1599514190000, "27770": 1599518027000, "27771": 1599557419000, "27773": 1599575202000, "27778": 1599676736000, "27780": 1599680163000, "27786": 1599697005000, "27787": 1599729819000, "27793": 1599769801000, "27794": 1599770167000, "27802": 1599810227000, "27808": 1599841863000, "27815": 1599923830000, "27816": 1599923904000, "27819": 1599942969000, "27823": 1599960512000, "27825": 1599969603000, "27826": 1599970059000, "27841": 1600096121000, "27842": 1600098912000, "27844": 1600101833000, "27847": 1600118434000, "27850": 1600186230000, "27854": 1600202106000, "27865": 1600268759000, "27868": 1600289819000, "27869": 1600290225000, "27870": 1600304316000, "27872": 1600330001000, "27873": 1600338578000, "27875": 1600355803000, "27877": 1600370456000, "27882": 1600426282000, "27887": 1600450149000, "27892": 1600631126000, "27895": 1600694919000, "27896": 1600695597000, "27898": 1600715332000, "27902": 1600779258000, "27909": 1600806164000, "27913": 1600870902000, "27917": 1600939638000, "27919": 1600960246000, "27923": 1601036491000, "27924": 1601046641000, "27932": 1601196895000, "27934": 1601227025000, "27935": 1601229701000, "27937": 1601302373000, "27938": 1601302549000, "27940": 1601306900000, "27942": 1601314987000, "27944": 1601324103000, "27947": 1601346382000, "27948": 1601392339000, "27955": 1601410311000, "27959": 1601447813000, "27960": 1601462996000, "27961": 1601479499000, "27963": 1601489016000, "27969": 1601499624000, "27977": 1601539152000, "27979": 1601553317000, "27989": 1601557679000, "27992": 1601562347000, "27994": 1601569433000, "28002": 1601643929000, "28003": 1601644174000, "28005": 1601652007000, "28007": 1601673914000, "28010": 1601693170000, "28011": 1601703571000, "28013": 1601733617000, "28014": 1601733742000, "28018": 1601743486000, "28019": 1601747124000, "28020": 1601747207000, "28035": 1601821531000, "28039": 1601831643000, "28042": 1601835587000, "28043": 1601835711000, "28046": 1601854348000, "28051": 1601877838000, "28055": 1601906719000, "28058": 1601907449000, "28059": 1601918421000, "28061": 1601928253000, "28062": 1601928436000, "28064": 1601963772000, "28067": 1601978766000, "28074": 1602025686000, "28076": 1602031981000, "28077": 1602047309000, "28078": 1602048199000, "28084": 1602062429000, "28092": 1602081832000, "28094": 1602092074000, "28096": 1602096634000, "28106": 1602131944000, "28108": 1602133861000, "28116": 1602190862000, "28118": 1602197834000, "28123": 1602251632000, "28129": 1602270474000, "28135": 1602272147000, "28142": 1602281170000, "28146": 1602323240000, "28150": 1602327366000, "28159": 1602344925000, "28160": 1602345112000, "28161": 1602361129000, "28162": 1602361561000, "28163": 1602417644000, "28169": 1602515428000, "28170": 1602515855000, "28171": 1602515892000, "28172": 1602515980000, "28177": 1602601789000, "28178": 1602622072000, "28179": 1602632207000, "28180": 1602632613000, "28182": 1602669303000, "28186": 1602678141000, "28187": 1602678215000, "28189": 1602683622000, "28196": 1602743358000, "28199": 1602758229000, "28204": 1602854469000, "28205": 1602862993000, "28206": 1602863039000, "28207": 1602942597000, "28208": 1602943113000, "28222": 1603011810000, "28227": 1603089416000, "28231": 1603113235000, "28232": 1603118776000, "28233": 1603129910000, "28234": 1603143578000, "28240": 1603208390000, "28244": 1603287844000, "28245": 1603287962000, "28249": 1603304131000, "28250": 1603312697000, "28253": 1603345775000, "28254": 1603346034000, "28256": 1603355768000, "28258": 1603374795000, "28279": 1603434073000, "28295": 1603551109000, "28297": 1603561578000, "28298": 1603562351000, "28304": 1603604999000, "28305": 1603605525000, "28306": 1603605832000, "28308": 1603651061000, "28309": 1603651156000, "28311": 1603651635000, "28312": 1603651689000, "28313": 1603651771000, "28314": 1603658865000, "28319": 1603726044000, "28321": 1603727857000, "28322": 1603729420000, "28323": 1603731594000, "28334": 1603770855000, "28350": 1603822547000, "28358": 1603854616000, "28361": 1603882558000, "28362": 1603882649000, "28366": 1603920425000, "28377": 1603963809000, "28378": 1603964206000, "28379": 1603964330000, "28382": 1603977483000, "28384": 1603981829000, "28385": 1603995280000, "28398": 1604079888000, "28399": 1604182623000, "28400": 1604234501000, "28401": 1604235073000, "28402": 1604235318000, "28403": 1604236788000, "28404": 1604237996000, "28410": 1604329026000, "28414": 1604344320000, "28415": 1604345882000, "28416": 1604345913000, "28417": 1604350003000, "28426": 1604409862000, "28429": 1604415952000, "28430": 1604419597000, "28431": 1604420431000, "28432": 1604434053000, "28434": 1604464367000, "28435": 1604488419000, "28439": 1604558806000, "28442": 1604590747000, "28443": 1604595076000, "28444": 1604598533000, "28445": 1604599270000, "28448": 1604642424000, "28450": 1604678483000, "28468": 1604936460000, "28473": 1604956957000, "28477": 1605004996000, "28489": 1605092551000, "28501": 1605125170000, "28512": 1605203378000, "28515": 1605279577000, "28517": 1605355428000, "28518": 1605378411000, "28522": 1605392835000, "28523": 1605392898000, "28524": 1605393078000, "28526": 1605394482000, "28537": 1605449760000, "28538": 1605450224000, "28540": 1605545303000, "28555": 1605716954000, "28556": 1605726853000, "28559": 1605768976000, "28574": 1605904892000, "28580": 1605977108000, "28581": 1605977306000, "28582": 1605977978000, "28583": 1605978740000, "28586": 1606063351000, "28592": 1606099790000, "28598": 1606142853000, "28599": 1606143057000, "28602": 1606157100000, "28604": 1606158253000, "28605": 1606161719000, "28609": 1606235056000, "28615": 1606260636000, "28621": 1606283260000, "28625": 1606325005000, "28626": 1606325265000, "28627": 1606325487000, "28630": 1606334195000, "28635": 1606414775000, "28636": 1606423438000, "28637": 1606431178000, "28639": 1606488198000, "28640": 1606488936000, "28641": 1606492990000, "28642": 1606499915000, "28644": 1606568887000, "28645": 1606569734000, "28646": 1606584864000, "28651": 1606604888000, "28652": 1606605590000, "28654": 1606610028000, "28658": 1606658068000, "28659": 1606667121000, "28666": 1606700041000, "28673": 1606722268000, "28675": 1606744557000, "28677": 1606776688000, "28678": 1606776771000, "28686": 1606945300000, "28687": 1606945367000, "28688": 1606945732000, "28689": 1606955337000, "28696": 1606964302000, "28702": 1606979259000, "28703": 1606983720000, "28704": 1607000503000, "28709": 1607010228000, "28711": 1607013906000, "28715": 1607087143000, "28717": 1607103544000, "28719": 1607114500000, "28720": 1607114999000, "28739": 1607191254000, "28740": 1607192062000, "28742": 1607201289000, "28746": 1607238096000, "28751": 1607326807000, "28752": 1607326982000, "28758": 1607361317000, "28760": 1607368740000, "28765": 1607392081000, "28775": 1607465771000, "28783": 1607534975000, "28784": 1607535004000, "28786": 1607538696000, "28787": 1607540529000, "28789": 1607547281000, "28805": 1607668490000, "28813": 1607697640000, "28814": 1607699637000, "28818": 1607715289000, "28820": 1607722733000, "28824": 1607800894000, "28825": 1607801015000, "28826": 1607803898000, "28828": 1607888332000, "28829": 1607891941000, "28835": 1607918996000, "28847": 1607953593000, "28848": 1607953624000, "28849": 1607953787000, "28851": 1607959133000, "28853": 1607965002000, "28855": 1607973759000, "28858": 1608055784000, "28859": 1608057137000, "28861": 1608062293000, "28862": 1608064688000, "28866": 1608103765000, "28869": 1608107971000, "28870": 1608108008000, "28873": 1608122540000, "28876": 1608132540000, "28877": 1608148552000, "28884": 1608223118000, "28885": 1608228502000, "28900": 1608318565000, "28912": 1608373760000, "28913": 1608374181000, "28916": 1608393189000, "28919": 1608398305000, "28920": 1608399235000, "28926": 1608411517000, "28936": 1608551500000, "28937": 1608555095000, "28938": 1608555267000, "28945": 1608648384000, "28946": 1608650633000, "28961": 1608654715000, "28962": 1608662946000, "28965": 1608670777000, "28966": 1608673745000, "28973": 1608717858000, "28974": 1608718014000, "28975": 1608760921000, "28978": 1608764451000, "28983": 1608835233000, "28986": 1608857990000, "28989": 1608999880000, "28993": 1609005609000, "28996": 1609028667000, "28997": 1609029917000, "29003": 1609102497000, "29004": 1609102566000, "29008": 1609120597000, "29011": 1609143720000, "29013": 1609146026000, "29014": 1609149786000, "29015": 1609175778000, "29017": 1609183089000, "29021": 1609224080000, "29022": 1609232414000, "29024": 1609265663000, "29028": 1609276514000, "29032": 1609374920000, "29035": 1609546602000, "29040": 1609658538000, "29041": 1609677936000, "29048": 1609781731000, "29051": 1609818082000, "29055": 1609845066000, "29060": 1609873283000, "29062": 1609874410000, "29064": 1609937806000, "29066": 1609954385000, "29068": 1610011362000, "29071": 1610121080000, "29074": 1610217940000, "29075": 1610218639000, "29079": 1610317244000, "29082": 1610353363000, "29083": 1610353416000, "29086": 1610361338000, "29090": 1610401143000, "29091": 1610403316000, "29112": 1610573600000, "29115": 1610636815000, "29116": 1610652012000, "29128": 1610760260000, "29131": 1610956367000, "29133": 1610958498000, "29146": 1611031408000, "29154": 1611071630000, "29155": 1611072024000, "29164": 1611082374000, "29165": 1611082391000, "29166": 1611082690000, "29168": 1611091971000, "29172": 1611173817000, "29173": 1611175645000, "29178": 1611190657000, "29179": 1611190943000, "29188": 1611272698000, "29199": 1611336964000, "29208": 1611467560000, "29209": 1611467648000, "29211": 1611482795000, "29212": 1611483498000, "29214": 1611507615000, "29215": 1611508849000, "29217": 1611518134000, "29221": 1611519087000, "29232": 1611561336000, "29238": 1611586165000, "29239": 1611586188000, "29240": 1611586878000, "29241": 1611587478000, "29244": 1611587783000, "29250": 1611643785000, "29254": 1611677552000, "29256": 1611684895000, "29262": 1611695577000, "29271": 1611703540000, "29276": 1611790455000, "29279": 1611812701000, "29280": 1611813067000, "29281": 1611813597000, "29284": 1611900470000, "29285": 1611901010000, "29287": 1611906100000, "29290": 1611922021000, "29291": 1611922837000, "29293": 1611954705000, "29296": 1611955153000, "29304": 1612025412000, "29306": 1612030209000, "29311": 1612074012000, "29312": 1612098274000, "29313": 1612098304000, "29318": 1612119690000, "29320": 1612148105000, "29328": 1612187883000, "29329": 1612188414000, "29330": 1612191154000, "29341": 1612205622000, "29342": 1612205851000, "29343": 1612207413000, "29350": 1612288301000, "29355": 1612295313000, "29356": 1612296273000, "29359": 1612303601000, "29361": 1612303816000, "29366": 1612323789000, "29367": 1612337010000, "29369": 1612367472000, "29371": 1612372490000, "29378": 1612466019000, "29392": 1612505135000, "29396": 1612536425000, "29398": 1612543828000, "29409": 1612544587000, "29417": 1612550511000, "29419": 1612561525000, "29423": 1612632996000, "29424": 1612639456000, "29427": 1612647648000, "29431": 1612650784000, "29433": 1612654921000, "29435": 1612658673000, "29461": 1612723392000, "29471": 1612781732000, "29472": 1612794105000, "29473": 1612794137000, "29474": 1612803668000, "29475": 1612803914000, "29478": 1612813960000, "29488": 1612885397000, "29490": 1612900699000, "29492": 1612907234000, "29493": 1612908640000, "29495": 1612918720000, "29500": 1612968108000, "29501": 1612970503000, "29502": 1612974672000, "29506": 1612984907000, "29507": 1612989961000, "29508": 1612990098000, "29514": 1613042619000, "29517": 1613058837000, "29518": 1613080475000, "29524": 1613137856000, "29525": 1613139059000, "29527": 1613140349000, "29528": 1613148475000, "29529": 1613152073000, "29551": 1613380642000, "29552": 1613380687000, "29553": 1613381109000, "29556": 1613400992000, "29557": 1613401104000, "29562": 1613421834000, "29564": 1613462593000, "29571": 1613545959000, "29572": 1613561654000, "29576": 1613589156000, "29578": 1613589556000, "29585": 1613681601000, "29587": 1613737247000, "29588": 1613744129000, "29596": 1613929732000, "29598": 1613934833000, "29614": 1613981707000, "29615": 1613981892000, "29616": 1613982206000, "29618": 1614005503000, "29620": 1614014363000, "29622": 1614021819000, "29626": 1614092748000, "29629": 1614115179000, "29641": 1614141136000, "29642": 1614141364000, "29660": 1614176944000, "29662": 1614179949000, "29663": 1614182585000, "29664": 1614182765000, "29677": 1614221445000, "29684": 1614274203000, "29686": 1614279997000, "29693": 1614368931000, "29694": 1614370882000, "29706": 1614387895000, "29711": 1614420846000, "29714": 1614472589000, "29715": 1614472793000, "29716": 1614502734000, "29719": 1614538891000, "29721": 1614550962000, "29724": 1614602822000, "29725": 1614604354000, "29730": 1614692977000, "29731": 1614699823000, "29744": 1614820719000, "29981": 1616593516000, "29992": 1616870751000, "30114": 1618335016000, "30318": 1620085889000, "30440": 1620517773000, "30634": 1621725882000, "30656": 1621814121000, "30659": 1621868520000, "30840": 1623161796000, "30913": 1623602959000, "30944": 1623687027000, "30961": 1623831410000, "30962": 1623849315000, "30963": 1623849823000, "30968": 1623889238000, "30969": 1623889932000, "30970": 1623890270000, "30971": 1623944500000, "30972": 1623945376000, "30973": 1623946687000, "30974": 1623947091000, "30976": 1623959372000, "30987": 1623968147000, "31011": 1624128655000, "31026": 1624293021000, "31048": 1624475039000, "31068": 1624552704000, "31085": 1624635414000, "31126": 1624811970000, "31140": 1624914300000, "31143": 1624981635000, "31144": 1624982536000, "31145": 1624985212000, "31147": 1624990742000, "31148": 1624996134000, "31152": 1625123091000, "31153": 1625123305000, "31155": 1625154136000, "31172": 1625332560000, "31175": 1625486188000, "31181": 1625513448000, "31182": 1625513488000, "31186": 1625549888000, "31188": 1625565954000, "31189": 1625584748000, "31192": 1625654468000, "31193": 1625675403000, "31194": 1625676202000, "31204": 1625692958000, "31205": 1625695570000, "31212": 1625754645000, "31216": 1625777722000, "31222": 1625798014000, "31223": 1625810765000, "31224": 1625810889000, "31225": 1625810962000, "31242": 1625852832000, "31265": 1626016979000, "31270": 1626072979000, "31274": 1626084081000, "31277": 1626100062000, "31282": 1626113332000, "31286": 1626121851000, "31293": 1626122060000, "31298": 1626164013000, "31308": 1626279422000, "31309": 1626279735000, "31310": 1626280047000, "31311": 1626283428000, "31327": 1626417530000, "31330": 1626419095000, "31331": 1626421343000, "31333": 1626437036000, "31334": 1626442735000, "31347": 1626474601000, "31363": 1626482552000, "31370": 1626609727000, "31371": 1626618711000, "31373": 1626628802000, "31374": 1626629681000, "31383": 1626721300000, "31385": 1626726516000, "31386": 1626726530000, "31388": 1626726879000, "31390": 1626726995000, "31394": 1626739267000, "31396": 1626788475000, "31398": 1626801142000, "31399": 1626827971000, "31405": 1626882239000, "31409": 1626901988000, "31414": 1626937962000, "31415": 1626939889000, "31420": 1626973342000, "31422": 1626981898000, "31444": 1627028568000, "31445": 1627028919000, "31447": 1627055051000, "31457": 1627197204000, "31463": 1627262890000, "31464": 1627279399000, "31466": 1627323027000, "31473": 1627367074000, "31476": 1627386164000, "31477": 1627400184000, "31482": 1627407843000, "31483": 1627408330000, "31484": 1627416511000, "31488": 1627442745000, "31492": 1627499098000, "31493": 1627500276000, "31505": 1627929037000, "31506": 1627929054000, "31507": 1627929535000, "31513": 1627939291000, "31517": 1628004201000, "31519": 1628023611000, "31521": 1628024713000, "31525": 1628035105000, "31527": 1628089726000, "31528": 1628091573000, "31530": 1628093388000, "31533": 1628108758000, "31534": 1628110498000, "31544": 1628158812000, "31549": 1628179264000, "31558": 1628254814000, "31559": 1628255564000, "31560": 1628256206000, "31565": 1628272593000, "31566": 1628272932000, "31567": 1628273144000, "31586": 1628412957000, "31590": 1628531196000, "31593": 1628636435000, "31595": 1628654555000, "31596": 1628655857000, "31598": 1628691210000, "31599": 1628691414000, "31604": 1628708593000, "31655": 1629034910000, "31660": 1629051347000, "31839": 1630790358000, "32017": 1632585921000, "32283": 1634559791000, "32300": 1634690747000, "32548": 1636059963000, "32571": 1636313221000, "32693": 1637099964000, "32777": 1637678015000, "32822": 1638125279000, "32958": 1639089796000, "33079": 1639798050000, "33083": 1639872079000, "33086": 1639946294000, "33169": 1640900255000, "33266": 1641843483000, "33324": 1642115464000, "33491": 1643572187000, "33492": 1643572251000, "33498": 1643648014000, "33503": 1643736394000, "33507": 1643741969000, "33514": 1643826376000, "33517": 1643830565000, "33520": 1643839277000, "33532": 1643913784000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Atom(TM) CPU N2800   @ 1.86GHz", "Intel(R) Core(TM) i7 CPU 920 @ 2.67GHz"], "machine": ["atom", "i7"], "num_cpu": ["8", null], "os": ["Linux", "Linux 3.16.0-4-amd64"], "ram": ["16416652", "4041288"], "python": ["3.7", "3.9"], "Cython": ["0.29.14", "0.29.21", "0.29.27"], "six": [""], "setuptools": ["59.8.0", null], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7 CPU 920 @ 2.67GHz", "machine": "i7", "num_cpu": "8", "os": "Linux", "ram": "16416652", "python": "3.7", "Cython": "0.29.21", "six": "", "branch": "main", "setuptools": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7 CPU 920 @ 2.67GHz", "machine": "i7", "num_cpu": "8", "os": "Linux", "ram": "16416652", "python": "3.9", "Cython": "0.29.27", "six": "", "setuptools": "59.8.0", "branch": "main"}, {"arch": "x86_64", "cpu": "Intel(R) Atom(TM) CPU N2800   @ 1.86GHz", "machine": "atom", "os": "Linux 3.16.0-4-amd64", "ram": "4041288", "python": "3.7", "Cython": "0.29.14", "six": "", "branch": "main", "num_cpu": null, "setuptools": null}], "benchmarks": {"bench_app.LaplaceInplace.time_it": {"code": "class LaplaceInplace:\n    def time_it(self, update):\n        self.run()\n\n    def setup(self, update):\n        N = 150\n        Niter = 1000\n        dx = 0.1\n        dy = 0.1\n        dx2 = (dx * dx)\n        dy2 = (dy * dy)\n    \n        def num_update(u, dx2, dy2):\n            u[1:(-1), 1:(-1)] = ((((u[2:, 1:(-1)] + u[:(-2), 1:(-1)]) * dy2) +\n                                  ((u[1:(-1), 2:] + u[1:(-1), :(-2)]) * dx2))\n                                 / (2 * (dx2 + dy2)))\n    \n        def num_inplace(u, dx2, dy2):\n            tmp = u[:(-2), 1:(-1)].copy()\n            np.add(tmp, u[2:, 1:(-1)], out=tmp)\n            np.multiply(tmp, dy2, out=tmp)\n            tmp2 = u[1:(-1), 2:].copy()\n            np.add(tmp2, u[1:(-1), :(-2)], out=tmp2)\n            np.multiply(tmp2, dx2, out=tmp2)\n            np.add(tmp, tmp2, out=tmp)\n            np.multiply(tmp, (1.0 / (2.0 * (dx2 + dy2))),\n                        out=u[1:(-1), 1:(-1)])\n    \n        def laplace(N, Niter=100, func=num_update, args=()):\n            u = np.zeros([N, N], order='C')\n            u[0] = 1\n            for i in range(Niter):\n                func(u, *args)\n            return u\n    \n        func = {'inplace': num_inplace, 'normal': num_update}[update]\n    \n        def run():\n            laplace(N, Niter, func, args=(dx2, dy2))\n    \n        self.run = run", "min_run_count": 2, "name": "bench_app.LaplaceInplace.time_it", "number": 0, "param_names": ["update"], "params": [["'inplace'", "'normal'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e912d48a31445b41d3721a0504b60aa72ddb03e4689b8386bdca5446901fa5ba", "warmup_time": -1}, "bench_app.MaxesOfDots.time_it": {"code": "class MaxesOfDots:\n    def time_it(self):\n        self.maxes_of_dots(self.arrays)\n\n    def setup(self):\n        np.random.seed(1)\n        nsubj = 5\n        nfeat = 100\n        ntime = 200\n    \n        self.arrays = [np.random.normal(size=(ntime, nfeat))\n                       for i in range(nsubj)]", "min_run_count": 2, "name": "bench_app.MaxesOfDots.time_it", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c35d6b0cbd7e439f6dc9f9844f9a6aac5e1702e666595106714a3ffb372b6be0", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_array": {"code": "class ArrayCoercionSmall:\n    def time_array(self, array_like):\n        np.array(array_like)", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_array", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "02bfee29f8ec04abfab771e56eca7f16ee6c7505c0797230455fe5d972c374db", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_array_all_kwargs": {"code": "class ArrayCoercionSmall:\n    def time_array_all_kwargs(self, array_like):\n        np.array(array_like, dtype=self.int64, copy=False, order=\"F\",\n                 subok=False, ndmin=2)", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_array_all_kwargs", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "73eadb209fbfe29b1d19131b50da1944b47d7d9b6cd59fe64b8c6e4fee177a81", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_array_dtype_not_kwargs": {"code": "class ArrayCoercionSmall:\n    def time_array_dtype_not_kwargs(self, array_like):\n        np.array(array_like, self.int64)", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_array_dtype_not_kwargs", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7406ad0e996196d58688b676695446cdc1975aec380a82035209732e57ae47b8", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_array_invalid_kwarg": {"code": "class ArrayCoercionSmall:\n    def time_array_invalid_kwarg(self, array_like):\n        try:\n            np.array(array_like, ndmin=\"not-integer\")\n        except TypeError:\n            pass", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_array_invalid_kwarg", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3cf138af2df1bdfa905afad9a2c8f4769ea6f86eef956764982c6922a78b59a8", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_array_no_copy": {"code": "class ArrayCoercionSmall:\n    def time_array_no_copy(self, array_like):\n        np.array(array_like, copy=False)", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_array_no_copy", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "88c906bfc0bb2db2866043511e2198f6c40b7da5d143aabddd17a0b2c874ba75", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_array_subok": {"code": "class ArrayCoercionSmall:\n    def time_array_subok(self, array_like):\n        np.array(array_like, subok=True)", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_array_subok", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2dc6919d9d4310f83b980f79ffd1353c7af92663d2ec75157574c06e7c075276", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_asanyarray": {"code": "class ArrayCoercionSmall:\n    def time_asanyarray(self, array_like):\n        np.asarray(array_like)", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_asanyarray", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5cae35e9e843482299e48a8bc725e45abcd4e1e2b91f9929aa5f8e73f543fe0f", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_asanyarray_dtype": {"code": "class ArrayCoercionSmall:\n    def time_asanyarray_dtype(self, array_like):\n        np.array(array_like, dtype=self.int64, order=\"F\")", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_asanyarray_dtype", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "886eeba38cd3f89302fd88a935d2bca574adcd81efadae0cd9dd96192b190c11", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_asarray": {"code": "class ArrayCoercionSmall:\n    def time_asarray(self, array_like):\n        np.asarray(array_like)", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_asarray", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8fb148d93aa9d31468b9cdfa937d40b8fe600c94ff71e244f7153884f3ccf4c1", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_asarray_dtype": {"code": "class ArrayCoercionSmall:\n    def time_asarray_dtype(self, array_like):\n        np.array(array_like, dtype=self.int64, order=\"F\")", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_asarray_dtype", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9833180cc455adb4341c01da14cfdcd6a69c09dc896d8fd05da4b21a56b11e54", "warmup_time": -1}, "bench_array_coercion.ArrayCoercionSmall.time_ascontiguousarray": {"code": "class ArrayCoercionSmall:\n    def time_ascontiguousarray(self, array_like):\n        np.ascontiguousarray(array_like)", "min_run_count": 2, "name": "bench_array_coercion.ArrayCoercionSmall.time_ascontiguousarray", "number": 0, "param_names": ["array_like"], "params": [["range(0, 3)", "[1]", "1", "array([5])", "5"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "274ebaa23a30c9368e2ff6d82c13b62ec653a7d4736f01f1fa8921021769aea1", "warmup_time": -1}, "bench_core.Core.time_arange_100": {"code": "class Core:\n    def time_arange_100(self):\n        np.arange(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_arange_100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9810ff39cf0d90038a0f034783bd846b9b7de314928b7ed9b77a9db9ab62a515", "warmup_time": -1}, "bench_core.Core.time_array_1": {"code": "class Core:\n    def time_array_1(self):\n        np.array(1)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_1", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "aebef56aaf9fb83a7a269cd2353e0e3ee094f80cd9aa5ee2224a71dec34d1b08", "warmup_time": -1}, "bench_core.Core.time_array_empty": {"code": "class Core:\n    def time_array_empty(self):\n        np.array([])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_empty", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9a1586e568107cf4face75cecd6781c6359af578ef730c85a4f752eec1dbaa9a", "warmup_time": -1}, "bench_core.Core.time_array_float64_l1000": {"code": "class Core:\n    def time_array_float64_l1000(self):\n        np.array(self.float64_l1000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_float64_l1000", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ccc5ca6d62274d036ae686dadc52f3d09e242ad9cd57d2c408da0b39d1943914", "warmup_time": -1}, "bench_core.Core.time_array_float_l1000": {"code": "class Core:\n    def time_array_float_l1000(self):\n        np.array(self.float_l1000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_float_l1000", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "461053b7868bf5b2057d2bab87037b5e07c6cf938871cb3766b44a69b8270f18", "warmup_time": -1}, "bench_core.Core.time_array_float_l1000_dtype": {"code": "class Core:\n    def time_array_float_l1000_dtype(self):\n        np.array(self.float_l1000, dtype=self.float64_dtype)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_float_l1000_dtype", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3bb7c63d26535c89a4bddc30b2aa5f74488ffae091736b6622e911af9a30ae1f", "warmup_time": -1}, "bench_core.Core.time_array_int_l1000": {"code": "class Core:\n    def time_array_int_l1000(self):\n        np.array(self.int_l1000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_int_l1000", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "89e8dee6420ae63d274cc4a6beb3038a46fbd62faf80b1e485adb3a00ad4a359", "warmup_time": -1}, "bench_core.Core.time_array_l": {"code": "class Core:\n    def time_array_l(self):\n        np.array(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_l", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "68192f51161df9d033cd5f2090e414b700ecf573b2e9000b0c534223dbbd1289", "warmup_time": -1}, "bench_core.Core.time_array_l1": {"code": "class Core:\n    def time_array_l1(self):\n        np.array([1])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_l1", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "241cdb1e469ff23c8c0308f3ff7813b606f280f0100c323d4ee3ae9f85da5595", "warmup_time": -1}, "bench_core.Core.time_array_l100": {"code": "class Core:\n    def time_array_l100(self):\n        np.array(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_l100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d704ac86a6671472c3625d12d6408848665f9db0ce76872e4893c6444287df7a", "warmup_time": -1}, "bench_core.Core.time_array_l_view": {"code": "class Core:\n    def time_array_l_view(self):\n        np.array(self.l_view)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_array_l_view", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ece084f922536234f4dd58a4601dbcbebf246861708e32f5d4051d21acbae2b8", "warmup_time": -1}, "bench_core.Core.time_diag_l100": {"code": "class Core:\n    def time_diag_l100(self):\n        np.diag(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_diag_l100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6e62ecc1856911a7a4997e46036370168fbcef6da55f9cdc14425052fd6af8a3", "warmup_time": -1}, "bench_core.Core.time_diagflat_l100": {"code": "class Core:\n    def time_diagflat_l100(self):\n        np.diagflat(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_diagflat_l100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cf3eeccf300cf54e62332841fe4e1d22f44208d6b3a264cb5a2260121fd752bd", "warmup_time": -1}, "bench_core.Core.time_diagflat_l50_l50": {"code": "class Core:\n    def time_diagflat_l50_l50(self):\n        np.diagflat([self.l50, self.l50])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_diagflat_l50_l50", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d2b890e26851599c8e29b40dbdabc8dbf1fa8dd62196cccbf9666f96e6f8e2e3", "warmup_time": -1}, "bench_core.Core.time_dstack_l": {"code": "class Core:\n    def time_dstack_l(self):\n        np.dstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_dstack_l", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "61b3007741cca1eb312f112e40a2f4904676511eed1d9717f70f35d37d4e69fe", "warmup_time": -1}, "bench_core.Core.time_empty_100": {"code": "class Core:\n    def time_empty_100(self):\n        np.empty(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_empty_100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "559d67381ed0945a2d30dd05ea10953cb54301944e11e550dd7cda8b87253ca5", "warmup_time": -1}, "bench_core.Core.time_eye_100": {"code": "class Core:\n    def time_eye_100(self):\n        np.eye(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_eye_100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "56a9ccc305d01ef5ac1e6fa57132076e313f1806b7b24edf967e272484072655", "warmup_time": -1}, "bench_core.Core.time_eye_3000": {"code": "class Core:\n    def time_eye_3000(self):\n        np.eye(3000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_eye_3000", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "824c99e7affa09c806961a580afaa51cf639bc65ddb114543fc2fe22952f33ff", "warmup_time": -1}, "bench_core.Core.time_hstack_l": {"code": "class Core:\n    def time_hstack_l(self):\n        np.hstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_hstack_l", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "144b89def72fc1ce8633c9877160d7e1ef3e5d60fcca6715f3baff628acde755", "warmup_time": -1}, "bench_core.Core.time_identity_100": {"code": "class Core:\n    def time_identity_100(self):\n        np.identity(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_identity_100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d46f8b9fda8d7af1e55aaee2a9707a32f556309f127f324c3f0f9e14577f9c84", "warmup_time": -1}, "bench_core.Core.time_identity_3000": {"code": "class Core:\n    def time_identity_3000(self):\n        np.identity(3000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_identity_3000", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f25f09f407fc0ec65996e154ce1acc3605fbfc1956b2e45ab7a8be95eabe9742", "warmup_time": -1}, "bench_core.Core.time_ones_100": {"code": "class Core:\n    def time_ones_100(self):\n        np.ones(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_ones_100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f5f2fda543a06557ed577505581a4e4a69c28db7f4d56d15e3a5ab70c5836ad1", "warmup_time": -1}, "bench_core.Core.time_tril_indices_500": {"code": "class Core:\n    def time_tril_indices_500(self):\n        np.tril_indices(500)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_tril_indices_500", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b00c8c298dd9483448ee0601526273d6576350e7cbff10d47b606a7182b9ee51", "warmup_time": -1}, "bench_core.Core.time_tril_l10x10": {"code": "class Core:\n    def time_tril_l10x10(self):\n        np.tril(self.l10x10)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_tril_l10x10", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "52a8d958bc2f0d6641959d60b4e362bd13ff07ad07cb91f67c86c1371049d522", "warmup_time": -1}, "bench_core.Core.time_triu_indices_500": {"code": "class Core:\n    def time_triu_indices_500(self):\n        np.triu_indices(500)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_triu_indices_500", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e67074fcc7b979a87a1080d3203b5ed9afac0744671de5d1ffb13cba5e2c27f4", "warmup_time": -1}, "bench_core.Core.time_triu_l10x10": {"code": "class Core:\n    def time_triu_l10x10(self):\n        np.triu(self.l10x10)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_triu_l10x10", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "450bc906f82b3446c2c3ce69ea043137dc643848b9378c0387b7f50b18e99216", "warmup_time": -1}, "bench_core.Core.time_vstack_l": {"code": "class Core:\n    def time_vstack_l(self):\n        np.vstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_vstack_l", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1287e18f3b28dadd8b9aca804e354546ffb3b238647b20cf3667d86e88c9412e", "warmup_time": -1}, "bench_core.Core.time_zeros_100": {"code": "class Core:\n    def time_zeros_100(self):\n        np.zeros(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)", "min_run_count": 2, "name": "bench_core.Core.time_zeros_100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "206e21887f58c043e2d286405ddabefa934a6cecc80fbe3045636dee7df139a4", "warmup_time": -1}, "bench_core.CorrConv.time_convolve": {"code": "class CorrConv:\n    def time_convolve(self, size1, size2, mode):\n        np.convolve(self.x1, self.x2, mode=mode)\n\n    def setup(self, size1, size2, mode):\n        self.x1 = np.linspace(0, 1, num=size1)\n        self.x2 = np.cos(np.linspace(0, 2*np.pi, num=size2))", "min_run_count": 2, "name": "bench_core.CorrConv.time_convolve", "number": 0, "param_names": ["size1", "size2", "mode"], "params": [["50", "1000", "100000"], ["10", "100", "1000", "10000"], ["'valid'", "'same'", "'full'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "110934cc16c781cf51ef05e32d0376573f652f8d29632088314c80bb280373f5", "warmup_time": -1}, "bench_core.CorrConv.time_correlate": {"code": "class CorrConv:\n    def time_correlate(self, size1, size2, mode):\n        np.correlate(self.x1, self.x2, mode=mode)\n\n    def setup(self, size1, size2, mode):\n        self.x1 = np.linspace(0, 1, num=size1)\n        self.x2 = np.cos(np.linspace(0, 2*np.pi, num=size2))", "min_run_count": 2, "name": "bench_core.CorrConv.time_correlate", "number": 0, "param_names": ["size1", "size2", "mode"], "params": [["50", "1000", "100000"], ["10", "100", "1000", "10000"], ["'valid'", "'same'", "'full'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9add985c37891263767f640a8caa0571b67ad9fc64587e26fa1403cdbfd46a20", "warmup_time": -1}, "bench_core.CountNonzero.time_count_nonzero": {"code": "class CountNonzero:\n    def time_count_nonzero(self, numaxes, size, dtype):\n        np.count_nonzero(self.x)\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)", "min_run_count": 2, "name": "bench_core.CountNonzero.time_count_nonzero", "number": 0, "param_names": ["numaxes", "size", "dtype"], "params": [["1", "2", "3"], ["100", "10000", "1000000"], ["<class 'bool'>", "<class 'numpy.int8'>", "<class 'numpy.int16'>", "<class 'numpy.int32'>", "<class 'numpy.int64'>", "<class 'str'>", "<class 'object'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "62b6e7f8cdf194df64c7d1c6948ebe3b15027b688ac851c288b08bf147ea21c4", "warmup_time": -1}, "bench_core.CountNonzero.time_count_nonzero_axis": {"code": "class CountNonzero:\n    def time_count_nonzero_axis(self, numaxes, size, dtype):\n        np.count_nonzero(self.x, axis=self.x.ndim - 1)\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)", "min_run_count": 2, "name": "bench_core.CountNonzero.time_count_nonzero_axis", "number": 0, "param_names": ["numaxes", "size", "dtype"], "params": [["1", "2", "3"], ["100", "10000", "1000000"], ["<class 'bool'>", "<class 'numpy.int8'>", "<class 'numpy.int16'>", "<class 'numpy.int32'>", "<class 'numpy.int64'>", "<class 'str'>", "<class 'object'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0af13d073c97801eefc841f06735f316331f6898842d60d7077063e761cc3399", "warmup_time": -1}, "bench_core.CountNonzero.time_count_nonzero_multi_axis": {"code": "class CountNonzero:\n    def time_count_nonzero_multi_axis(self, numaxes, size, dtype):\n        if self.x.ndim >= 2:\n            np.count_nonzero(self.x, axis=(\n                self.x.ndim - 1, self.x.ndim - 2))\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)", "min_run_count": 2, "name": "bench_core.CountNonzero.time_count_nonzero_multi_axis", "number": 0, "param_names": ["numaxes", "size", "dtype"], "params": [["1", "2", "3"], ["100", "10000", "1000000"], ["<class 'bool'>", "<class 'numpy.int8'>", "<class 'numpy.int16'>", "<class 'numpy.int32'>", "<class 'numpy.int64'>", "<class 'str'>", "<class 'object'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "539135a464660d1aa5d3e83d59b995843997e3e31d51e8e284bfbd83ddad52d3", "warmup_time": -1}, "bench_core.Indices.time_indices": {"code": "class Indices:\n    def time_indices(self):\n        np.indices((1000, 500))", "min_run_count": 2, "name": "bench_core.Indices.time_indices", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2e230aa0719ef3ade68215df513a0a9aafa9d052ee5c2665559e3cea10bf9b51", "warmup_time": -1}, "bench_core.PackBits.time_packbits": {"code": "class PackBits:\n    def time_packbits(self, dtype):\n        np.packbits(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)", "min_run_count": 2, "name": "bench_core.PackBits.time_packbits", "number": 0, "param_names": ["dtype"], "params": [["<class 'bool'>", "<class 'numpy.uint64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1e1cdd058f7cb55eb592d5d4a6d37273683a1ab55041e8c4b4ef7c29e5e55313", "warmup_time": -1}, "bench_core.PackBits.time_packbits_axis0": {"code": "class PackBits:\n    def time_packbits_axis0(self, dtype):\n        np.packbits(self.d2, axis=0)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)", "min_run_count": 2, "name": "bench_core.PackBits.time_packbits_axis0", "number": 0, "param_names": ["dtype"], "params": [["<class 'bool'>", "<class 'numpy.uint64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3596f631e5980c6f39f8af219cc1bd8bc6cb97ed103fbb9008368ce8e4510c0c", "warmup_time": -1}, "bench_core.PackBits.time_packbits_axis1": {"code": "class PackBits:\n    def time_packbits_axis1(self, dtype):\n        np.packbits(self.d2, axis=1)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)", "min_run_count": 2, "name": "bench_core.PackBits.time_packbits_axis1", "number": 0, "param_names": ["dtype"], "params": [["<class 'bool'>", "<class 'numpy.uint64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "138b6e3b289ecabf2012d7d40274f69f848fc241c53fe21eb8dcf5ff77dc3dd2", "warmup_time": -1}, "bench_core.PackBits.time_packbits_little": {"code": "class PackBits:\n    def time_packbits_little(self, dtype):\n        np.packbits(self.d, bitorder=\"little\")\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)", "min_run_count": 2, "name": "bench_core.PackBits.time_packbits_little", "number": 0, "param_names": ["dtype"], "params": [["<class 'bool'>", "<class 'numpy.uint64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b40e33398c541441ca74f3b9af0da0e187cd290dcb8f1c4040cd21b942212b93", "warmup_time": -1}, "bench_core.Temporaries.time_large": {"code": "class Temporaries:\n    def time_large(self):\n        (self.alarge * 2) + self.blarge\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)", "min_run_count": 2, "name": "bench_core.Temporaries.time_large", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d1f17784ab0409272af0ac08b2609f381d7257185a54f102e5114b3f8548fbf3", "warmup_time": -1}, "bench_core.Temporaries.time_large2": {"code": "class Temporaries:\n    def time_large2(self):\n        (self.alarge + self.blarge) - 2\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)", "min_run_count": 2, "name": "bench_core.Temporaries.time_large2", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "23dea77757706f4d1d936f725e42bdc67c57d9b2f919e4da807d26ffe127ca51", "warmup_time": -1}, "bench_core.Temporaries.time_mid": {"code": "class Temporaries:\n    def time_mid(self):\n        (self.amid * 2) + self.bmid\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)", "min_run_count": 2, "name": "bench_core.Temporaries.time_mid", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ad3406f4f9a8d7ad3c489e9028cedc12079758fe89272347756b7ea6e011a267", "warmup_time": -1}, "bench_core.Temporaries.time_mid2": {"code": "class Temporaries:\n    def time_mid2(self):\n        (self.amid + self.bmid) - 2\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)", "min_run_count": 2, "name": "bench_core.Temporaries.time_mid2", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5ad422ecaa9af109188d4d1fcb95cdfe8fce8d2ed999ef8a241e3af3f1677bbe", "warmup_time": -1}, "bench_core.UnpackBits.time_unpackbits": {"code": "class UnpackBits:\n    def time_unpackbits(self):\n        np.unpackbits(self.d)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)", "min_run_count": 2, "name": "bench_core.UnpackBits.time_unpackbits", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8a9b8fdeeee1d01e42caff6c2cd0efc371c72053e373203f670f49c399a19ef2", "warmup_time": -1}, "bench_core.UnpackBits.time_unpackbits_axis0": {"code": "class UnpackBits:\n    def time_unpackbits_axis0(self):\n        np.unpackbits(self.d2, axis=0)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)", "min_run_count": 2, "name": "bench_core.UnpackBits.time_unpackbits_axis0", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b842c713e8a843ac2273fe2f17c174ecd27b28a6dace841dac2a13d913caa8f7", "warmup_time": -1}, "bench_core.UnpackBits.time_unpackbits_axis1": {"code": "class UnpackBits:\n    def time_unpackbits_axis1(self):\n        np.unpackbits(self.d2, axis=1)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)", "min_run_count": 2, "name": "bench_core.UnpackBits.time_unpackbits_axis1", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7ac672e3d48251be042a8a5e4b8167dbb3b91f0af99b4f01f9d9287e7561cd73", "warmup_time": -1}, "bench_core.UnpackBits.time_unpackbits_axis1_little": {"code": "class UnpackBits:\n    def time_unpackbits_axis1_little(self):\n        np.unpackbits(self.d2, bitorder=\"little\", axis=1)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)", "min_run_count": 2, "name": "bench_core.UnpackBits.time_unpackbits_axis1_little", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6449672a44b525868dbb66b244d23b3cc985ed6310b7c63a3d360091748497fa", "warmup_time": -1}, "bench_core.UnpackBits.time_unpackbits_little": {"code": "class UnpackBits:\n    def time_unpackbits_little(self):\n        np.unpackbits(self.d, bitorder=\"little\")\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)", "min_run_count": 2, "name": "bench_core.UnpackBits.time_unpackbits_little", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "074fea3cb327abbd97e59f2acf3ae2eaefb70020bdef1cab122a9190ee139eb8", "warmup_time": -1}, "bench_core.VarComplex.time_var": {"code": "class VarComplex:\n    def time_var(self, n):\n        self.arr.var()\n\n    def setup(self, n):\n        self.arr = np.random.randn(n) + 1j * np.random.randn(n)", "min_run_count": 2, "name": "bench_core.VarComplex.time_var", "number": 0, "param_names": ["param1"], "params": [["10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "343d0479b33167dfc332d453e32b8710ee17a22fb693a3856575aa9dfad0d49d", "warmup_time": -1}, "bench_function_base.Bincount.time_bincount": {"code": "class Bincount:\n    def time_bincount(self):\n        np.bincount(self.d)\n\n    def setup(self):\n        self.d = np.arange(80000, dtype=np.intp)\n        self.e = self.d.astype(np.float64)", "min_run_count": 2, "name": "bench_function_base.Bincount.time_bincount", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5d90f434eae543f580a5bb7f86e14c4663521f721b5a056155c61223dec781e4", "warmup_time": -1}, "bench_function_base.Bincount.time_weights": {"code": "class Bincount:\n    def time_weights(self):\n        np.bincount(self.d, weights=self.e)\n\n    def setup(self):\n        self.d = np.arange(80000, dtype=np.intp)\n        self.e = self.d.astype(np.float64)", "min_run_count": 2, "name": "bench_function_base.Bincount.time_weights", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "21806334def6c126f9bb25e7ed2a2e4d9be995f373cd288727bb4d8e33bb11cb", "warmup_time": -1}, "bench_function_base.Histogram1D.time_fine_binning": {"code": "class Histogram1D:\n    def time_fine_binning(self):\n        np.histogram(self.d, 10000, (0, 100))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)", "min_run_count": 2, "name": "bench_function_base.Histogram1D.time_fine_binning", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fd9a7cd0ee34b75f9eddd8c022b58b149397c82b4bd22de6fdb8b6e23c72e19c", "warmup_time": -1}, "bench_function_base.Histogram1D.time_full_coverage": {"code": "class Histogram1D:\n    def time_full_coverage(self):\n        np.histogram(self.d, 200, (0, 100))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)", "min_run_count": 2, "name": "bench_function_base.Histogram1D.time_full_coverage", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7a6b3163b94451004a6b27ea9f14f9aa6c0e86e437074c1558a53ad422af141a", "warmup_time": -1}, "bench_function_base.Histogram1D.time_small_coverage": {"code": "class Histogram1D:\n    def time_small_coverage(self):\n        np.histogram(self.d, 200, (50, 51))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)", "min_run_count": 2, "name": "bench_function_base.Histogram1D.time_small_coverage", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "324b8676b5ae4c324e05671ffe2058af996d3cb540d845b6701cbae68eb26d99", "warmup_time": -1}, "bench_function_base.Histogram2D.time_fine_binning": {"code": "class Histogram2D:\n    def time_fine_binning(self):\n        np.histogramdd(self.d, (10000, 10000), ((0, 100), (0, 100)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))", "min_run_count": 2, "name": "bench_function_base.Histogram2D.time_fine_binning", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2f6f1c99fb221c95e8526dc863c8b1e72546468bf162e20e62539f171241ceae", "warmup_time": -1}, "bench_function_base.Histogram2D.time_full_coverage": {"code": "class Histogram2D:\n    def time_full_coverage(self):\n        np.histogramdd(self.d, (200, 200), ((0, 100), (0, 100)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))", "min_run_count": 2, "name": "bench_function_base.Histogram2D.time_full_coverage", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "79d7122f11109af1751f17c3a36c5df88fa3cbb842d49a9859528c7ea37eaf4f", "warmup_time": -1}, "bench_function_base.Histogram2D.time_small_coverage": {"code": "class Histogram2D:\n    def time_small_coverage(self):\n        np.histogramdd(self.d, (200, 200), ((50, 51), (50, 51)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))", "min_run_count": 2, "name": "bench_function_base.Histogram2D.time_small_coverage", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e8ff2855bc11b18b68832bbd0917468aab6b272a86ec5cf2fd1ac46d3e39adf5", "warmup_time": -1}, "bench_function_base.Median.time_even": {"code": "class Median:\n    def time_even(self):\n        np.median(self.e)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        self.tall = np.random.random((10000, 20))\n        self.wide = np.random.random((20, 10000))", "min_run_count": 2, "name": "bench_function_base.Median.time_even", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "13b3b69fccb37edf9506bbda2fc94d186da8c807a7b327a06594a505019f2f2f", "warmup_time": -1}, "bench_function_base.Median.time_even_inplace": {"code": "class Median:\n    def time_even_inplace(self):\n        np.median(self.e, overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        self.tall = np.random.random((10000, 20))\n        self.wide = np.random.random((20, 10000))", "min_run_count": 2, "name": "bench_function_base.Median.time_even_inplace", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "66ab8767b044f8bba391dcde907bc3f8adaaa5ed6d3bdc98f8cd145c3d1504dc", "warmup_time": -1}, "bench_function_base.Median.time_even_small": {"code": "class Median:\n    def time_even_small(self):\n        np.median(self.e[:500], overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        self.tall = np.random.random((10000, 20))\n        self.wide = np.random.random((20, 10000))", "min_run_count": 2, "name": "bench_function_base.Median.time_even_small", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7e875480f5efc782650ad82c3da3b98e1c792c1a0ef6909b6f4ca34723f5f74a", "warmup_time": -1}, "bench_function_base.Median.time_odd": {"code": "class Median:\n    def time_odd(self):\n        np.median(self.o)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        self.tall = np.random.random((10000, 20))\n        self.wide = np.random.random((20, 10000))", "min_run_count": 2, "name": "bench_function_base.Median.time_odd", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c9387484b60ca2a29af6a76b204e2e946707a510ce8f0cf34ad94034e60fa9f4", "warmup_time": -1}, "bench_function_base.Median.time_odd_inplace": {"code": "class Median:\n    def time_odd_inplace(self):\n        np.median(self.o, overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        self.tall = np.random.random((10000, 20))\n        self.wide = np.random.random((20, 10000))", "min_run_count": 2, "name": "bench_function_base.Median.time_odd_inplace", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "247fb9cabd1120f968f253104e257b12ee43dfdccd615442560ee3fc19c73f19", "warmup_time": -1}, "bench_function_base.Median.time_odd_small": {"code": "class Median:\n    def time_odd_small(self):\n        np.median(self.o[:500], overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        self.tall = np.random.random((10000, 20))\n        self.wide = np.random.random((20, 10000))", "min_run_count": 2, "name": "bench_function_base.Median.time_odd_small", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ca5ae3c9b420da70652d3804e6ed8c638ebce887f7e8bf1ea47eeeac067f0dc5", "warmup_time": -1}, "bench_function_base.Median.time_tall": {"code": "class Median:\n    def time_tall(self):\n        np.median(self.tall, axis=-1)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        self.tall = np.random.random((10000, 20))\n        self.wide = np.random.random((20, 10000))", "min_run_count": 2, "name": "bench_function_base.Median.time_tall", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cdd4fd8c870b9317004bded6790f3ee97e061fda9c111d1ff931f73a65f45800", "warmup_time": -1}, "bench_function_base.Median.time_wide": {"code": "class Median:\n    def time_wide(self):\n        np.median(self.wide, axis=0)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)\n        self.tall = np.random.random((10000, 20))\n        self.wide = np.random.random((20, 10000))", "min_run_count": 2, "name": "bench_function_base.Median.time_wide", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2cc4f8b970b0002377700dcbd509c1ee53cb30b8ce8e3703b2a50af674db3d4d", "warmup_time": -1}, "bench_function_base.Percentile.time_percentile": {"code": "class Percentile:\n    def time_percentile(self):\n        np.percentile(self.e, [25, 35, 55, 65, 75])\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Percentile.time_percentile", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5fa63bb5a8b13b569acb81041b61348497a56baf4d93535578165158f78697b0", "warmup_time": -1}, "bench_function_base.Percentile.time_quartile": {"code": "class Percentile:\n    def time_quartile(self):\n        np.percentile(self.e, [25, 75])\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)", "min_run_count": 2, "name": "bench_function_base.Percentile.time_quartile", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a7a60e6bb5900bd1b6710d05fdd72798f76a270afd501a0c11b5917020cba619", "warmup_time": -1}, "bench_function_base.Select.time_select": {"code": "class Select:\n    def time_select(self):\n        np.select(self.cond, [self.d, self.e])\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = [(self.d > 4), (self.d < 2)]\n        self.cond_large = [(self.d > 4), (self.d < 2)] * 10", "min_run_count": 2, "name": "bench_function_base.Select.time_select", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "89f02a048ace03b6c3269e61811da1ece2dab2a456536225dafaccbc385920a7", "warmup_time": -1}, "bench_function_base.Select.time_select_larger": {"code": "class Select:\n    def time_select_larger(self):\n        np.select(self.cond_large, ([self.d, self.e] * 10))\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = [(self.d > 4), (self.d < 2)]\n        self.cond_large = [(self.d > 4), (self.d < 2)] * 10", "min_run_count": 2, "name": "bench_function_base.Select.time_select_larger", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a702e09750946268c44bce105934f13f28b8abe05f71a1f660e967804fafd305", "warmup_time": -1}, "bench_function_base.Sort.time_argsort": {"code": "class Sort:\n    def time_argsort(self, kind, dtype, array_type):\n        np.argsort(self.arr, kind=kind)\n\n    def setup(self, kind, dtype, array_type):\n        np.random.seed(1234)\n        array_class = array_type[0]\n        self.arr = getattr(SortGenerator, array_class)(self.ARRAY_SIZE, dtype, *array_type[1:])", "min_run_count": 2, "name": "bench_function_base.Sort.time_argsort", "number": 0, "param_names": ["kind", "dtype", "array_type"], "params": [["'quick'", "'merge'", "'heap'"], ["'float64'", "'int64'", "'int16'"], ["('random',)", "('ordered',)", "('reversed',)", "('uniform',)", "('sorted_block', 10)", "('sorted_block', 100)", "('sorted_block', 1000)"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "624eb47572c94efd36b968e9d3bc7e0626f4bbf3e7578adaa6abc977cd03c833", "warmup_time": -1}, "bench_function_base.Sort.time_sort": {"code": "class Sort:\n    def time_sort(self, kind, dtype, array_type):\n        # Using np.sort(...) instead of arr.sort(...) because it makes a copy.\n        # This is important because the data is prepared once per benchmark, but\n        # used across multiple runs.\n        np.sort(self.arr, kind=kind)\n\n    def setup(self, kind, dtype, array_type):\n        np.random.seed(1234)\n        array_class = array_type[0]\n        self.arr = getattr(SortGenerator, array_class)(self.ARRAY_SIZE, dtype, *array_type[1:])", "min_run_count": 2, "name": "bench_function_base.Sort.time_sort", "number": 0, "param_names": ["kind", "dtype", "array_type"], "params": [["'quick'", "'merge'", "'heap'"], ["'float64'", "'int64'", "'int16'"], ["('random',)", "('ordered',)", "('reversed',)", "('uniform',)", "('sorted_block', 10)", "('sorted_block', 100)", "('sorted_block', 1000)"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1fa0d392d237dcaa96c29d3fe5e59749ebb9bfd9e79f9bd3d4f00e0def335ae0", "warmup_time": -1}, "bench_function_base.Sort.time_sort_worst": {"code": "class SortWorst:\n    def time_sort_worst(self):\n        np.sort(self.worst)\n\n    def setup(self):\n        # quicksort median of 3 worst case\n        self.worst = np.arange(1000000)\n        x = self.worst\n        while x.size > 3:\n            mid = x.size // 2\n            x[mid], x[-2] = x[-2], x[mid]\n            x = x[:-2]", "min_run_count": 2, "name": "bench_function_base.Sort.time_sort_worst", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ace32d23c7f67f08c3993d54ad4d4b67cd9b56a42a8b95f830141cce64e1d6ec", "warmup_time": -1}, "bench_function_base.Where.time_1": {"code": "class Where:\n    def time_1(self):\n        np.where(self.cond)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)", "min_run_count": 2, "name": "bench_function_base.Where.time_1", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4b1f7a67860008b1fa0d58ddf29ace0f2ae879a9c19c7c0da4dc5ec9f9c3e075", "warmup_time": -1}, "bench_function_base.Where.time_2": {"code": "class Where:\n    def time_2(self):\n        np.where(self.cond, self.d, self.e)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)", "min_run_count": 2, "name": "bench_function_base.Where.time_2", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9aab7b536e740af04ddd0a32c17a5359fb6db1f56304795fbbef62ffe6a08a63", "warmup_time": -1}, "bench_function_base.Where.time_2_broadcast": {"code": "class Where:\n    def time_2_broadcast(self):\n        np.where(self.cond, self.d, 0)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)", "min_run_count": 2, "name": "bench_function_base.Where.time_2_broadcast", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2e8c53780a92870cc414371e711fb188646805ba43e4159157bc05fa6b822e6f", "warmup_time": -1}, "bench_import.Import.time_fft": {"code": "class Import:\n    def time_fft(self):\n        self.execute('from numpy import fft')", "min_run_count": 2, "name": "bench_import.Import.time_fft", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "032a4b610918503dbb969cc5837be23961652784b6221173d38fa901e9811532", "warmup_time": -1}, "bench_import.Import.time_linalg": {"code": "class Import:\n    def time_linalg(self):\n        self.execute('from numpy import linalg')", "min_run_count": 2, "name": "bench_import.Import.time_linalg", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c39a1494b3509e08cf7735c691b237b7bea72c7ab9acc811567991c16104f2aa", "warmup_time": -1}, "bench_import.Import.time_ma": {"code": "class Import:\n    def time_ma(self):\n        self.execute('from numpy import ma')", "min_run_count": 2, "name": "bench_import.Import.time_ma", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8a42f579234af8dd0de6c97e2456192925e2089772dc64143802bc3d511757e1", "warmup_time": -1}, "bench_import.Import.time_matlib": {"code": "class Import:\n    def time_matlib(self):\n        self.execute('from numpy import matlib')", "min_run_count": 2, "name": "bench_import.Import.time_matlib", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1646af4cf76933a57faea27e4294eb5bacd6fa5fa3eb86f10e9e3f8db9a2cd57", "warmup_time": -1}, "bench_import.Import.time_numpy": {"code": "class Import:\n    def time_numpy(self):\n        self.execute('import numpy')", "min_run_count": 2, "name": "bench_import.Import.time_numpy", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5cb9a60ea63951e4ed5e53d18cbebb7b1ae313ae422ff739356454e6f9f2c5d7", "warmup_time": -1}, "bench_import.Import.time_numpy_inspect": {"code": "class Import:\n    def time_numpy_inspect(self):\n        # What are the savings from avoiding to import the inspect module?\n        self.execute('import numpy, inspect')", "min_run_count": 2, "name": "bench_import.Import.time_numpy_inspect", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3dd22ba8c1d5c49a9d99843d70d69a23add5d539d482ece58b85fe9cbfae98d2", "warmup_time": -1}, "bench_import.Import.time_random": {"code": "class Import:\n    def time_random(self):\n        self.execute('from numpy import random')", "min_run_count": 2, "name": "bench_import.Import.time_random", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "93e927c190a453a13a4dc57e51ad273e11e681bf788ef4051cf0b3a255837552", "warmup_time": -1}, "bench_indexing.Indexing.time_op": {"code": "class Indexing:\n    def time_op(self, indexes, sel, op):\n        self.func()\n\n    def setup(self, indexes, sel, op):\n        sel = sel.replace('I', indexes)\n    \n        ns = {'squares_': get_squares_(),\n              'np': np,\n              'indexes_': get_indexes_(),\n              'indexes_rand_': get_indexes_rand_()}\n    \n        code = \"def run():\\n    for a in squares_.values(): a[%s]%s\"\n        code = code % (sel, op)\n    \n        exec(code, ns)\n        self.func = ns['run']", "min_run_count": 2, "name": "bench_indexing.Indexing.time_op", "number": 0, "param_names": ["indexes", "sel", "op"], "params": [["'indexes_'", "'indexes_rand_'"], ["'I'", "':,I'", "'np.ix_(I, I)'"], ["''", "'=1'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2465b1e641afa0b484c5c37d765bbcf98df0cc9b75f502c64c2c79fa9e71b8b2", "warmup_time": -1}, "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing": {"code": "class IndexingSeparate:\n    def time_mmap_fancy_indexing(self):\n        for i in range(1000):\n            self.fp[self.indexes]\n\n    def setup(self):\n        self.tmp_dir = mkdtemp()\n        self.fp = memmap(pjoin(self.tmp_dir, 'tmp.dat'),\n                         dtype=float32, mode='w+', shape=(50, 60))\n        self.indexes = array([3, 4, 6, 10, 20])", "min_run_count": 2, "name": "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d511fabf6c9d75bca8e0c77070a292a7498f23fd253bf151c2d0472028c8e375", "warmup_time": -1}, "bench_indexing.IndexingSeparate.time_mmap_slicing": {"code": "class IndexingSeparate:\n    def time_mmap_slicing(self):\n        for i in range(1000):\n            self.fp[5:10]\n\n    def setup(self):\n        self.tmp_dir = mkdtemp()\n        self.fp = memmap(pjoin(self.tmp_dir, 'tmp.dat'),\n                         dtype=float32, mode='w+', shape=(50, 60))\n        self.indexes = array([3, 4, 6, 10, 20])", "min_run_count": 2, "name": "bench_indexing.IndexingSeparate.time_mmap_slicing", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8aac8af758ba563381c8d021d9163a34a1652b3fcc129ec3555e9221a785b469", "warmup_time": -1}, "bench_indexing.IndexingStructured0D.time_array_all": {"code": "class IndexingStructured0D:\n    def time_array_all(self):\n        self.B['a'] = self.A['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()", "min_run_count": 2, "name": "bench_indexing.IndexingStructured0D.time_array_all", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "972e93e84611a6e63b6d9fe5d2019b3b54f98452ed2b237b58f4d58bbde4072b", "warmup_time": -1}, "bench_indexing.IndexingStructured0D.time_array_slice": {"code": "class IndexingStructured0D:\n    def time_array_slice(self):\n        self.B['a'][:] = self.A['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()", "min_run_count": 2, "name": "bench_indexing.IndexingStructured0D.time_array_slice", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7884c48afe99676d42705373c0678163cd9358c0af75b3888566a78b64b1a0ae", "warmup_time": -1}, "bench_indexing.IndexingStructured0D.time_scalar_all": {"code": "class IndexingStructured0D:\n    def time_scalar_all(self):\n        self.b['a'] = self.a['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()", "min_run_count": 2, "name": "bench_indexing.IndexingStructured0D.time_scalar_all", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3379d09fc19f9b870f4e9a930bc98b6cda21f792cfb9caf37992752c1ed04c9e", "warmup_time": -1}, "bench_indexing.IndexingStructured0D.time_scalar_slice": {"code": "class IndexingStructured0D:\n    def time_scalar_slice(self):\n        self.b['a'][:] = self.a['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()", "min_run_count": 2, "name": "bench_indexing.IndexingStructured0D.time_scalar_slice", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ffcfe894af4580d854b9e8b2d38687ab9ee9c372cc0d50fd467e5eab42e974ce", "warmup_time": -1}, "bench_indexing.ScalarIndexing.time_assign": {"code": "class ScalarIndexing:\n    def time_assign(self, ndim):\n        # time assignment from a python scalar\n        arr = self.array\n        indx = (1,) * ndim\n        for i in range(100):\n            arr[indx] = 5.\n\n    def setup(self, ndim):\n        self.array = np.ones((5,) * ndim)", "min_run_count": 2, "name": "bench_indexing.ScalarIndexing.time_assign", "number": 0, "param_names": ["ndim"], "params": [["0", "1", "2"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "52c0dfa579d132ce77b2ca2d0b042734f9d8f60d0e16ef2af7f292e1d49d5936", "warmup_time": -1}, "bench_indexing.ScalarIndexing.time_assign_cast": {"code": "class ScalarIndexing:\n    def time_assign_cast(self, ndim):\n        # time an assignment which may use a cast operation\n        arr = self.array\n        indx = (1,) * ndim\n        val = np.int16(43)\n        for i in range(100):\n            arr[indx] = val\n\n    def setup(self, ndim):\n        self.array = np.ones((5,) * ndim)", "min_run_count": 2, "name": "bench_indexing.ScalarIndexing.time_assign_cast", "number": 0, "param_names": ["ndim"], "params": [["0", "1", "2"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "36f3c671c5ba3cb5633f4a6b4e211938c2eb5857440c2a0e3c06281d2c0a5bc7", "warmup_time": -1}, "bench_indexing.ScalarIndexing.time_index": {"code": "class ScalarIndexing:\n    def time_index(self, ndim):\n        # time indexing.\n        arr = self.array\n        indx = (1,) * ndim\n        for i in range(100):\n            arr[indx]\n\n    def setup(self, ndim):\n        self.array = np.ones((5,) * ndim)", "min_run_count": 2, "name": "bench_indexing.ScalarIndexing.time_index", "number": 0, "param_names": ["ndim"], "params": [["0", "1", "2"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b5a4c10e3553e7101b7fc679cb355150c5b27d7c7b5544f50660fbe581936f73", "warmup_time": -1}, "bench_io.Copy.time_cont_assign": {"code": "class Copy:\n    def time_cont_assign(self, typename):\n        self.d[...] = 1\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_cont_assign", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "afe3edcb5a646c1dd3efa7d2b5084f3759d877cec053e46705ac093e8bafbddd", "warmup_time": -1}, "bench_io.Copy.time_memcpy": {"code": "class Copy:\n    def time_memcpy(self, typename):\n        self.d[...] = self.e_d\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_memcpy", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8e4099e96ab5221807bc0dd397733a0016f6f1bbbca8f5b800a8249a6e72bc7e", "warmup_time": -1}, "bench_io.Copy.time_memcpy_large_out_of_place": {"code": "class Copy:\n    def time_memcpy_large_out_of_place(self, typename):\n        l = np.ones(1024**2, dtype=np.dtype(typename))\n        l.copy()\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_memcpy_large_out_of_place", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "862a7ab3e90582f36eae4004c8ed717e47fc8e8fa042cf49b6c12a5df1d6b4c7", "warmup_time": -1}, "bench_io.Copy.time_strided_assign": {"code": "class Copy:\n    def time_strided_assign(self, typename):\n        self.dflat[::2] = 2\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_strided_assign", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "61d585e17292b3b6a8aba7775561f3fbffe991d8655b2335bfdbf1c83de99915", "warmup_time": -1}, "bench_io.Copy.time_strided_copy": {"code": "class Copy:\n    def time_strided_copy(self, typename):\n        self.d[...] = self.e.T\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)", "min_run_count": 2, "name": "bench_io.Copy.time_strided_copy", "number": 0, "param_names": ["type"], "params": [["'int8'", "'int16'", "'float32'", "'float64'", "'complex64'", "'complex128'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e431dccc9dca8066e5245473c4aa724314bd94e7a7a5db466deb0e5cfcfab482", "warmup_time": -1}, "bench_io.CopyTo.time_copyto": {"code": "class CopyTo:\n    def time_copyto(self):\n        np.copyto(self.d, self.e)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "07950888132a0948b3c041b33f0f183b09ef914213babe934461be9b316d3221", "warmup_time": -1}, "bench_io.CopyTo.time_copyto_8_dense": {"code": "class CopyTo:\n    def time_copyto_8_dense(self):\n        np.copyto(self.d, self.e, where=self.im8)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto_8_dense", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a73b9cc35e00d11b5cd0365076a62b7e2e3058a742abdac1ff0632af2afa63ce", "warmup_time": -1}, "bench_io.CopyTo.time_copyto_8_sparse": {"code": "class CopyTo:\n    def time_copyto_8_sparse(self):\n        np.copyto(self.d, self.e, where=self.m8)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto_8_sparse", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6b3380a508d21032c997a83cb0f5f88e055d7c440b0e802e3856e0bba7b42699", "warmup_time": -1}, "bench_io.CopyTo.time_copyto_dense": {"code": "class CopyTo:\n    def time_copyto_dense(self):\n        np.copyto(self.d, self.e, where=self.im)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto_dense", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3fc8f0ec8a3cbc2c0e6efed89c18560d81b4f3055eedac3e4cc6fb8f0ea88b6f", "warmup_time": -1}, "bench_io.CopyTo.time_copyto_sparse": {"code": "class CopyTo:\n    def time_copyto_sparse(self):\n        np.copyto(self.d, self.e, where=self.m)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)", "min_run_count": 2, "name": "bench_io.CopyTo.time_copyto_sparse", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8b3edb57c11fe88b4cb32c4a592531aad95d8749f99cdaa508ad926e7411faf0", "warmup_time": -1}, "bench_io.LoadtxtCSVComments.time_comment_loadtxt_csv": {"code": "class LoadtxtCSVComments:\n    def time_comment_loadtxt_csv(self, num_lines):\n        # benchmark handling of lines with comments\n        # when loading in from csv files\n    \n        # inspired by similar benchmark in pandas\n        # for read_csv\n    \n        # need to rewind StringIO object (unfortunately\n        # confounding timing result somewhat) for every\n        # call to timing test proper\n        np.loadtxt(self.data_comments,\n                   delimiter=u',')\n        self.data_comments.seek(0)\n\n    def setup(self, num_lines):\n        data = [u'1,2,3 # comment'] * num_lines\n        # unfortunately, timeit will only run setup()\n        # between repeat events, but not for iterations\n        # within repeats, so the StringIO object\n        # will have to be rewinded in the benchmark proper\n        self.data_comments = StringIO(u'\\n'.join(data))", "min_run_count": 2, "name": "bench_io.LoadtxtCSVComments.time_comment_loadtxt_csv", "number": 0, "param_names": ["num_lines"], "params": [["10", "100", "10000", "100000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bc3091851c3292f70850fcd7eb14ea6ca5884ac7374b43c01263cad29f7f685a", "warmup_time": -1}, "bench_io.LoadtxtCSVDateTime.time_loadtxt_csv_datetime": {"code": "class LoadtxtCSVDateTime:\n    def time_loadtxt_csv_datetime(self, num_lines):\n        # rewind StringIO object -- the timing iterations\n        # are state-dependent\n        X = np.loadtxt(self.csv_data,\n                       delimiter=u',',\n                       dtype=([('dates', 'M8[us]'),\n                               ('values', 'float64')]))\n        self.csv_data.seek(0)\n\n    def setup(self, num_lines):\n        # create the equivalent of a two-column CSV file\n        # with date strings in the first column and random\n        # floating point data in the second column\n        dates = np.arange('today', 20, dtype=np.datetime64)\n        np.random.seed(123)\n        values = np.random.rand(20)\n        date_line = u''\n    \n        for date, value in zip(dates, values):\n            date_line += (str(date) + ',' + str(value) + '\\n')\n    \n        # expand data to specified number of lines\n        data = date_line * (num_lines // 20)\n        self.csv_data = StringIO(data)", "min_run_count": 2, "name": "bench_io.LoadtxtCSVDateTime.time_loadtxt_csv_datetime", "number": 0, "param_names": ["num_lines"], "params": [["20", "200", "2000", "20000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "70095fef3c3845550dc9746c84e9f3b187983185c2e2c9d633fd2311bc7ba481", "warmup_time": -1}, "bench_io.LoadtxtCSVSkipRows.time_skiprows_csv": {"code": "class LoadtxtCSVSkipRows:\n    def time_skiprows_csv(self, skiprows):\n        np.loadtxt(self.fname,\n                   delimiter=',',\n                   skiprows=skiprows)\n\n    def setup(self, skiprows):\n        np.random.seed(123)\n        test_array = np.random.rand(100000, 3)\n        self.fname = 'test_array.csv'\n        np.savetxt(fname=self.fname,\n                   X=test_array,\n                   delimiter=',')", "min_run_count": 2, "name": "bench_io.LoadtxtCSVSkipRows.time_skiprows_csv", "number": 0, "param_names": ["skiprows"], "params": [["0", "500", "10000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3e404fbe768ffacb38decdc20759baa4c49675a337db49def01ca2ad8ec05f2b", "warmup_time": -1}, "bench_io.LoadtxtCSVStructured.time_loadtxt_csv_struct_dtype": {"code": "class LoadtxtCSVStructured:\n    def time_loadtxt_csv_struct_dtype(self):\n        # obligate rewind of StringIO object\n        # between iterations of a repeat:\n    \n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   dtype=[('category_1', 'S1'),\n                          ('category_2', 'i4'),\n                          ('category_3', 'f8'),\n                          ('category_4', 'S1'),\n                          ('category_5', 'f8')])\n        self.csv_data.seek(0)\n\n    def setup(self):\n        num_lines = 50000\n        data = [u\"M, 21, 72, X, 155\"] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))", "min_run_count": 2, "name": "bench_io.LoadtxtCSVStructured.time_loadtxt_csv_struct_dtype", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "07198d0fb34f51c139a680e174f6a1285f06d00a9779f096ddd73c2969678198", "warmup_time": -1}, "bench_io.LoadtxtCSVdtypes.time_loadtxt_dtypes_csv": {"code": "class LoadtxtCSVdtypes:\n    def time_loadtxt_dtypes_csv(self, dtype, num_lines):\n        # benchmark loading arrays of various dtypes\n        # from csv files\n    \n        # state-dependent timing benchmark requires\n        # rewind of StringIO object\n    \n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   dtype=dtype)\n        self.csv_data.seek(0)\n\n    def setup(self, dtype, num_lines):\n        data = [u'5, 7, 888'] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))", "min_run_count": 2, "name": "bench_io.LoadtxtCSVdtypes.time_loadtxt_dtypes_csv", "number": 0, "param_names": ["dtype", "num_lines"], "params": [["'float32'", "'float64'", "'int32'", "'int64'", "'complex128'", "'str'", "'object'"], ["10", "100", "10000", "100000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "187d12d6e571661ff9c309e9eceac39f4c4f8767bb2b29b883971db26e32f00d", "warmup_time": -1}, "bench_io.LoadtxtReadUint64Integers.time_read_uint64": {"code": "class LoadtxtReadUint64Integers:\n    def time_read_uint64(self, size):\n        # mandatory rewind of StringIO object\n        # between iterations of a repeat:\n        np.loadtxt(self.data1)\n        self.data1.seek(0)\n\n    def setup(self, size):\n        arr = np.arange(size).astype('uint64') + 2**63\n        self.data1 = StringIO(u'\\n'.join(arr.astype(str).tolist()))\n        arr = arr.astype(object)\n        arr[500] = -1\n        self.data2 = StringIO(u'\\n'.join(arr.astype(str).tolist()))", "min_run_count": 2, "name": "bench_io.LoadtxtReadUint64Integers.time_read_uint64", "number": 0, "param_names": ["size"], "params": [["550", "1000", "10000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8bece444885419bd9c391480f21d71718360ad70d21ff3a2e9f3686d6308bbaf", "warmup_time": -1}, "bench_io.LoadtxtReadUint64Integers.time_read_uint64_neg_values": {"code": "class LoadtxtReadUint64Integers:\n    def time_read_uint64_neg_values(self, size):\n        # mandatory rewind of StringIO object\n        # between iterations of a repeat:\n        np.loadtxt(self.data2)\n        self.data2.seek(0)\n\n    def setup(self, size):\n        arr = np.arange(size).astype('uint64') + 2**63\n        self.data1 = StringIO(u'\\n'.join(arr.astype(str).tolist()))\n        arr = arr.astype(object)\n        arr[500] = -1\n        self.data2 = StringIO(u'\\n'.join(arr.astype(str).tolist()))", "min_run_count": 2, "name": "bench_io.LoadtxtReadUint64Integers.time_read_uint64_neg_values", "number": 0, "param_names": ["size"], "params": [["550", "1000", "10000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5052543cb6a21400dfb8700019b08f81d3edfdeeb85fab940f5ce3e19325a976", "warmup_time": -1}, "bench_io.LoadtxtUseColsCSV.time_loadtxt_usecols_csv": {"code": "class LoadtxtUseColsCSV:\n    def time_loadtxt_usecols_csv(self, usecols):\n        # must rewind StringIO because of state\n        # dependence of file reading\n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   usecols=usecols)\n        self.csv_data.seek(0)\n\n    def setup(self, usecols):\n        num_lines = 5000\n        data = [u'0, 1, 2, 3, 4, 5, 6, 7, 8, 9'] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))", "min_run_count": 2, "name": "bench_io.LoadtxtUseColsCSV.time_loadtxt_usecols_csv", "number": 0, "param_names": ["usecols"], "params": [["2", "[1, 3]", "[1, 3, 5, 7]"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fb0b1e5cb45978fdd468073eb5f8645968a9ad1bb6fb7cd02dc1d7541791fefe", "warmup_time": -1}, "bench_io.Savez.time_vb_savez_squares": {"code": "class Savez:\n    def time_vb_savez_squares(self):\n        np.savez('tmp.npz', **self.squares)\n\n    def setup(self):\n        self.squares = get_squares()", "min_run_count": 2, "name": "bench_io.Savez.time_vb_savez_squares", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1d68d79f6ca00119e591c2cf1dd228713f70a6478358c985911a0c76299407b1", "warmup_time": -1}, "bench_itemselection.PutMask.time_dense": {"code": "class PutMask:\n    def time_dense(self, values_is_scalar, dtype):\n        np.putmask(self.arr, self.dense_mask, self.vals)\n\n    def setup(self, values_is_scalar, dtype):\n        if values_is_scalar:\n            self.vals = np.array(1., dtype=dtype)\n        else:\n            self.vals = np.ones(1000, dtype=dtype)\n    \n        self.arr = np.ones(1000, dtype=dtype)\n    \n        self.dense_mask = np.ones(1000, dtype=\"bool\")\n        self.sparse_mask = np.zeros(1000, dtype=\"bool\")", "min_run_count": 2, "name": "bench_itemselection.PutMask.time_dense", "number": 0, "param_names": ["values_is_scalar", "dtype"], "params": [["True", "False"], ["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "166dfab55086e824fc45c71ba79ed453e0de08edbd84c71a8b60468e93c27c89", "warmup_time": -1}, "bench_itemselection.PutMask.time_sparse": {"code": "class PutMask:\n    def time_sparse(self, values_is_scalar, dtype):\n        np.putmask(self.arr, self.sparse_mask, self.vals)\n\n    def setup(self, values_is_scalar, dtype):\n        if values_is_scalar:\n            self.vals = np.array(1., dtype=dtype)\n        else:\n            self.vals = np.ones(1000, dtype=dtype)\n    \n        self.arr = np.ones(1000, dtype=dtype)\n    \n        self.dense_mask = np.ones(1000, dtype=\"bool\")\n        self.sparse_mask = np.zeros(1000, dtype=\"bool\")", "min_run_count": 2, "name": "bench_itemselection.PutMask.time_sparse", "number": 0, "param_names": ["values_is_scalar", "dtype"], "params": [["True", "False"], ["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "dadc5e4b5b3dd8f832173b7b7e1f8efd82503d4238e6691b90e9969fd2828f9c", "warmup_time": -1}, "bench_itemselection.Take.time_contiguous": {"code": "class Take:\n    def time_contiguous(self, shape, mode, dtype):\n        self.arr.take(self.indices, axis=-2, mode=mode)\n\n    def setup(self, shape, mode, dtype):\n        self.arr = np.ones(shape, dtype)\n        self.indices = np.arange(1000)", "min_run_count": 2, "name": "bench_itemselection.Take.time_contiguous", "number": 0, "param_names": ["shape", "mode", "dtype"], "params": [["(1000, 1)", "(1000, 2)", "(2, 1000, 1)", "(1000, 3)"], ["'raise'", "'wrap'", "'clip'"], ["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "464749957650ef1727b83afc00207bcd11ac8a1d60cd0d9352c205b4cbab00d0", "warmup_time": -1}, "bench_lib.Nan.time_nanargmax": {"code": "class Nan:\n    def time_nanargmax(self, array_size, percent_nans):\n        np.nanargmax(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanargmax", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e93b632ae2c175e9f074fecf982b2e75825933044e266a73e608882fb4106e39", "warmup_time": -1}, "bench_lib.Nan.time_nanargmin": {"code": "class Nan:\n    def time_nanargmin(self, array_size, percent_nans):\n        np.nanargmin(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanargmin", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9385e2fafd18fc88d1b8c187b5fd6a41beaaa05dd04da8369310d0654de51fdb", "warmup_time": -1}, "bench_lib.Nan.time_nancumprod": {"code": "class Nan:\n    def time_nancumprod(self, array_size, percent_nans):\n        np.nancumprod(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nancumprod", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c5152de8ed506c6bac541397bf24900bfb9232cb7c700c57ab580655a16ef9a1", "warmup_time": -1}, "bench_lib.Nan.time_nancumsum": {"code": "class Nan:\n    def time_nancumsum(self, array_size, percent_nans):\n        np.nancumsum(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nancumsum", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c6f6d799b85c622c7182ea607d345bd1e58a57e0edb2c400d9addfaacbd83c0b", "warmup_time": -1}, "bench_lib.Nan.time_nanmax": {"code": "class Nan:\n    def time_nanmax(self, array_size, percent_nans):\n        np.nanmax(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanmax", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "97743a24377113c2ba327e2bedf80ccd0eef0beb04bfd9ff0955fd171e91ed9e", "warmup_time": -1}, "bench_lib.Nan.time_nanmean": {"code": "class Nan:\n    def time_nanmean(self, array_size, percent_nans):\n        np.nanmean(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanmean", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "17469b47e08e615431155eecb3988ad949edeed425d54d3250dbe73b4b1a8545", "warmup_time": -1}, "bench_lib.Nan.time_nanmedian": {"code": "class Nan:\n    def time_nanmedian(self, array_size, percent_nans):\n        np.nanmedian(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanmedian", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0304fe4c2e9af7017d4850ddd0fbc5c0685194ae26169415a8fb3edc887120cb", "warmup_time": -1}, "bench_lib.Nan.time_nanmin": {"code": "class Nan:\n    def time_nanmin(self, array_size, percent_nans):\n        np.nanmin(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanmin", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "422814a93a17c53f1fc66f2c0cf02bd469c610907711b4a88ec30afcca8a4f1a", "warmup_time": -1}, "bench_lib.Nan.time_nanpercentile": {"code": "class Nan:\n    def time_nanpercentile(self, array_size, percent_nans):\n        np.nanpercentile(self.arr, q=50)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanpercentile", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "43b19dca34cc3d049c734b37fb526294d75cdae30fd6362dd1d25ee588029890", "warmup_time": -1}, "bench_lib.Nan.time_nanprod": {"code": "class Nan:\n    def time_nanprod(self, array_size, percent_nans):\n        np.nanprod(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanprod", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "76f6ddee7a2bd922a811a590da914e871a9da441ace23f624f885eff2ced6dda", "warmup_time": -1}, "bench_lib.Nan.time_nanquantile": {"code": "class Nan:\n    def time_nanquantile(self, array_size, percent_nans):\n        np.nanquantile(self.arr, q=0.2)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanquantile", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b6f9f81b2ba7ce0db3202f8e704563ef00acd142d57c08af0abae29275eb1887", "warmup_time": -1}, "bench_lib.Nan.time_nanstd": {"code": "class Nan:\n    def time_nanstd(self, array_size, percent_nans):\n        np.nanstd(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanstd", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8b165d52bb3a1a20c40d491c8b58205b060401acb5cb2e98ad86e3280ae1fd8f", "warmup_time": -1}, "bench_lib.Nan.time_nansum": {"code": "class Nan:\n    def time_nansum(self, array_size, percent_nans):\n        np.nansum(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nansum", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "437765c3785e683bce0eb75c444aedb41352d0466d14fa89b112191fc4b4a0ec", "warmup_time": -1}, "bench_lib.Nan.time_nanvar": {"code": "class Nan:\n    def time_nanvar(self, array_size, percent_nans):\n        np.nanvar(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Nan.time_nanvar", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7a04b150fb7a516a6d80b5c4ddf17d050b765c19f7962e0c5e3d1931a694869f", "warmup_time": -1}, "bench_lib.Pad.time_pad": {"code": "class Pad:\n    def time_pad(self, shape, pad_width, mode):\n        np.pad(self.array, pad_width, mode)\n\n    def setup(self, shape, pad_width, mode):\n        # Make sure to fill the array to make the OS page fault\n        # in the setup phase and not the timed phase\n        self.array = np.full(shape, fill_value=1, dtype=np.float64)", "min_run_count": 2, "name": "bench_lib.Pad.time_pad", "number": 0, "param_names": ["shape", "pad_width", "mode"], "params": [["(4194304,)", "(1024, 1024)", "(256, 128, 1)", "(4, 4, 4, 4)", "(1, 1, 1, 1, 1)"], ["1", "8", "(0, 32)"], ["'constant'", "'edge'", "'linear_ramp'", "'mean'", "'reflect'", "'wrap'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b4277ec92e77c2bf4bb0b2a8e8dce9197194cef3f65e13f14bd7fb5b7e74a8ac", "warmup_time": -1}, "bench_lib.Unique.time_unique": {"code": "class Unique:\n    def time_unique(self, array_size, percent_nans):\n        np.unique(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array", "min_run_count": 2, "name": "bench_lib.Unique.time_unique", "number": 0, "param_names": ["array_size", "percent_nans"], "params": [["200", "200000"], ["0", "0.1", "2.0", "50.0", "90.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1decf0ff98fb6d5abc45236b819ffeb9c2dacb6aaa98ef6216f4ff307fdf042f", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_a_b": {"code": "class Eindot:\n    def time_dot_a_b(self):\n        np.dot(self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_a_b", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "90f6bce9991a3ec6b21cdb7d7612044fe2ab4a6f4baa4d09ad9f1532ae1ed729", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_d_dot_b_c": {"code": "class Eindot:\n    def time_dot_d_dot_b_c(self):\n        np.dot(self.d, np.dot(self.b, self.c))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_d_dot_b_c", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bfab7b7d665b79c0d6cd60cdebb0069198b221c435e1376c860d9547ffed5a3b", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_trans_a_at": {"code": "class Eindot:\n    def time_dot_trans_a_at(self):\n        np.dot(self.a, self.at)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_trans_a_at", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5312f8c34eaec25db7229551b2d1b3a36a60967397e0d6c2a5f3dd2ef7c9da39", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_trans_a_atc": {"code": "class Eindot:\n    def time_dot_trans_a_atc(self):\n        np.dot(self.a, self.atc)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_trans_a_atc", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2aaf3ac46d4867f457064a7af0eb0bb69d2357840c425d21e2dca264654ab0e7", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_trans_at_a": {"code": "class Eindot:\n    def time_dot_trans_at_a(self):\n        np.dot(self.at, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_trans_at_a", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3f4eddebca7bb5be74255d929a51634b57aa16904159810bcf998c44c82852fc", "warmup_time": -1}, "bench_linalg.Eindot.time_dot_trans_atc_a": {"code": "class Eindot:\n    def time_dot_trans_atc_a(self):\n        np.dot(self.atc, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_dot_trans_atc_a", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "59ac3a40d150a1adaabb06fb254b4308c270e5cd305fb71a0422fc0d352fb0f6", "warmup_time": -1}, "bench_linalg.Eindot.time_einsum_i_ij_j": {"code": "class Eindot:\n    def time_einsum_i_ij_j(self):\n        np.einsum('i,ij,j', self.d, self.b, self.c)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_einsum_i_ij_j", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b1430a7cb033c76f16784f9e1ad22a1823dc42f09801eff4f508a03fa87a5894", "warmup_time": -1}, "bench_linalg.Eindot.time_einsum_ij_jk_a_b": {"code": "class Eindot:\n    def time_einsum_ij_jk_a_b(self):\n        np.einsum('ij,jk', self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_einsum_ij_jk_a_b", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f59314fd417195a44f7811dc7866043d4ac947486c2065d5e76667cd3efd9b2a", "warmup_time": -1}, "bench_linalg.Eindot.time_einsum_ijk_jil_kl": {"code": "class Eindot:\n    def time_einsum_ijk_jil_kl(self):\n        np.einsum('ijk,jil->kl', self.a3, self.b3)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_einsum_ijk_jil_kl", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ca6de720148ca6468c9b96c0a584634bfd37611a176acf7aceb072a6b6d523a9", "warmup_time": -1}, "bench_linalg.Eindot.time_inner_trans_a_a": {"code": "class Eindot:\n    def time_inner_trans_a_a(self):\n        np.inner(self.a, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_inner_trans_a_a", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ff937aafce634b08b6e5a183252e02a459877dcfbfc6c7a2dc38a2a0bc2ec61f", "warmup_time": -1}, "bench_linalg.Eindot.time_inner_trans_a_ac": {"code": "class Eindot:\n    def time_inner_trans_a_ac(self):\n        np.inner(self.a, self.ac)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_inner_trans_a_ac", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "75be1a984676fcf27a3f71634783126016d5893ab4806f17cc8fc5b9dd0481ed", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_a_b": {"code": "class Eindot:\n    def time_matmul_a_b(self):\n        np.matmul(self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_a_b", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8de65997a20d204169d458a6c8dbd028e175482b00a244e57bee527705d8049d", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_d_matmul_b_c": {"code": "class Eindot:\n    def time_matmul_d_matmul_b_c(self):\n        np.matmul(self.d, np.matmul(self.b, self.c))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_d_matmul_b_c", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "29cf075642392ec27e0bf81b3c28ed75d0470a4c9180bbe2a32673affb49c2dd", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_trans_a_at": {"code": "class Eindot:\n    def time_matmul_trans_a_at(self):\n        np.matmul(self.a, self.at)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_trans_a_at", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e3c80942140f34f39e469517660d62496f439c0e2b4e8f1e21e0097af4ec25a9", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_trans_a_atc": {"code": "class Eindot:\n    def time_matmul_trans_a_atc(self):\n        np.matmul(self.a, self.atc)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_trans_a_atc", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "80227843461ad996deb3d17b6b0e1ffc84a639663196e31a9bb49846e9e72da6", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_trans_at_a": {"code": "class Eindot:\n    def time_matmul_trans_at_a(self):\n        np.matmul(self.at, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_trans_at_a", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b9ed64e91ad9ac7937d4064ed9c1f7a432c0df7b6f912e029126146d76493e97", "warmup_time": -1}, "bench_linalg.Eindot.time_matmul_trans_atc_a": {"code": "class Eindot:\n    def time_matmul_trans_atc_a(self):\n        np.matmul(self.atc, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_matmul_trans_atc_a", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7d84f2dd41ff3b11ae8fbd1c920eeb5f02793f02d93e39fa84bcb2815ea1a9c1", "warmup_time": -1}, "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1": {"code": "class Eindot:\n    def time_tensordot_a_b_axes_1_0_0_1(self):\n        np.tensordot(self.a3, self.b3, axes=([1, 0], [0, 1]))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)", "min_run_count": 2, "name": "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e0e115ed5626e3f37056c84484c86e35bc62234e7781a233afc1e6a00c19c8c5", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_contig_contig": {"code": "class Einsum:\n    def time_einsum_contig_contig(self, dtype):\n        np.einsum(\"ji,i->\", self.two_dim, self.one_dim_small, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_contig_contig", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8adc09afddad8003e7808ad90d675a4ef2706a2932a2ff358e2b814b41bcdff6", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_contig_outstride0": {"code": "class Einsum:\n    def time_einsum_contig_outstride0(self, dtype):\n        np.einsum(\"i->\", self.one_dim_big, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_contig_outstride0", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7afd17861ae71dbe77144a1faeeb3176229072baaa2969aaafa10d0bfcc23066", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_mul": {"code": "class Einsum:\n    def time_einsum_mul(self, dtype):\n        np.einsum(\"i,->i\", self.one_dim_big, 300, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_mul", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1b2c070beeed615d7775ccda47842645ac2324ad7c182b78fd07af6c12493c9c", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_multiply": {"code": "class Einsum:\n    def time_einsum_multiply(self, dtype):\n        np.einsum(\"..., ...\", self.two_dim_small, self.three_dim , optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_multiply", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ed15937fb416e231b01b629d71ead2308c3c7ad6c7a79fb8884cc11ae5814825", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_noncon_contig_contig": {"code": "class Einsum:\n    def time_einsum_noncon_contig_contig(self, dtype):\n        np.einsum(\"ji,i->\", self.non_contigous_dim2, self.non_contigous_dim1_small, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_noncon_contig_contig", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c399ae7b56426d1ff9cd53559574b9876a5aacec35b7362d50074279a7828f9a", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_noncon_contig_outstride0": {"code": "class Einsum:\n    def time_einsum_noncon_contig_outstride0(self, dtype):\n        np.einsum(\"i->\", self.non_contigous_dim1, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_noncon_contig_outstride0", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6f6986fde8f1314dc839beaf55cad01ed4c9e411aef84aa3fd76fec67abcba70", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_noncon_mul": {"code": "class Einsum:\n    def time_einsum_noncon_mul(self, dtype):\n        np.einsum(\"i,->i\", self.non_contigous_dim1, 300, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_noncon_mul", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "45a0761a1c1866f75f24da60fdaf3809b44a2a9b79c52deba9c74d505afe2b44", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_noncon_multiply": {"code": "class Einsum:\n    def time_einsum_noncon_multiply(self, dtype):\n        np.einsum(\"..., ...\", self.non_contigous_dim2, self.non_contigous_dim3 , optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_noncon_multiply", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1b9cec6373b83ea65824593eca04f477f6bb2f2f5a7159510dc099b978831c1a", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_noncon_outer": {"code": "class Einsum:\n    def time_einsum_noncon_outer(self, dtype):\n        np.einsum(\"i,j\", self.non_contigous_dim1, self.non_contigous_dim1, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_noncon_outer", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d1a535ac18b01c8f11548160cf79ceac023576ddd71ad1ff3c354f82ecfba89c", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_noncon_sum_mul": {"code": "class Einsum:\n    def time_einsum_noncon_sum_mul(self, dtype):\n        np.einsum(\",i...->\", 300, self.non_contigous_dim3, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_noncon_sum_mul", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cec57af67bb6867105e9916e16f019a674443caf67052b54b889a6ed365b727b", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_noncon_sum_mul2": {"code": "class Einsum:\n    def time_einsum_noncon_sum_mul2(self, dtype):\n        np.einsum(\"i...,->\", self.non_contigous_dim3, 300, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_noncon_sum_mul2", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "660d058923ae9e1e4917c29da2a7b3e0cd96aca4cc8ba90a5cafcb3a6e4592c3", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_outer": {"code": "class Einsum:\n    def time_einsum_outer(self, dtype):\n        np.einsum(\"i,j\", self.one_dim, self.one_dim, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_outer", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e2ccf900c5582993ce1bb09fd290fab74f28ce52639739423d15b23b50c40efb", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_sum_mul": {"code": "class Einsum:\n    def time_einsum_sum_mul(self, dtype):\n        np.einsum(\",i...->\", 300, self.three_dim_small, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_sum_mul", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d4d9dc7270e9f52c0a201127fcbecbb4697408fd41c4ea16bbae9065318e78cb", "warmup_time": -1}, "bench_linalg.Einsum.time_einsum_sum_mul2": {"code": "class Einsum:\n    def time_einsum_sum_mul2(self, dtype):\n        np.einsum(\"i...,->\", self.three_dim_small, 300, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)", "min_run_count": 2, "name": "bench_linalg.Einsum.time_einsum_sum_mul2", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9e9e8a7cc22a5b242b00cf769e78e61793ee52afffe928cb970712f8f24219cf", "warmup_time": -1}, "bench_linalg.Linalg.time_op": {"code": "class Linalg:\n    def time_op(self, op, typename):\n        self.func(self.a)\n\n    def setup(self, op, typename):\n        np.seterr(all='ignore')\n    \n        self.func = getattr(np.linalg, op)\n    \n        if op == 'cholesky':\n            # we need a positive definite\n            self.a = np.dot(get_squares_()[typename],\n                            get_squares_()[typename].T)\n        else:\n            self.a = get_squares_()[typename]\n    \n        # check that dtype is supported at all\n        try:\n            self.func(self.a[:2, :2])\n        except TypeError as e:\n            raise NotImplementedError() from e", "min_run_count": 2, "name": "bench_linalg.Linalg.time_op", "number": 0, "param_names": ["op", "type"], "params": [["'svd'", "'pinv'", "'det'", "'norm'"], ["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ec96fb5a1e3cb3d3b9f7942ee8998339851dfeb014b07775259423d500861162", "warmup_time": -1}, "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64": {"code": "class Lstsq:\n    def time_numpy_linalg_lstsq_a__b_float64(self):\n        np.linalg.lstsq(self.a, self.b, rcond=-1)\n\n    def setup(self):\n        self.a = get_squares_()['float64']\n        self.b = get_indexes_rand()[:100].astype(np.float64)", "min_run_count": 2, "name": "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8986b54baed47d44faf78455a011ab17ccdfb51cc62cf0e48087f054a52c29e6", "warmup_time": -1}, "bench_ma.Concatenate.time_it": {"code": "class Concatenate:\n    def time_it(self, mode, n):\n        np.ma.concatenate(self.args)\n\n    def setup(self, mode, n):\n        # avoid np.zeros's lazy allocation that cause page faults during benchmark.\n        # np.fill will cause pagefaults to happen during setup.\n        normal = np.full((n, n), 0, int)\n        unmasked = np.ma.zeros((n, n), int)\n        masked = np.ma.array(normal, mask=True)\n    \n        mode_parts = mode.split('+')\n        base = mode_parts[0]\n        promote = 'masked' in mode_parts[1:]\n    \n        if base == 'ndarray':\n            args = 10 * (normal,)\n        elif base == 'unmasked':\n            args = 10 * (unmasked,)\n        else:\n            args = 10 * (masked,)\n    \n        if promote:\n            args = args[:-1] + (masked,)\n    \n        self.args = args", "min_run_count": 2, "name": "bench_ma.Concatenate.time_it", "number": 0, "param_names": ["mode", "n"], "params": [["'ndarray'", "'unmasked'", "'ndarray+masked'", "'unmasked+masked'", "'masked'"], ["2", "100", "2000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c5266b41dad24011ae7e64de9ff53d788ddeb5d55cbb4cff451dc49af0c70298", "warmup_time": -1}, "bench_ma.Indexing.time_0d": {"code": "class Indexing:\n    def time_0d(self, masked, ndim, size):\n        self.m[self.idx_0d]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)", "min_run_count": 2, "name": "bench_ma.Indexing.time_0d", "number": 0, "param_names": ["masked", "ndim", "size"], "params": [["True", "False"], ["1", "2"], ["10", "100", "1000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3af17398e826ce96894f8d9e3df13390b6057d8ab4646cccf3dafe3a6b530dea", "warmup_time": -1}, "bench_ma.Indexing.time_1d": {"code": "class Indexing:\n    def time_1d(self, masked, ndim, size):\n        self.m[self.idx_1d]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)", "min_run_count": 2, "name": "bench_ma.Indexing.time_1d", "number": 0, "param_names": ["masked", "ndim", "size"], "params": [["True", "False"], ["1", "2"], ["10", "100", "1000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2dc73766d9324469077751387174000e90cd198310ae5d0b5bbfbe2b3a0b1d55", "warmup_time": -1}, "bench_ma.Indexing.time_scalar": {"code": "class Indexing:\n    def time_scalar(self, masked, ndim, size):\n        self.m[self.idx_scalar]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)", "min_run_count": 2, "name": "bench_ma.Indexing.time_scalar", "number": 0, "param_names": ["masked", "ndim", "size"], "params": [["True", "False"], ["1", "2"], ["10", "100", "1000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "20842912a6d684f5d66c15e2ef6fc5994066b617ff4c673efb382b98bd70c190", "warmup_time": -1}, "bench_ma.MA.time_masked_array": {"code": "class MA:\n    def time_masked_array(self):\n        np.ma.masked_array()\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)", "min_run_count": 2, "name": "bench_ma.MA.time_masked_array", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "569cb888c6b874c3b64957cab882b3e04f2d830d4581ce6aed29c758d2c32fa2", "warmup_time": -1}, "bench_ma.MA.time_masked_array_l100": {"code": "class MA:\n    def time_masked_array_l100(self):\n        np.ma.masked_array(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)", "min_run_count": 2, "name": "bench_ma.MA.time_masked_array_l100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1bd9f2518b045c4e7f662bb4528b56e49605d20fd412c8657d0ef38741838eb5", "warmup_time": -1}, "bench_ma.MA.time_masked_array_l100_t100": {"code": "class MA:\n    def time_masked_array_l100_t100(self):\n        np.ma.masked_array(self.l100, self.t100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)", "min_run_count": 2, "name": "bench_ma.MA.time_masked_array_l100_t100", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5756fb2ab73509c5b839cd02f3317b36da59fd9b3eee66bad94c4cde42a86bb9", "warmup_time": -1}, "bench_ma.UFunc.time_1d": {"code": "class UFunc:\n    def time_1d(self, a_masked, b_masked, size):\n        np.ma.add(self.a_1d, self.b_1d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)", "min_run_count": 2, "name": "bench_ma.UFunc.time_1d", "number": 0, "param_names": ["a_masked", "b_masked", "size"], "params": [["True", "False"], ["True", "False"], ["10", "100", "1000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3367abb12ea2e83d13287419c09a5fcfdec21cb8b976041105622e5f2455219a", "warmup_time": -1}, "bench_ma.UFunc.time_2d": {"code": "class UFunc:\n    def time_2d(self, a_masked, b_masked, size):\n        # broadcasting happens this time\n        np.ma.add(self.a_2d, self.b_2d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)", "min_run_count": 2, "name": "bench_ma.UFunc.time_2d", "number": 0, "param_names": ["a_masked", "b_masked", "size"], "params": [["True", "False"], ["True", "False"], ["10", "100", "1000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2f6eefd233384bed94c580db5fcefc09e11a86f0008ccf16cbf1dff95b0b9c23", "warmup_time": -1}, "bench_ma.UFunc.time_scalar": {"code": "class UFunc:\n    def time_scalar(self, a_masked, b_masked, size):\n        np.ma.add(self.a_scalar, self.b_scalar)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)", "min_run_count": 2, "name": "bench_ma.UFunc.time_scalar", "number": 0, "param_names": ["a_masked", "b_masked", "size"], "params": [["True", "False"], ["True", "False"], ["10", "100", "1000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4496f86f82cad9053c558f7f3b1f7a8ad9ccd4d18b3a7d5dd2e0dd1192c8e4d9", "warmup_time": -1}, "bench_ma.UFunc.time_scalar_1d": {"code": "class UFunc:\n    def time_scalar_1d(self, a_masked, b_masked, size):\n        np.ma.add(self.a_scalar, self.b_1d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)", "min_run_count": 2, "name": "bench_ma.UFunc.time_scalar_1d", "number": 0, "param_names": ["a_masked", "b_masked", "size"], "params": [["True", "False"], ["True", "False"], ["10", "100", "1000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "98dfb3a1d0e42b2006cb34ac1dde59953825c9fbf5f1d3685a4ca3127525adc6", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_broadcast_to_duck": {"code": "class ArrayFunction:\n    def time_mock_broadcast_to_duck(self):\n        mock_broadcast_to(self.duck_array, ())\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_broadcast_to_duck", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b54211444ccedb1ab418dbbf6ec0f6a2ef4262f33dff86946a325e943e80ba0e", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_broadcast_to_numpy": {"code": "class ArrayFunction:\n    def time_mock_broadcast_to_numpy(self):\n        mock_broadcast_to(self.numpy_array, ())\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_broadcast_to_numpy", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a77448f26c942ff1b0caa4cfa8e496e7f3b84342a4b3b798fadfde02460e4a7a", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_concatenate_duck": {"code": "class ArrayFunction:\n    def time_mock_concatenate_duck(self):\n        mock_concatenate(self.duck_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_concatenate_duck", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ca0f8a5a984c328b123d685cd3abebcfe69e74236884e9ae936604992f36247a", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_concatenate_many": {"code": "class ArrayFunction:\n    def time_mock_concatenate_many(self):\n        mock_concatenate(self.many_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_concatenate_many", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d63644407e7bb0c62ecd497191be5179221a5471d2679821ab9cd51e58e33b81", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_concatenate_mixed": {"code": "class ArrayFunction:\n    def time_mock_concatenate_mixed(self):\n        mock_concatenate(self.mixed_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_concatenate_mixed", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f0f836ffe9cd3cd7558defd3fcf150b87fed04847e82126cb3d0be71cf1db5d0", "warmup_time": -1}, "bench_overrides.ArrayFunction.time_mock_concatenate_numpy": {"code": "class ArrayFunction:\n    def time_mock_concatenate_numpy(self):\n        mock_concatenate(self.numpy_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]", "min_run_count": 2, "name": "bench_overrides.ArrayFunction.time_mock_concatenate_numpy", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ba531ff260ae0e34362db5e75dc2787f752347a622d2ac57279a05124ea3c43a", "warmup_time": -1}, "bench_random.Bounded.time_bounded": {"code": "class Bounded:\n    def time_bounded(self, bitgen, args):\n            \"\"\"\n            Timer for 8-bit bounded values.\n    \n            Parameters (packed as args)\n            ----------\n            dt : {uint8, uint16, uint32, unit64}\n                output dtype\n            max : int\n                Upper bound for range. Lower is always 0.  Must be <= 2**bits.\n            \"\"\"\n            dt, max = args\n            if bitgen == 'numpy':\n                self.rg.randint(0, max + 1, nom_size, dtype=dt)\n            else:\n                self.rg.integers(0, max + 1, nom_size, dtype=dt)\n\n    def setup(self, bitgen, args):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()", "min_run_count": 2, "name": "bench_random.Bounded.time_bounded", "number": 0, "param_names": ["rng", "dt_max"], "params": [["'PCG64'", "'MT19937'", "'Philox'", "'SFC64'", "'numpy'"], ["[<class 'numpy.uint8'>, 95]", "[<class 'numpy.uint8'>, 64]", "[<class 'numpy.uint8'>, 127]", "[<class 'numpy.uint16'>, 95]", "[<class 'numpy.uint16'>, 1024]", "[<class 'numpy.uint16'>, 1535]", "[<class 'numpy.uint16'>, 2047]", "[<class 'numpy.uint32'>, 1024]", "[<class 'numpy.uint32'>, 1535]", "[<class 'numpy.uint32'>, 2047]", "[<class 'numpy.uint64'>, 95]", "[<class 'numpy.uint64'>, 1024]", "[<class 'numpy.uint64'>, 1535]", "[<class 'numpy.uint64'>, 2047]"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1976966bc3e0f289c56524699eb45b095dab1d74806707d5e3e40f3165b1aa29", "warmup_time": -1}, "bench_random.Choice.time_choice": {"code": "class Choice:\n    def time_choice(self, v):\n        self.rng.choice(self.a, 1000, replace=False)\n\n    def setup(self, v):\n        self.a = np.arange(v)\n        self.rng = np.random.default_rng()", "min_run_count": 2, "name": "bench_random.Choice.time_choice", "number": 0, "param_names": ["param1"], "params": [["1000.0", "1000000.0", "100000000.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "732a2a02157fac586fed5ed7e5cb87b3f922e3ee957fac07cc8a392d51f1e462", "warmup_time": -1}, "bench_random.Choice.time_legacy_choice": {"code": "class Choice:\n    def time_legacy_choice(self, v):\n        np.random.choice(self.a, 1000, replace=False)\n\n    def setup(self, v):\n        self.a = np.arange(v)\n        self.rng = np.random.default_rng()", "min_run_count": 2, "name": "bench_random.Choice.time_legacy_choice", "number": 0, "param_names": ["param1"], "params": [["1000.0", "1000000.0", "100000000.0"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f8ea1e2859fc2421cf7aafc0c6f30d0342781a578958dbadfeeb1cfc31cf6cf1", "warmup_time": -1}, "bench_random.Permutation.time_permutation_1d": {"code": "class Permutation:\n    def time_permutation_1d(self):\n        np.random.permutation(self.a_1d)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random(self.n)\n        self.a_2d = np.random.random((self.n, 2))", "min_run_count": 2, "name": "bench_random.Permutation.time_permutation_1d", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "551dd96381ce6ea1af2f4261ae7b78bb04024222f86e42dc477bced10c5d3326", "warmup_time": -1}, "bench_random.Permutation.time_permutation_2d": {"code": "class Permutation:\n    def time_permutation_2d(self):\n        np.random.permutation(self.a_2d)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random(self.n)\n        self.a_2d = np.random.random((self.n, 2))", "min_run_count": 2, "name": "bench_random.Permutation.time_permutation_2d", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "afbad8cd57abad2c145db591d5d673799f4702d837eb9c1fa2f69c5c853fe526", "warmup_time": -1}, "bench_random.Permutation.time_permutation_int": {"code": "class Permutation:\n    def time_permutation_int(self):\n        np.random.permutation(self.n)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random(self.n)\n        self.a_2d = np.random.random((self.n, 2))", "min_run_count": 2, "name": "bench_random.Permutation.time_permutation_int", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "71e1c9cf4d468f4c66f76d7a4215275d590d638c56a84ce00a9da324d7d79818", "warmup_time": -1}, "bench_random.RNG.time_32bit": {"code": "class RNG:\n    def time_32bit(self, bitgen):\n        min, max = self.uint32info.min, self.uint32info.max\n        if bitgen == 'numpy':\n            self.rg.randint(min, max + 1, nom_size, dtype=np.uint32)\n        else:\n            self.rg.integers(min, max + 1, nom_size, dtype=np.uint32)\n\n    def setup(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()\n        self.int32info = np.iinfo(np.int32)\n        self.uint32info = np.iinfo(np.uint32)\n        self.uint64info = np.iinfo(np.uint64)", "min_run_count": 2, "name": "bench_random.RNG.time_32bit", "number": 0, "param_names": ["rng"], "params": [["'PCG64'", "'MT19937'", "'Philox'", "'SFC64'", "'numpy'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "cb6866d2a229860446d329ed86cec74da9f3f495d544006e29dba8f0eb9a2a29", "warmup_time": -1}, "bench_random.RNG.time_64bit": {"code": "class RNG:\n    def time_64bit(self, bitgen):\n        min, max = self.uint64info.min, self.uint64info.max\n        if bitgen == 'numpy':\n            self.rg.randint(min, max + 1, nom_size, dtype=np.uint64)\n        else:\n            self.rg.integers(min, max + 1, nom_size, dtype=np.uint64)\n\n    def setup(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()\n        self.int32info = np.iinfo(np.int32)\n        self.uint32info = np.iinfo(np.uint32)\n        self.uint64info = np.iinfo(np.uint64)", "min_run_count": 2, "name": "bench_random.RNG.time_64bit", "number": 0, "param_names": ["rng"], "params": [["'PCG64'", "'MT19937'", "'Philox'", "'SFC64'", "'numpy'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f427158e9352900d3a4249235778210c55419c9a6abd475fba10b12a612f62cc", "warmup_time": -1}, "bench_random.RNG.time_normal_zig": {"code": "class RNG:\n    def time_normal_zig(self, bitgen):\n        self.rg.standard_normal(nom_size)\n\n    def setup(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()\n        self.int32info = np.iinfo(np.int32)\n        self.uint32info = np.iinfo(np.uint32)\n        self.uint64info = np.iinfo(np.uint64)", "min_run_count": 2, "name": "bench_random.RNG.time_normal_zig", "number": 0, "param_names": ["rng"], "params": [["'PCG64'", "'MT19937'", "'Philox'", "'SFC64'", "'numpy'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b07ff35f63c9be7b9129a247a6f3b90d3209858b607b91e42b0be9c75a7cdf2f", "warmup_time": -1}, "bench_random.RNG.time_raw": {"code": "class RNG:\n    def time_raw(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg.random_integers(self.int32info.max, size=nom_size)\n        else:\n            self.rg.integers(self.int32info.max, size=nom_size, endpoint=True)\n\n    def setup(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()\n        self.int32info = np.iinfo(np.int32)\n        self.uint32info = np.iinfo(np.uint32)\n        self.uint64info = np.iinfo(np.uint64)", "min_run_count": 2, "name": "bench_random.RNG.time_raw", "number": 0, "param_names": ["rng"], "params": [["'PCG64'", "'MT19937'", "'Philox'", "'SFC64'", "'numpy'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9a10bd242f667f726dd0b180cc185c6eb1a96cc178b96a6f905d269b2f8641c6", "warmup_time": -1}, "bench_random.Randint.time_randint_fast": {"code": "class Randint:\n    def time_randint_fast(self):\n        \"\"\"Compare to uint32 below\"\"\"\n        np.random.randint(0, 2**30, size=10**5)", "min_run_count": 2, "name": "bench_random.Randint.time_randint_fast", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bb8c6b342d125e6ce85eba74f81e9a3f69eb3a1f4948921a73b680d3ea4f312e", "warmup_time": -1}, "bench_random.Randint.time_randint_slow": {"code": "class Randint:\n    def time_randint_slow(self):\n        \"\"\"Compare to uint32 below\"\"\"\n        np.random.randint(0, 2**30 + 1, size=10**5)", "min_run_count": 2, "name": "bench_random.Randint.time_randint_slow", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "97dcc24881c776455f5c6a04bec764909ac9a0e4f7cfde6413f8d60a487adbc5", "warmup_time": -1}, "bench_random.Randint_dtype.time_randint_fast": {"code": "class Randint_dtype:\n    def time_randint_fast(self, name):\n        high = self.high[name]\n        np.random.randint(0, high, size=10**5, dtype=name)\n\n    def setup(self, name):\n        from numpy.lib import NumpyVersion\n        if NumpyVersion(np.__version__) < '1.11.0.dev0':\n            raise NotImplementedError", "min_run_count": 2, "name": "bench_random.Randint_dtype.time_randint_fast", "number": 0, "param_names": ["dtype"], "params": [["'bool'", "'uint8'", "'uint16'", "'uint32'", "'uint64'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "686cd267595db36e1a5b21a65b9f0a77efb9cd65c4b1b7f631b7ffe955087d2b", "warmup_time": -1}, "bench_random.Randint_dtype.time_randint_slow": {"code": "class Randint_dtype:\n    def time_randint_slow(self, name):\n        high = self.high[name]\n        np.random.randint(0, high + 1, size=10**5, dtype=name)\n\n    def setup(self, name):\n        from numpy.lib import NumpyVersion\n        if NumpyVersion(np.__version__) < '1.11.0.dev0':\n            raise NotImplementedError", "min_run_count": 2, "name": "bench_random.Randint_dtype.time_randint_slow", "number": 0, "param_names": ["dtype"], "params": [["'bool'", "'uint8'", "'uint16'", "'uint32'", "'uint64'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5288dc43a24dc0ad0085d813bc9c7f1501cff277adbffe869256718c92d76bbd", "warmup_time": -1}, "bench_random.Random.time_rng": {"code": "class Random:\n    def time_rng(self, name):\n        self.func(*self.params)\n\n    def setup(self, name):\n        items = name.split()\n        name = items.pop(0)\n        params = [float(x) for x in items]\n    \n        self.func = getattr(np.random, name)\n        self.params = tuple(params) + ((100, 100),)", "min_run_count": 2, "name": "bench_random.Random.time_rng", "number": 0, "param_names": ["param1"], "params": [["'normal'", "'uniform'", "'weibull 1'", "'binomial 10 0.5'", "'poisson 10'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "20d7c6d641e664676dba02e39f4358735344639b5c0798301d8702c6d4b0cb1f", "warmup_time": -1}, "bench_random.Shuffle.time_100000": {"code": "class Shuffle:\n    def time_100000(self):\n        np.random.shuffle(self.a)\n\n    def setup(self):\n        self.a = np.arange(100000)", "min_run_count": 2, "name": "bench_random.Shuffle.time_100000", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "008b63ed906c93eff862ba9a6aad85a0ed290deb009fa1085447a66b23e8d717", "warmup_time": -1}, "bench_records.Records.time_fromarrays_formats_as_list": {"code": "class Records:\n    def time_fromarrays_formats_as_list(self):\n        np.core.records.fromarrays(self.arrays, formats=self.formats)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number", "min_run_count": 2, "name": "bench_records.Records.time_fromarrays_formats_as_list", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "621e3b86832fdf9664c674069c3d1fbeb10cddf260e4c4b4a3b47ec05c71fbb1", "warmup_time": -1}, "bench_records.Records.time_fromarrays_formats_as_string": {"code": "class Records:\n    def time_fromarrays_formats_as_string(self):\n        np.core.records.fromarrays(self.arrays, formats=self.formats_str)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number", "min_run_count": 2, "name": "bench_records.Records.time_fromarrays_formats_as_string", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "856269c6f0b81d23f7e9fd24a17d47ff29142465b7d193cc5de403c1c6fdd235", "warmup_time": -1}, "bench_records.Records.time_fromarrays_w_dtype": {"code": "class Records:\n    def time_fromarrays_w_dtype(self):\n        np.core.records.fromarrays(self.arrays, dtype=self.dtype_)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number", "min_run_count": 2, "name": "bench_records.Records.time_fromarrays_w_dtype", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7535af7828629025f0ce5b805ff36e75f86ca00ab8925e3205495d9c0cb452d5", "warmup_time": -1}, "bench_records.Records.time_fromarrays_wo_dtype": {"code": "class Records:\n    def time_fromarrays_wo_dtype(self):\n        np.core.records.fromarrays(self.arrays)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number", "min_run_count": 2, "name": "bench_records.Records.time_fromarrays_wo_dtype", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b1e0d759f5513721633b892f2f293f27755a92bd041c2b7b5aee9baaa692f0dc", "warmup_time": -1}, "bench_records.Records.time_fromstring_formats_as_list": {"code": "class Records:\n    def time_fromstring_formats_as_list(self):\n        np.core.records.fromstring(self.buffer, formats=self.formats)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number", "min_run_count": 2, "name": "bench_records.Records.time_fromstring_formats_as_list", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "44623a8f23a4a6d5f9e6fd58862f0f43ffa66d92b1dc983b93c1c5d4ca04b939", "warmup_time": -1}, "bench_records.Records.time_fromstring_formats_as_string": {"code": "class Records:\n    def time_fromstring_formats_as_string(self):\n        np.core.records.fromstring(self.buffer, formats=self.formats_str)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number", "min_run_count": 2, "name": "bench_records.Records.time_fromstring_formats_as_string", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e9e4abd8a0616b036d2d91c9f40cf36ae088fee51103890a20583acf8edc9496", "warmup_time": -1}, "bench_records.Records.time_fromstring_w_dtype": {"code": "class Records:\n    def time_fromstring_w_dtype(self):\n        np.core.records.fromstring(self.buffer, dtype=self.dtype_)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number", "min_run_count": 2, "name": "bench_records.Records.time_fromstring_w_dtype", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "788e2036232e1c48d6ed7b1c95326e4007fa638fa1d38a9935a20bb4ffc0b501", "warmup_time": -1}, "bench_reduce.AddReduce.time_axis_0": {"code": "class AddReduce:\n    def time_axis_0(self):\n        [np.add.reduce(a, axis=0) for a in self.squares]\n\n    def setup(self):\n        self.squares = get_squares().values()", "min_run_count": 2, "name": "bench_reduce.AddReduce.time_axis_0", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2af9934f0fbbc8408edad22dfb037bd0861b919664055e5fe609f4058bffd1d9", "warmup_time": -1}, "bench_reduce.AddReduce.time_axis_1": {"code": "class AddReduce:\n    def time_axis_1(self):\n        [np.add.reduce(a, axis=1) for a in self.squares]\n\n    def setup(self):\n        self.squares = get_squares().values()", "min_run_count": 2, "name": "bench_reduce.AddReduce.time_axis_1", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9e926386f8f433cfbcbea78e95c4f2cb3755951748b965430ab5e407be5d4b66", "warmup_time": -1}, "bench_reduce.AddReduceSeparate.time_reduce": {"code": "class AddReduceSeparate:\n    def time_reduce(self, axis, typename):\n        np.add.reduce(self.a, axis=axis)\n\n    def setup(self, axis, typename):\n        self.a = get_squares()[typename]", "min_run_count": 2, "name": "bench_reduce.AddReduceSeparate.time_reduce", "number": 0, "param_names": ["axis", "type"], "params": [["0", "1"], ["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9fe950161a3a7c6883be4205a98ad6f3b268adcb3448bb900588c9a05f1b4d41", "warmup_time": -1}, "bench_reduce.AnyAll.time_all_fast": {"code": "class AnyAll:\n    def time_all_fast(self):\n        self.zeros.all()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 1, bool)", "min_run_count": 2, "name": "bench_reduce.AnyAll.time_all_fast", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "337055e8376d23b58323da5853a1ce18e7025e49c95efd41d01732d37a916411", "warmup_time": -1}, "bench_reduce.AnyAll.time_all_slow": {"code": "class AnyAll:\n    def time_all_slow(self):\n        self.ones.all()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 1, bool)", "min_run_count": 2, "name": "bench_reduce.AnyAll.time_all_slow", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9e00fb89e58c9b2b417aa7e9a7920769076051c19ff0c466ae4aab094bdb5dc3", "warmup_time": -1}, "bench_reduce.AnyAll.time_any_fast": {"code": "class AnyAll:\n    def time_any_fast(self):\n        self.ones.any()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 1, bool)", "min_run_count": 2, "name": "bench_reduce.AnyAll.time_any_fast", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1bed9465b7afde4e6e437837f60b2b4315f05e9186392b2df64a3ecfd4fb8b98", "warmup_time": -1}, "bench_reduce.AnyAll.time_any_slow": {"code": "class AnyAll:\n    def time_any_slow(self):\n        self.zeros.any()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 1, bool)", "min_run_count": 2, "name": "bench_reduce.AnyAll.time_any_slow", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fdb7e7815fcaa4c4c0a8613bdd1f28b855d03f3732f123a144a613fcaa23d01f", "warmup_time": -1}, "bench_reduce.ArgMax.time_argmax": {"code": "class ArgMax:\n    def time_argmax(self, dtype):\n        np.argmax(self.d)\n\n    def setup(self, dtype):\n        self.d = np.zeros(200000, dtype=dtype)", "min_run_count": 2, "name": "bench_reduce.ArgMax.time_argmax", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>", "<class 'bool'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2843a21fe3f8f99974c2c8e3ea2c53595d3246781016dfc14abd6116d720ba5e", "warmup_time": -1}, "bench_reduce.FMinMax.time_max": {"code": "class FMinMax:\n    def time_max(self, dtype):\n        np.fmax.reduce(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_reduce.FMinMax.time_max", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "3fedfd780a61cfbd72db31664ca87b48f7046888915accac1229b660d9226fb0", "warmup_time": -1}, "bench_reduce.FMinMax.time_min": {"code": "class FMinMax:\n    def time_min(self, dtype):\n        np.fmin.reduce(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_reduce.FMinMax.time_min", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "28ddb46378c2fad1fdfb475f928b1e3763f86a66ae792daabe87f2828c53db81", "warmup_time": -1}, "bench_reduce.MinMax.time_max": {"code": "class MinMax:\n    def time_max(self, dtype):\n        np.max(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_reduce.MinMax.time_max", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.int8'>", "<class 'numpy.uint8'>", "<class 'numpy.int16'>", "<class 'numpy.uint16'>", "<class 'numpy.int32'>", "<class 'numpy.uint32'>", "<class 'numpy.int64'> (0)", "<class 'numpy.uint64'>", "<class 'numpy.float32'>", "<class 'numpy.float64'>", "<class 'numpy.int64'> (1)"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "514f3cab642bc43d526e91045a6374f6aca5840683583600a5d8cbe85fb787dc", "warmup_time": -1}, "bench_reduce.MinMax.time_min": {"code": "class MinMax:\n    def time_min(self, dtype):\n        np.min(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_reduce.MinMax.time_min", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.int8'>", "<class 'numpy.uint8'>", "<class 'numpy.int16'>", "<class 'numpy.uint16'>", "<class 'numpy.int32'>", "<class 'numpy.uint32'>", "<class 'numpy.int64'> (0)", "<class 'numpy.uint64'>", "<class 'numpy.float32'>", "<class 'numpy.float64'>", "<class 'numpy.int64'> (1)"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e6b22576b375226197a12de92f4a1cc57b3559e74d1fffbf7c304ae08ead1283", "warmup_time": -1}, "bench_reduce.SmallReduction.time_small": {"code": "class SmallReduction:\n    def time_small(self):\n        np.sum(self.d)\n\n    def setup(self):\n        self.d = np.ones(100, dtype=np.float32)", "min_run_count": 2, "name": "bench_reduce.SmallReduction.time_small", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6c036bc421f0fb669164ceb2814d8765d6f3a6c7c38f5e2e55a3fc00945c9468", "warmup_time": -1}, "bench_scalar.ScalarMath.time_abs": {"code": "class ScalarMath:\n    def time_abs(self, typename):\n        n = self.num\n        res = abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(n))))))))))\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)", "min_run_count": 2, "name": "bench_scalar.ScalarMath.time_abs", "number": 0, "param_names": ["type"], "params": [["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4455712cecc7a36b6664d8435041d88c8385b150426edf80c9652d713090d59e", "warmup_time": -1}, "bench_scalar.ScalarMath.time_addition": {"code": "class ScalarMath:\n    def time_addition(self, typename):\n        n = self.num\n        res = n + n + n + n + n + n + n + n + n + n\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)", "min_run_count": 2, "name": "bench_scalar.ScalarMath.time_addition", "number": 0, "param_names": ["type"], "params": [["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "9338cca1a13271882005f3af2b833860de23437ced9888d5237592a45a47ca42", "warmup_time": -1}, "bench_scalar.ScalarMath.time_addition_pyint": {"code": "class ScalarMath:\n    def time_addition_pyint(self, typename):\n        n = self.num\n        res = n + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)", "min_run_count": 2, "name": "bench_scalar.ScalarMath.time_addition_pyint", "number": 0, "param_names": ["type"], "params": [["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8687771d39a17bf8ba6048fde6c27b589dd90ff44366e42f474bb80f86777a4f", "warmup_time": -1}, "bench_scalar.ScalarMath.time_multiplication": {"code": "class ScalarMath:\n    def time_multiplication(self, typename):\n        n = self.num\n        res = n * n * n * n * n * n * n * n * n * n\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)", "min_run_count": 2, "name": "bench_scalar.ScalarMath.time_multiplication", "number": 0, "param_names": ["type"], "params": [["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "82e5f176831c477ac6b64f1f6ad36287503a6828c01cfb418988e51da57dfabf", "warmup_time": -1}, "bench_scalar.ScalarMath.time_power_of_two": {"code": "class ScalarMath:\n    def time_power_of_two(self, typename):\n        n = self.num\n        res = n**2, n**2, n**2, n**2, n**2, n**2, n**2, n**2, n**2, n**2\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)", "min_run_count": 2, "name": "bench_scalar.ScalarMath.time_power_of_two", "number": 0, "param_names": ["type"], "params": [["'int16'", "'float16'", "'int32'", "'float32'", "'int64'", "'float64'", "'complex64'", "'longfloat'", "'complex128'", "'complex256'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0dc2bcfb77ec9b5825169520f9b946b72a87d72a8b6d909fbb58cb728e29ab08", "warmup_time": -1}, "bench_shape_base.Block.time_3d": {"code": "class Block3D:\n    def time_3d(self, n, mode):\n        if mode == 'block':\n            np.block(self.block)\n        else:  # mode == 'copy'\n            [arr.copy() for arr in self.arr_list]\n\n    def setup(self, n, mode):\n        # Slow setup method: hence separated from the others above\n        self.a000 = np.ones((2 * n, 2 * n, 2 * n), int) * 1\n    \n        self.a100 = np.ones((3 * n, 2 * n, 2 * n), int) * 2\n        self.a010 = np.ones((2 * n, 3 * n, 2 * n), int) * 3\n        self.a001 = np.ones((2 * n, 2 * n, 3 * n), int) * 4\n    \n        self.a011 = np.ones((2 * n, 3 * n, 3 * n), int) * 5\n        self.a101 = np.ones((3 * n, 2 * n, 3 * n), int) * 6\n        self.a110 = np.ones((3 * n, 3 * n, 2 * n), int) * 7\n    \n        self.a111 = np.ones((3 * n, 3 * n, 3 * n), int) * 8\n    \n        self.block = [\n            [\n                [self.a000, self.a001],\n                [self.a010, self.a011],\n            ],\n            [\n                [self.a100, self.a101],\n                [self.a110, self.a111],\n            ]\n        ]\n        self.arr_list = [a\n                         for two_d in self.block\n                         for one_d in two_d\n                         for a in one_d]", "min_run_count": 2, "name": "bench_shape_base.Block.time_3d", "number": 0, "param_names": ["n", "mode"], "params": [["1", "10", "100"], ["'block'", "'copy'"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b9a48960b73fb3f85bfc2dc0e571c65492e2e23f6ba46efdbaa83c229a840ed3", "warmup_time": -1}, "bench_shape_base.Block.time_block_complicated": {"code": "class Block:\n    def time_block_complicated(self, n):\n        np.block([[self.one_2d, self.two_2d],\n                  [self.three_2d],\n                  [self.four_1d],\n                  [self.five_0d, self.six_1d],\n                  [self.zero_2d]])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_block_complicated", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f5020e81ec4b44cc8c43385d45447eb00773324ed075f3e140a83e6deea1b5b1", "warmup_time": -1}, "bench_shape_base.Block.time_block_simple_column_wise": {"code": "class Block:\n    def time_block_simple_column_wise(self, n):\n        np.block([[self.a_2d], [self.b_2d]])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_block_simple_column_wise", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ace4adce497cb59167431a3cb0e9336e9a4ca74c5a028728f072cb377034afac", "warmup_time": -1}, "bench_shape_base.Block.time_block_simple_row_wise": {"code": "class Block:\n    def time_block_simple_row_wise(self, n):\n        np.block([self.a_2d, self.b_2d])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_block_simple_row_wise", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7e68cd3ac85d87ea0960b4e3480f3447d612752cc5da0d8e622d44883521fb9a", "warmup_time": -1}, "bench_shape_base.Block.time_nested": {"code": "class Block:\n    def time_nested(self, n):\n        np.block([\n            [\n                np.block([\n                   [self.one],\n                   [self.three],\n                   [self.four]\n                ]),\n                self.two\n            ],\n            [self.five, self.six],\n            [self.zero]\n        ])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_nested", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "76a91fd4afc8a0e86b6afd79d5f3ea4ecd9fbbef884ae0500b470509e9e8b67e", "warmup_time": -1}, "bench_shape_base.Block.time_no_lists": {"code": "class Block:\n    def time_no_lists(self, n):\n        np.block(1)\n        np.block(np.eye(3 * n))\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)", "min_run_count": 2, "name": "bench_shape_base.Block.time_no_lists", "number": 0, "param_names": ["size"], "params": [["1", "10", "100"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6bc26f65802cda859473d4bbdd7c111e5084ace7bd39cca0c9ca3aad06eee9ea", "warmup_time": -1}, "bench_shape_base.Block2D.time_block2d": {"code": "class Block2D:\n    def time_block2d(self, shape, dtype, n_chunks):\n        np.block(self.block_list)\n\n    def setup(self, shape, dtype, n_chunks):\n    \n        self.block_list = [\n             [np.full(shape=[s//n_chunk for s, n_chunk in zip(shape, n_chunks)],\n                     fill_value=1, dtype=dtype) for _ in range(n_chunks[1])]\n            for _ in range(n_chunks[0])\n        ]", "min_run_count": 2, "name": "bench_shape_base.Block2D.time_block2d", "number": 0, "param_names": ["shape", "dtype", "n_chunks"], "params": [["(16, 16)", "(32, 32)", "(64, 64)", "(128, 128)", "(256, 256)", "(512, 512)", "(1024, 1024)"], ["'uint8'", "'uint16'", "'uint32'", "'uint64'"], ["(2, 2)", "(4, 4)"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "93de8827eb35255e1f0daea4c5054d670f73b0c62c2cb54fc42a81e29c851ea8", "warmup_time": -1}, "bench_trim_zeros.TrimZeros.time_trim_zeros": {"code": "class TrimZeros:\n    def time_trim_zeros(self, dtype, size):\n        np.trim_zeros(self.array)\n\n    def setup(self, dtype, size):\n        n = size // 3\n        self.array = np.hstack([\n            np.zeros(n),\n            np.random.uniform(size=n),\n            np.zeros(n),\n        ]).astype(dtype)", "min_run_count": 2, "name": "bench_trim_zeros.TrimZeros.time_trim_zeros", "number": 0, "param_names": ["dtype", "size"], "params": [["dtype('int64')", "dtype('float64')", "dtype('complex128')", "dtype('bool')"], ["3000", "30000", "300000"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "aa967874dea8e59b67e272fc23171647622694eafb5361945f785d17500097c3", "warmup_time": -1}, "bench_ufunc.ArgParsing.time_add_arg_parsing": {"code": "class ArgParsing:\n    def time_add_arg_parsing(self, arg_pack):\n        np.add(*arg_pack.args, **arg_pack.kwargs)", "min_run_count": 2, "name": "bench_ufunc.ArgParsing.time_add_arg_parsing", "number": 0, "param_names": ["arg_kwarg"], "params": [["(array(1.), array(2.))", "(array(1.), array(2.), array(3.))", "(array(1.), array(2.), out=array(3.))", "(array(1.), array(2.), out=(array(3.),))", "(array(1.), array(2.), out=array(3.), subok=True, where=True)", "(array(1.), array(2.), subok=True)", "(array(1.), array(2.), subok=True, where=True)", "(array(1.), array(2.), array(3.), subok=True, where=True)"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7f8c98d0d3e4d48d2e4c78bc17a51a7d437b9b658ebf673e6829d145b6f109ce", "warmup_time": -1}, "bench_ufunc.ArgParsingReduce.time_add_reduce_arg_parsing": {"code": "class ArgParsingReduce:\n    def time_add_reduce_arg_parsing(self, arg_pack):\n        np.add.reduce(*arg_pack.args, **arg_pack.kwargs)", "min_run_count": 2, "name": "bench_ufunc.ArgParsingReduce.time_add_reduce_arg_parsing", "number": 0, "param_names": ["arg_kwarg"], "params": [["(array([0., 1.]))", "(array([0., 1.]), 0)", "(array([0., 1.]), axis=0)", "(array([0., 1.]), 0, None)", "(array([0., 1.]), axis=0, dtype=None)", "(array([0., 1.]), 0, None, array(0.))", "(array([0., 1.]), axis=0, dtype=None, out=array(0.))", "(array([0., 1.]), out=array(0.))"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ad65096c8033c570321d0bbb8effaa15bce7a6faab47e96c8848d61173fc5b40", "warmup_time": -1}, "bench_ufunc.Broadcast.time_broadcast": {"code": "class Broadcast:\n    def time_broadcast(self):\n        self.d - self.e\n\n    def setup(self):\n        self.d = np.ones((50000, 100), dtype=np.float64)\n        self.e = np.ones((100,), dtype=np.float64)", "min_run_count": 2, "name": "bench_ufunc.Broadcast.time_broadcast", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "131ce9ba025e2d78a4dfdbaf95871da67ac00aac41956c1ad64741a2102ec6c5", "warmup_time": -1}, "bench_ufunc.Custom.time_and_bool": {"code": "class Custom:\n    def time_and_bool(self):\n        (self.b & self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)", "min_run_count": 2, "name": "bench_ufunc.Custom.time_and_bool", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a86867e3b34ed9b571d5ef3232fb916555165cd1f489297b101f04a727403281", "warmup_time": -1}, "bench_ufunc.Custom.time_nonzero": {"code": "class Custom:\n    def time_nonzero(self):\n        np.nonzero(self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)", "min_run_count": 2, "name": "bench_ufunc.Custom.time_nonzero", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a2bfcc4d1a399fb5b9457fa59e9d2c10beefaeb8109557be1756181651549625", "warmup_time": -1}, "bench_ufunc.Custom.time_not_bool": {"code": "class Custom:\n    def time_not_bool(self):\n        (~self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)", "min_run_count": 2, "name": "bench_ufunc.Custom.time_not_bool", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "fabc3a193c9287d44cf4cff6d9352e67d1261c1a605327d0d5f5d29af1cc3b5c", "warmup_time": -1}, "bench_ufunc.Custom.time_or_bool": {"code": "class Custom:\n    def time_or_bool(self):\n        (self.b | self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)", "min_run_count": 2, "name": "bench_ufunc.Custom.time_or_bool", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d8cc3603bfff2d105d4e8d30e48ffa58120a715cf2920d7831270952b719b429", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_char_or": {"code": "class CustomInplace:\n    def time_char_or(self):\n        np.bitwise_or(self.c, 0, out=self.c)\n        np.bitwise_or(0, self.c, out=self.c)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_char_or", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "e17e62b7756bffe100ff86408f24dcfb06a25b928f488c08f96ef0db5607f861", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_char_or_temp": {"code": "class CustomInplace:\n    def time_char_or_temp(self):\n        0 | self.c | 0\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_char_or_temp", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1be81c7b7584c25261a4190fbfcf024b7b724516f69cad112327ad0d40e5476e", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_double_add": {"code": "class CustomInplace:\n    def time_double_add(self):\n        np.add(self.d, 1., out=self.d)\n        np.add(1., self.d, out=self.d)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_double_add", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "f19662f4a311fc929de94204a4b67241b1bb5ccf947f71bac733c613ee769865", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_double_add_temp": {"code": "class CustomInplace:\n    def time_double_add_temp(self):\n        1. + self.d + 1.\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_double_add_temp", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1e74700f4180455a4703910e2f5c4fda2ebd6ee1401a18d1a1ca8f093f3710e3", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_float_add": {"code": "class CustomInplace:\n    def time_float_add(self):\n        np.add(self.f, 1., out=self.f)\n        np.add(1., self.f, out=self.f)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_float_add", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b11f548bdfbecba94fc50571119e32ffe7d6d2bbab330966d2acd80a91550b51", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_float_add_temp": {"code": "class CustomInplace:\n    def time_float_add_temp(self):\n        1. + self.f + 1.\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_float_add_temp", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "715b0deebbb271f4d643d0575a3b913ed3729b2562da829c102f64b902f3de4d", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_int_or": {"code": "class CustomInplace:\n    def time_int_or(self):\n        np.bitwise_or(self.i, 0, out=self.i)\n        np.bitwise_or(0, self.i, out=self.i)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_int_or", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1e6eb0dc45e0d0d9a3dddce986d8940c73e4771e5e80bebc25eef75022122950", "warmup_time": -1}, "bench_ufunc.CustomInplace.time_int_or_temp": {"code": "class CustomInplace:\n    def time_int_or_temp(self):\n        0 | self.i | 0\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.", "min_run_count": 2, "name": "bench_ufunc.CustomInplace.time_int_or_temp", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8892315dfcc7e6bf5be252fc352286cca4e2b317312e17686096539d1ca30496", "warmup_time": -1}, "bench_ufunc.CustomScalar.time_add_scalar2": {"code": "class CustomScalar:\n    def time_add_scalar2(self, dtype):\n        np.add(self.d, 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalar.time_add_scalar2", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6c5ed02e001dd9bafa33d7f7b38ceb98abf8cdf8467193e7c0f53f94cf1bbc81", "warmup_time": -1}, "bench_ufunc.CustomScalar.time_divide_scalar2": {"code": "class CustomScalar:\n    def time_divide_scalar2(self, dtype):\n        np.divide(self.d, 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalar.time_divide_scalar2", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "c32304caa2530a08b1034bd1ca4e575a5b9349681d9dde77b5994b93d5898994", "warmup_time": -1}, "bench_ufunc.CustomScalar.time_divide_scalar2_inplace": {"code": "class CustomScalar:\n    def time_divide_scalar2_inplace(self, dtype):\n        np.divide(self.d, 1, out=self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalar.time_divide_scalar2_inplace", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "64e072c5d7cf47aa563db42bf4dea71a999c35f748b3f79a086af9c7cb266c92", "warmup_time": -1}, "bench_ufunc.CustomScalar.time_less_than_scalar2": {"code": "class CustomScalar:\n    def time_less_than_scalar2(self, dtype):\n        (self.d < 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalar.time_less_than_scalar2", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "43e21cdb587cd06cf289354bcb31a9856168b6822ed5b5e599736c5c280aa660", "warmup_time": -1}, "bench_ufunc.CustomScalarFloorDivideInt.time_floor_divide_int": {"code": "class CustomScalarFloorDivideInt:\n    def time_floor_divide_int(self, dtype, divisor):\n        self.x // divisor\n\n    def setup(self, dtype, divisor):\n        if dtype in np.sctypes['uint'] and divisor < 0:\n            raise NotImplementedError(\n                    \"Skipping test for negative divisor with unsigned type\")\n    \n        iinfo = np.iinfo(dtype)\n        self.x = np.random.randint(\n                    iinfo.min, iinfo.max, size=10000, dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc.CustomScalarFloorDivideInt.time_floor_divide_int", "number": 0, "param_names": ["dtype", "divisors"], "params": [["<class 'numpy.int8'>", "<class 'numpy.int16'>", "<class 'numpy.int32'>", "<class 'numpy.int64'>", "<class 'numpy.uint8'>", "<class 'numpy.uint16'>", "<class 'numpy.uint32'>", "<class 'numpy.uint64'>"], ["8", "-8", "43", "-43"]], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4117e9cbb8ab1f8d3e10999fe2126e38f22fe26fc9ed7e2be2fd67824998d6eb", "warmup_time": -1}, "bench_ufunc.Scalar.time_add_scalar": {"code": "class Scalar:\n    def time_add_scalar(self):\n        (self.x + self.x)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)", "min_run_count": 2, "name": "bench_ufunc.Scalar.time_add_scalar", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eb95fd29e2ab6b42cbf524521b2f2318da4375c69e9eb9bd9367c5e2b2a30ea3", "warmup_time": -1}, "bench_ufunc.Scalar.time_add_scalar_conv": {"code": "class Scalar:\n    def time_add_scalar_conv(self):\n        (self.x + 1.0)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)", "min_run_count": 2, "name": "bench_ufunc.Scalar.time_add_scalar_conv", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bbf133739c730b558f163bfa0a41965f82312794363f18948bd93de0cdefc11a", "warmup_time": -1}, "bench_ufunc.Scalar.time_add_scalar_conv_complex": {"code": "class Scalar:\n    def time_add_scalar_conv_complex(self):\n        (self.y + self.z)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)", "min_run_count": 2, "name": "bench_ufunc.Scalar.time_add_scalar_conv_complex", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ca23715a82f5300e9537e32b5a25944d9c56e195013449e49701a86f2600b87e", "warmup_time": -1}, "bench_ufunc.UFunc.time_ufunc_types": {"code": "class UFunc:\n    def time_ufunc_types(self, ufuncname):\n        [self.f(*arg) for arg in self.args]\n\n    def setup(self, ufuncname):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, ufuncname)\n        except AttributeError:\n            raise NotImplementedError()\n        self.args = []\n        for t, a in get_squares_().items():\n            arg = (a,) * self.f.nin\n            try:\n                self.f(*arg)\n            except TypeError:\n                continue\n            self.args.append(arg)", "min_run_count": 2, "name": "bench_ufunc.UFunc.time_ufunc_types", "number": 0, "param_names": ["ufunc"], "params": [["'abs'", "'absolute'", "'add'", "'arccos'", "'arccosh'", "'arcsin'", "'arcsinh'", "'arctan'", "'arctan2'", "'arctanh'", "'bitwise_and'", "'bitwise_not'", "'bitwise_or'", "'bitwise_xor'", "'cbrt'", "'ceil'", "'conj'", "'conjugate'", "'copysign'", "'cos'", "'cosh'", "'deg2rad'", "'degrees'", "'divide'", "'divmod'", "'equal'", "'exp'", "'exp2'", "'expm1'", "'fabs'", "'float_power'", "'floor'", "'floor_divide'", "'fmax'", "'fmin'", "'fmod'", "'frexp'", "'gcd'", "'greater'", "'greater_equal'", "'heaviside'", "'hypot'", "'invert'", "'isfinite'", "'isinf'", "'isnan'", "'isnat'", "'lcm'", "'ldexp'", "'left_shift'", "'less'", "'less_equal'", "'log'", "'log10'", "'log1p'", "'log2'", "'logaddexp'", "'logaddexp2'", "'logical_and'", "'logical_not'", "'logical_or'", "'logical_xor'", "'matmul'", "'maximum'", "'minimum'", "'mod'", "'modf'", "'multiply'", "'negative'", "'nextafter'", "'not_equal'", "'positive'", "'power'", "'rad2deg'", "'radians'", "'reciprocal'", "'remainder'", "'right_shift'", "'rint'", "'sign'", "'signbit'", "'sin'", "'sinh'", "'spacing'", "'sqrt'", "'square'", "'subtract'", "'tan'", "'tanh'", "'true_divide'", "'trunc'"]], "rounds": 2, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "5e9a778c538969f78e1a50b387862004b9261c57231bd40e2b48ff4b647e46d8", "warmup_time": -1}, "bench_ufunc_strides.AVX_UFunc_log.time_log": {"code": "class AVX_UFunc_log:\n    def time_log(self, stride, dtype):\n        np.log(self.arr[::stride])\n\n    def setup(self, stride, dtype):\n        np.seterr(all='ignore')\n        N = 10000\n        self.arr = np.array(np.random.random_sample(stride*N), dtype=dtype)", "min_run_count": 2, "name": "bench_ufunc_strides.AVX_UFunc_log.time_log", "number": 0, "param_names": ["stride", "dtype"], "params": [["1", "2", "4"], ["'f'", "'d'"]], "rounds": 2, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "758b2c2d627de74fb1523a7612f0bc5575388c40d22107bcee8e49ecb7cbbfd4", "warmup_time": -1}, "bench_ufunc_strides.AVX_cmplx_arithmetic.time_ufunc": {"code": "class AVX_cmplx_arithmetic:\n    def time_ufunc(self, bfuncname, stride, dtype):\n        self.f(self.arr1[::stride], self.arr2[::stride])\n\n    def setup(self, bfuncname, stride, dtype):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, bfuncname)\n        except AttributeError:\n            raise NotImplementedError(f\"No bfunc {bfuncname} found\") from None\n        N = 10000\n        self.arr1 = np.ones(stride*N, dtype)\n        self.arr2 = np.ones(stride*N, dtype)", "min_run_count": 2, "name": "bench_ufunc_strides.AVX_cmplx_arithmetic.time_ufunc", "number": 0, "param_names": ["bfunc", "stride", "dtype"], "params": [["'add'", "'subtract'", "'multiply'", "'divide'"], ["1", "2", "4"], ["'F'", "'D'"]], "rounds": 2, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "6d182e83551b08781041f2192c70fd0ed7cafbb3bd3492a45cc7064da1b49319", "warmup_time": -1}, "bench_ufunc_strides.AVX_cmplx_funcs.time_ufunc": {"code": "class AVX_cmplx_funcs:\n    def time_ufunc(self, bfuncname, stride, dtype):\n        self.f(self.arr1[::stride])\n\n    def setup(self, bfuncname, stride, dtype):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, bfuncname)\n        except AttributeError:\n            raise NotImplementedError(f\"No bfunc {bfuncname} found\") from None\n        N = 10000\n        self.arr1 = np.ones(stride*N, dtype)", "min_run_count": 2, "name": "bench_ufunc_strides.AVX_cmplx_funcs.time_ufunc", "number": 0, "param_names": ["bfunc", "stride", "dtype"], "params": [["'reciprocal'", "'absolute'", "'square'", "'conjugate'"], ["1", "2", "4"], ["'F'", "'D'"]], "rounds": 2, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "c512db7e180ac3a2a2b566dc24527d74e5cbf2afe29b1f3bee89b00127ee699b", "warmup_time": -1}, "bench_ufunc_strides.AVX_ldexp.time_ufunc": {"code": "class AVX_ldexp:\n    def time_ufunc(self, dtype, stride):\n        self.f(self.arr1[::stride], self.arr2[::stride])\n\n    def setup(self, dtype, stride):\n        np.seterr(all='ignore')\n        self.f = getattr(np, 'ldexp')\n        N = 10000\n        self.arr1 = np.array(np.random.rand(stride*N), dtype=dtype)\n        self.arr2 = np.array(np.random.rand(stride*N), dtype='i')", "min_run_count": 2, "name": "bench_ufunc_strides.AVX_ldexp.time_ufunc", "number": 0, "param_names": ["dtype", "stride"], "params": [["'f'", "'d'"], ["1", "2", "4"]], "rounds": 2, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "7b1485348542d48680da2c54ca6f3126661e7a3df7bc726f193d3961f6708ebe", "warmup_time": -1}, "bench_ufunc_strides.Binary.time_ufunc": {"code": "class Binary:\n    def time_ufunc(self, ufuncname, stride_in0, stride_in1, stride_out, dtype):\n        self.f(self.arr1[::stride_in0], self.arr2[::stride_in1],\n               self.arr_out[::stride_out])\n\n    def setup(self, ufuncname, stride_in0, stride_in1, stride_out, dtype):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, ufuncname)\n        except AttributeError:\n            raise NotImplementedError(f\"No ufunc {ufuncname} found\") from None\n        N = 100000\n        self.arr1 = np.array(np.random.rand(stride_in0*N), dtype=dtype)\n        self.arr2 = np.array(np.random.rand(stride_in1*N), dtype=dtype)\n        self.arr_out = np.empty(stride_out*N, dtype)", "min_run_count": 2, "name": "bench_ufunc_strides.Binary.time_ufunc", "number": 0, "param_names": ["ufunc", "stride_in0", "stride_in1", "stride_out", "dtype"], "params": [["'maximum'", "'minimum'", "'fmax'", "'fmin'"], ["1", "2", "4"], ["1", "2", "4"], ["1", "2", "4"], ["'f'", "'d'"]], "rounds": 2, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "a9e6a1fbda7b38a42e8a0945997c932755d443c026f20c83105618342c0d8836", "warmup_time": -1}, "bench_ufunc_strides.BinaryInt.time_ufunc": {"code": "class Binary:\n    def time_ufunc(self, ufuncname, stride_in0, stride_in1, stride_out, dtype):\n        self.f(self.arr1[::stride_in0], self.arr2[::stride_in1],\n               self.arr_out[::stride_out])\n\n    def setup(self, ufuncname, stride_in0, stride_in1, stride_out, dtype):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, ufuncname)\n        except AttributeError:\n            raise NotImplementedError(f\"No ufunc {ufuncname} found\") from None\n        N = 100000\n        self.arr1 = np.array(np.random.rand(stride_in0*N), dtype=dtype)\n        self.arr2 = np.array(np.random.rand(stride_in1*N), dtype=dtype)\n        self.arr_out = np.empty(stride_out*N, dtype)", "min_run_count": 2, "name": "bench_ufunc_strides.BinaryInt.time_ufunc", "number": 0, "param_names": ["ufunc", "stride_in0", "stride_in1", "stride_out", "dtype"], "params": [["'maximum'", "'minimum'"], ["1", "2", "4"], ["1", "2", "4"], ["1", "2", "4"], ["'b'", "'B'", "'h'", "'H'", "'i'", "'I'", "'l'", "'L'", "'q'", "'Q'"]], "rounds": 2, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "a9e6a1fbda7b38a42e8a0945997c932755d443c026f20c83105618342c0d8836", "warmup_time": -1}, "bench_ufunc_strides.LogisticRegression.time_train": {"code": "class LogisticRegression:\n    def time_train(self, dtype):\n        self.train(1000)\n\n    def setup(self, dtype):\n        np.random.seed(42)\n        self.size = 250\n        features = 16\n        self.X_train = np.random.rand(self.size,features).astype(dtype)\n        self.Y_train = np.random.choice(2,self.size).astype(dtype)\n        # Initialize weights\n        self.W = np.zeros((features,1), dtype=dtype)\n        self.b = np.zeros((1,1), dtype=dtype)\n        self.alpha = 0.1", "min_run_count": 2, "name": "bench_ufunc_strides.LogisticRegression.time_train", "number": 0, "param_names": ["dtype"], "params": [["<class 'numpy.float32'>", "<class 'numpy.float64'>"]], "rounds": 2, "sample_time": 0.01, "timeout": 1000, "type": "time", "unit": "seconds", "version": "e86e16eb2784715dd92cc28fe3cf3d4b7cd03bbfb23570674abc1d06d35e8505", "warmup_time": -1}, "bench_ufunc_strides.Mandelbrot.time_mandel": {"code": "class Mandelbrot:\n    def time_mandel(self):\n        self.mandelbrot_set(-0.74877,-0.74872,0.06505,0.06510,1000,1000,2048)", "min_run_count": 2, "name": "bench_ufunc_strides.Mandelbrot.time_mandel", "number": 0, "param_names": [], "params": [], "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "74f62bffab8b9720277f099c1fb8d06c8eb635599e335a58345cf121cd5a7b59", "warmup_time": -1}, "bench_ufunc_strides.Unary.time_ufunc": {"code": "class Unary:\n    def time_ufunc(self, ufuncname, stride, stride_out, dtype):\n        self.f(self.arr[::stride], self.arr_out[::stride_out])\n\n    def setup(self, ufuncname, stride, stride_out, dtype):\n        np.seterr(all='ignore')\n        try:\n            self.f = ufuncname\n        except AttributeError:\n            raise NotImplementedError(f\"No ufunc {ufuncname} found\") from None\n        N = 100000\n        self.arr_out = np.empty(stride_out*N, dtype)\n        self.arr = np.random.rand(stride*N).astype(dtype)\n        if (ufuncname.__name__ == 'arccosh'):\n            self.arr = 1.0 + self.arr", "min_run_count": 2, "name": "bench_ufunc_strides.Unary.time_ufunc", "number": 0, "param_names": ["ufunc", "stride_in", "stride_out", "dtype"], "params": [["<ufunc 'absolute'>", "<ufunc 'arccos'>", "<ufunc 'arccosh'>", "<ufunc 'arcsin'>", "<ufunc 'arcsinh'>", "<ufunc 'arctan'>", "<ufunc 'arctanh'>", "<ufunc 'cbrt'>", "<ufunc 'ceil'>", "<ufunc 'conjugate'> (0)", "<ufunc 'cos'>", "<ufunc 'cosh'>", "<ufunc 'deg2rad'>", "<ufunc 'degrees'>", "<ufunc 'exp'>", "<ufunc 'exp2'>", "<ufunc 'expm1'>", "<ufunc 'fabs'>", "<ufunc 'floor'>", "<ufunc 'log'>", "<ufunc 'log10'>", "<ufunc 'log1p'>", "<ufunc 'log2'>", "<ufunc 'logical_not'>", "<ufunc 'negative'>", "<ufunc 'positive'>", "<ufunc 'rad2deg'>", "<ufunc 'radians'>", "<ufunc 'reciprocal'>", "<ufunc 'rint'>", "<ufunc 'sign'>", "<ufunc 'sin'>", "<ufunc 'sinh'>", "<ufunc 'sqrt'>", "<ufunc 'square'>", "<ufunc 'tan'>", "<ufunc 'tanh'>", "<ufunc 'trunc'>", "<ufunc 'conjugate'> (1)", "<ufunc '_ones_like'>"], ["1", "2", "4"], ["1", "2", "4"], ["'f'", "'d'"]], "rounds": 2, "sample_time": 0.01, "timeout": 10, "type": "time", "unit": "seconds", "version": "bafb7199f7f833abd6676b607042ae3191aedad2b0adbe2dd293b742a9fe5222", "warmup_time": -1}}, "machines": {"i7": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7 CPU 920 @ 2.67GHz", "machine": "i7", "num_cpu": "8", "os": "Linux", "ram": "16416652", "version": 1}, "atom": {"arch": "x86_64", "cpu": "Intel(R) Atom(TM) CPU N2800   @ 1.86GHz", "machine": "atom", "os": "Linux 3.16.0-4-amd64", "ram": "4041288", "version": 1}}, "tags": {"enable_separate_by_default": 10683, "pre-removal-numpybook": 13148, "v0.2.0": 42, "v0.2.2": 740, "v0.3.0": 760, "v0.3.2": 871, "v0.4.2b1": 1215, "v0.6.0": 1435, "v0.6.1": 1441, "v0.8.4": 1591, "v0.9.2": 1767, "v0.9.4": 1916, "v0.9.5": 2054, "v0.9.6": 2167, "v0.9.8": 2472, "v1.0": 3290, "v1.0.1": 3366, "v1.0.2": 3543, "v1.0.3": 3724, "v1.0.3.1": 3846, "v1.0.4": 3983, "v1.0b1": 2788, "v1.0b2": 2916, "v1.0b3": 2949, "v1.0b4": 2986, "v1.0b5": 3015, "v1.0rc1": 3096, "v1.0rc2": 3192, "v1.0rc3": 3259, "v1.1.0": 4635, "v1.1.0rc1": 4589, "v1.1.1": 4948, "v1.1.1rc1": 4881, "v1.1.1rc2": 4904, "v1.10.0": 15429, "v1.10.0.post2": 15442, "v1.10.0b1": 15167, "v1.10.0rc2": 15380, "v1.10.1": 15495, "v1.10.2": 15898, "v1.10.2rc1": 15747, "v1.10.2rc2": 15860, "v1.10.3": 16072, "v1.10.4": 16076, "v1.11.0": 16687, "v1.11.0b1": 16292, "v1.11.0b2": 16308, "v1.11.0b3": 16415, "v1.11.0rc1": 16528, "v1.11.0rc2": 16649, "v1.11.1": 16985, "v1.11.1rc1": 16881, "v1.11.2": 17276, "v1.11.2rc1": 17223, "v1.11.3": 17559, "v1.12.0": 17657, "v1.12.0b1": 17442, "v1.12.0rc1": 17583, "v1.12.0rc2": 17616, "v1.12.1": 17999, "v1.12.1rc1": 17963, "v1.13.0": 18529, "v1.13.0rc1": 18416, "v1.13.0rc2": 18468, "v1.13.1": 18680, "v1.13.2": 19123, "v1.13.3": 19142, "v1.14.0": 19766, "v1.14.0rc1": 19604, "v1.14.1": 20042, "v1.14.2": 20126, "v1.14.3": 20435, "v1.14.4": 20710, "v1.14.5": 20777, "v1.14.6": 21564, "v1.15.0": 21087, "v1.15.0rc1": 20876, "v1.15.0rc2": 21025, "v1.15.1": 21301, "v1.15.2": 21555, "v1.15.3": 21852, "v1.15.4": 21951, "v1.16.0": 22436, "v1.16.0rc1": 22287, "v1.16.0rc2": 22366, "v1.16.1": 22608, "v1.16.2": 22727, "v1.16.3": 23110, "v1.16.4": 23538, "v1.16.5": 24465, "v1.16.6": 25425, "v1.17.0": 24160, "v1.17.0rc1": 23799, "v1.17.0rc2": 23987, "v1.17.1": 24433, "v1.17.2": 24549, "v1.17.3": 24911, "v1.17.4": 25109, "v1.17.5": 25436, "v1.18.0": 25381, "v1.18.0rc1": 25289, "v1.18.1": 25522, "v1.18.2": 26045, "v1.18.3": 26261, "v1.18.4": 26366, "v1.18.5": 26756, "v1.19.0": 26965, "v1.19.0rc1": 26517, "v1.19.0rc2": 26737, "v1.19.1": 27317, "v1.19.2": 27786, "v1.19.3": 28366, "v1.19.4": 28398, "v1.19.5": 29051, "v1.2.0": 5203, "v1.2.0b1": 4998, "v1.2.0b2": 5005, "v1.2.0rc1": 5090, "v1.2.0rc2": 5144, "v1.2.1": 5277, "v1.20.0": 29306, "v1.20.0rc1": 28709, "v1.20.0rc2": 28986, "v1.20.1": 29461, "v1.20.2": 29992, "v1.20.3": 30440, "v1.21.0": 31011, "v1.21.0.dev0": 28640, "v1.21.0rc1": 30656, "v1.21.0rc2": 30840, "v1.21.1": 31374, "v1.21.2": 31660, "v1.21.3": 32300, "v1.21.4": 32548, "v1.21.5": 33086, "v1.22.0": 33169, "v1.22.0.dev0": 30634, "v1.22.0rc1": 32777, "v1.22.0rc2": 32958, "v1.22.0rc3": 33079, "v1.22.1": 33324, "v1.22.2": 33492, "v1.23.0.dev0": 32693, "v1.3.0": 6111, "v1.3.0b1": 5964, "v1.3.0rc1": 6082, "v1.3.0rc2": 6105, "v1.4.0": 7290, "v1.4.0rc1": 7077, "v1.4.0rc2": 7287, "v1.4.1": 7607, "v1.4.1rc1": 7596, "v1.4.1rc2": 7601, "v1.4.1rc3": 7605, "v1.5.0": 7924, "v1.5.0b1": 7838, "v1.5.0b2": 7900, "v1.5.0rc1": 7919, "v1.5.1": 8094, "v1.5.1rc1": 8049, "v1.5.1rc2": 8077, "v1.6.0": 8765, "v1.6.0b1": 8515, "v1.6.0b2": 8649, "v1.6.0rc1": 8733, "v1.6.0rc2": 8748, "v1.6.0rc3": 8759, "v1.6.1": 9071, "v1.6.1rc1": 8847, "v1.6.1rc2": 8956, "v1.6.1rc3": 9026, "v1.6.2": 9876, "v1.6.2rc1": 9830, "v1.7.0": 10714, "v1.7.0b1": 10100, "v1.7.0b2": 10201, "v1.7.0rc1": 10586, "v1.7.0rc2": 10713, "v1.7.1": 10952, "v1.7.1rc1": 10894, "v1.7.2": 12590, "v1.7.2rc1": 12438, "v1.8.0": 12411, "v1.8.0b1": 11907, "v1.8.0b2": 11963, "v1.8.0rc1": 12166, "v1.8.0rc2": 12280, "v1.8.1": 13266, "v1.8.1rc1": 13048, "v1.8.2": 13799, "v1.8.2rc1": 13794, "v1.9.0": 13918, "v1.9.0b1": 13574, "v1.9.0b2": 13746, "v1.9.0rc1": 13857, "v1.9.1": 14153, "v1.9.1rc1": 14134, "v1.9.2": 14555, "v1.9.2rc1": 14443, "v1.9.3": 15308, "with_maskna": 9952}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}