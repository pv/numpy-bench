{
    "bench_app.LaplaceInplace.time_it": {
        "code": "class LaplaceInplace:\n    def time_it(self, update):\n        self.run()\n\n    def setup(self, update):\n        N = 150\n        Niter = 1000\n        dx = 0.1\n        dy = 0.1\n        dx2 = (dx * dx)\n        dy2 = (dy * dy)\n    \n        def num_update(u, dx2, dy2):\n            u[1:(-1), 1:(-1)] = ((((u[2:, 1:(-1)] + u[:(-2), 1:(-1)]) * dy2) +\n                                  ((u[1:(-1), 2:] + u[1:(-1), :(-2)]) * dx2))\n                                 / (2 * (dx2 + dy2)))\n    \n        def num_inplace(u, dx2, dy2):\n            tmp = u[:(-2), 1:(-1)].copy()\n            np.add(tmp, u[2:, 1:(-1)], out=tmp)\n            np.multiply(tmp, dy2, out=tmp)\n            tmp2 = u[1:(-1), 2:].copy()\n            np.add(tmp2, u[1:(-1), :(-2)], out=tmp2)\n            np.multiply(tmp2, dx2, out=tmp2)\n            np.add(tmp, tmp2, out=tmp)\n            np.multiply(tmp, (1.0 / (2.0 * (dx2 + dy2))),\n                        out=u[1:(-1), 1:(-1)])\n    \n        def laplace(N, Niter=100, func=num_update, args=()):\n            u = np.zeros([N, N], order='C')\n            u[0] = 1\n            for i in range(Niter):\n                func(u, *args)\n            return u\n    \n        func = {'inplace': num_inplace, 'normal': num_update}[update]\n    \n        def run():\n            laplace(N, Niter, func, args=(dx2, dy2))\n    \n        self.run = run",
        "min_run_count": 2,
        "name": "bench_app.LaplaceInplace.time_it",
        "number": 0,
        "param_names": [
            "update"
        ],
        "params": [
            [
                "'inplace'",
                "'normal'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e912d48a31445b41d3721a0504b60aa72ddb03e4689b8386bdca5446901fa5ba",
        "warmup_time": -1
    },
    "bench_app.MaxesOfDots.time_it": {
        "code": "class MaxesOfDots:\n    def time_it(self):\n        self.maxes_of_dots(self.arrays)\n\n    def setup(self):\n        np.random.seed(1)\n        nsubj = 5\n        nfeat = 100\n        ntime = 200\n    \n        self.arrays = [np.random.normal(size=(ntime, nfeat))\n                       for i in range(nsubj)]",
        "min_run_count": 2,
        "name": "bench_app.MaxesOfDots.time_it",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c35d6b0cbd7e439f6dc9f9844f9a6aac5e1702e666595106714a3ffb372b6be0",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_array": {
        "code": "class ArrayCoercionSmall:\n    def time_array(self, array_like):\n        np.array(array_like)",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_array",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "02bfee29f8ec04abfab771e56eca7f16ee6c7505c0797230455fe5d972c374db",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_array_all_kwargs": {
        "code": "class ArrayCoercionSmall:\n    def time_array_all_kwargs(self, array_like):\n        np.array(array_like, dtype=self.int64, copy=False, order=\"F\",\n                 subok=False, ndmin=2)",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_array_all_kwargs",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "73eadb209fbfe29b1d19131b50da1944b47d7d9b6cd59fe64b8c6e4fee177a81",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_array_dtype_not_kwargs": {
        "code": "class ArrayCoercionSmall:\n    def time_array_dtype_not_kwargs(self, array_like):\n        np.array(array_like, self.int64)",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_array_dtype_not_kwargs",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7406ad0e996196d58688b676695446cdc1975aec380a82035209732e57ae47b8",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_array_invalid_kwarg": {
        "code": "class ArrayCoercionSmall:\n    def time_array_invalid_kwarg(self, array_like):\n        try:\n            np.array(array_like, ndmin=\"not-integer\")\n        except TypeError:\n            pass",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_array_invalid_kwarg",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3cf138af2df1bdfa905afad9a2c8f4769ea6f86eef956764982c6922a78b59a8",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_array_no_copy": {
        "code": "class ArrayCoercionSmall:\n    def time_array_no_copy(self, array_like):\n        np.array(array_like, copy=False)",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_array_no_copy",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "88c906bfc0bb2db2866043511e2198f6c40b7da5d143aabddd17a0b2c874ba75",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_array_subok": {
        "code": "class ArrayCoercionSmall:\n    def time_array_subok(self, array_like):\n        np.array(array_like, subok=True)",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_array_subok",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2dc6919d9d4310f83b980f79ffd1353c7af92663d2ec75157574c06e7c075276",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_asanyarray": {
        "code": "class ArrayCoercionSmall:\n    def time_asanyarray(self, array_like):\n        np.asarray(array_like)",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_asanyarray",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5cae35e9e843482299e48a8bc725e45abcd4e1e2b91f9929aa5f8e73f543fe0f",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_asanyarray_dtype": {
        "code": "class ArrayCoercionSmall:\n    def time_asanyarray_dtype(self, array_like):\n        np.array(array_like, dtype=self.int64, order=\"F\")",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_asanyarray_dtype",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "886eeba38cd3f89302fd88a935d2bca574adcd81efadae0cd9dd96192b190c11",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_asarray": {
        "code": "class ArrayCoercionSmall:\n    def time_asarray(self, array_like):\n        np.asarray(array_like)",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_asarray",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8fb148d93aa9d31468b9cdfa937d40b8fe600c94ff71e244f7153884f3ccf4c1",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_asarray_dtype": {
        "code": "class ArrayCoercionSmall:\n    def time_asarray_dtype(self, array_like):\n        np.array(array_like, dtype=self.int64, order=\"F\")",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_asarray_dtype",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9833180cc455adb4341c01da14cfdcd6a69c09dc896d8fd05da4b21a56b11e54",
        "warmup_time": -1
    },
    "bench_array_coercion.ArrayCoercionSmall.time_ascontiguousarray": {
        "code": "class ArrayCoercionSmall:\n    def time_ascontiguousarray(self, array_like):\n        np.ascontiguousarray(array_like)",
        "min_run_count": 2,
        "name": "bench_array_coercion.ArrayCoercionSmall.time_ascontiguousarray",
        "number": 0,
        "param_names": [
            "array_like"
        ],
        "params": [
            [
                "range(0, 3)",
                "[1]",
                "1",
                "array([5])",
                "5"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "274ebaa23a30c9368e2ff6d82c13b62ec653a7d4736f01f1fa8921021769aea1",
        "warmup_time": -1
    },
    "bench_core.Core.time_arange_100": {
        "code": "class Core:\n    def time_arange_100(self):\n        np.arange(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_arange_100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9810ff39cf0d90038a0f034783bd846b9b7de314928b7ed9b77a9db9ab62a515",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_1": {
        "code": "class Core:\n    def time_array_1(self):\n        np.array(1)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_1",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "aebef56aaf9fb83a7a269cd2353e0e3ee094f80cd9aa5ee2224a71dec34d1b08",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_empty": {
        "code": "class Core:\n    def time_array_empty(self):\n        np.array([])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_empty",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9a1586e568107cf4face75cecd6781c6359af578ef730c85a4f752eec1dbaa9a",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_float64_l1000": {
        "code": "class Core:\n    def time_array_float64_l1000(self):\n        np.array(self.float64_l1000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_float64_l1000",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ccc5ca6d62274d036ae686dadc52f3d09e242ad9cd57d2c408da0b39d1943914",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_float_l1000": {
        "code": "class Core:\n    def time_array_float_l1000(self):\n        np.array(self.float_l1000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_float_l1000",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "461053b7868bf5b2057d2bab87037b5e07c6cf938871cb3766b44a69b8270f18",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_float_l1000_dtype": {
        "code": "class Core:\n    def time_array_float_l1000_dtype(self):\n        np.array(self.float_l1000, dtype=self.float64_dtype)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_float_l1000_dtype",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3bb7c63d26535c89a4bddc30b2aa5f74488ffae091736b6622e911af9a30ae1f",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_int_l1000": {
        "code": "class Core:\n    def time_array_int_l1000(self):\n        np.array(self.int_l1000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_int_l1000",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "89e8dee6420ae63d274cc4a6beb3038a46fbd62faf80b1e485adb3a00ad4a359",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_l": {
        "code": "class Core:\n    def time_array_l(self):\n        np.array(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_l",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "68192f51161df9d033cd5f2090e414b700ecf573b2e9000b0c534223dbbd1289",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_l1": {
        "code": "class Core:\n    def time_array_l1(self):\n        np.array([1])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_l1",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "241cdb1e469ff23c8c0308f3ff7813b606f280f0100c323d4ee3ae9f85da5595",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_l100": {
        "code": "class Core:\n    def time_array_l100(self):\n        np.array(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_l100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d704ac86a6671472c3625d12d6408848665f9db0ce76872e4893c6444287df7a",
        "warmup_time": -1
    },
    "bench_core.Core.time_array_l_view": {
        "code": "class Core:\n    def time_array_l_view(self):\n        np.array(self.l_view)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_array_l_view",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ece084f922536234f4dd58a4601dbcbebf246861708e32f5d4051d21acbae2b8",
        "warmup_time": -1
    },
    "bench_core.Core.time_diag_l100": {
        "code": "class Core:\n    def time_diag_l100(self):\n        np.diag(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_diag_l100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6e62ecc1856911a7a4997e46036370168fbcef6da55f9cdc14425052fd6af8a3",
        "warmup_time": -1
    },
    "bench_core.Core.time_diagflat_l100": {
        "code": "class Core:\n    def time_diagflat_l100(self):\n        np.diagflat(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_diagflat_l100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cf3eeccf300cf54e62332841fe4e1d22f44208d6b3a264cb5a2260121fd752bd",
        "warmup_time": -1
    },
    "bench_core.Core.time_diagflat_l50_l50": {
        "code": "class Core:\n    def time_diagflat_l50_l50(self):\n        np.diagflat([self.l50, self.l50])\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_diagflat_l50_l50",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d2b890e26851599c8e29b40dbdabc8dbf1fa8dd62196cccbf9666f96e6f8e2e3",
        "warmup_time": -1
    },
    "bench_core.Core.time_dstack_l": {
        "code": "class Core:\n    def time_dstack_l(self):\n        np.dstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_dstack_l",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "61b3007741cca1eb312f112e40a2f4904676511eed1d9717f70f35d37d4e69fe",
        "warmup_time": -1
    },
    "bench_core.Core.time_empty_100": {
        "code": "class Core:\n    def time_empty_100(self):\n        np.empty(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_empty_100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "559d67381ed0945a2d30dd05ea10953cb54301944e11e550dd7cda8b87253ca5",
        "warmup_time": -1
    },
    "bench_core.Core.time_eye_100": {
        "code": "class Core:\n    def time_eye_100(self):\n        np.eye(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_eye_100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "56a9ccc305d01ef5ac1e6fa57132076e313f1806b7b24edf967e272484072655",
        "warmup_time": -1
    },
    "bench_core.Core.time_eye_3000": {
        "code": "class Core:\n    def time_eye_3000(self):\n        np.eye(3000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_eye_3000",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "824c99e7affa09c806961a580afaa51cf639bc65ddb114543fc2fe22952f33ff",
        "warmup_time": -1
    },
    "bench_core.Core.time_hstack_l": {
        "code": "class Core:\n    def time_hstack_l(self):\n        np.hstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_hstack_l",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "144b89def72fc1ce8633c9877160d7e1ef3e5d60fcca6715f3baff628acde755",
        "warmup_time": -1
    },
    "bench_core.Core.time_identity_100": {
        "code": "class Core:\n    def time_identity_100(self):\n        np.identity(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_identity_100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d46f8b9fda8d7af1e55aaee2a9707a32f556309f127f324c3f0f9e14577f9c84",
        "warmup_time": -1
    },
    "bench_core.Core.time_identity_3000": {
        "code": "class Core:\n    def time_identity_3000(self):\n        np.identity(3000)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_identity_3000",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f25f09f407fc0ec65996e154ce1acc3605fbfc1956b2e45ab7a8be95eabe9742",
        "warmup_time": -1
    },
    "bench_core.Core.time_ones_100": {
        "code": "class Core:\n    def time_ones_100(self):\n        np.ones(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_ones_100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f5f2fda543a06557ed577505581a4e4a69c28db7f4d56d15e3a5ab70c5836ad1",
        "warmup_time": -1
    },
    "bench_core.Core.time_tril_l10x10": {
        "code": "class Core:\n    def time_tril_l10x10(self):\n        np.tril(self.l10x10)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_tril_l10x10",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "52a8d958bc2f0d6641959d60b4e362bd13ff07ad07cb91f67c86c1371049d522",
        "warmup_time": -1
    },
    "bench_core.Core.time_triu_l10x10": {
        "code": "class Core:\n    def time_triu_l10x10(self):\n        np.triu(self.l10x10)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_triu_l10x10",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "450bc906f82b3446c2c3ce69ea043137dc643848b9378c0387b7f50b18e99216",
        "warmup_time": -1
    },
    "bench_core.Core.time_vstack_l": {
        "code": "class Core:\n    def time_vstack_l(self):\n        np.vstack(self.l)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_vstack_l",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1287e18f3b28dadd8b9aca804e354546ffb3b238647b20cf3667d86e88c9412e",
        "warmup_time": -1
    },
    "bench_core.Core.time_zeros_100": {
        "code": "class Core:\n    def time_zeros_100(self):\n        np.zeros(100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.l50 = range(50)\n        self.float_l1000 = [float(i) for i in range(1000)]\n        self.float64_l1000 = [np.float64(i) for i in range(1000)]\n        self.int_l1000 = list(range(1000))\n        self.l = [np.arange(1000), np.arange(1000)]\n        self.l_view = [memoryview(a) for a in self.l]\n        self.l10x10 = np.ones((10, 10))\n        self.float64_dtype = np.dtype(np.float64)",
        "min_run_count": 2,
        "name": "bench_core.Core.time_zeros_100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "206e21887f58c043e2d286405ddabefa934a6cecc80fbe3045636dee7df139a4",
        "warmup_time": -1
    },
    "bench_core.CorrConv.time_convolve": {
        "code": "class CorrConv:\n    def time_convolve(self, size1, size2, mode):\n        np.convolve(self.x1, self.x2, mode=mode)\n\n    def setup(self, size1, size2, mode):\n        self.x1 = np.linspace(0, 1, num=size1)\n        self.x2 = np.cos(np.linspace(0, 2*np.pi, num=size2))",
        "min_run_count": 2,
        "name": "bench_core.CorrConv.time_convolve",
        "number": 0,
        "param_names": [
            "size1",
            "size2",
            "mode"
        ],
        "params": [
            [
                "50",
                "1000",
                "100000"
            ],
            [
                "10",
                "100",
                "1000",
                "10000"
            ],
            [
                "'valid'",
                "'same'",
                "'full'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "110934cc16c781cf51ef05e32d0376573f652f8d29632088314c80bb280373f5",
        "warmup_time": -1
    },
    "bench_core.CorrConv.time_correlate": {
        "code": "class CorrConv:\n    def time_correlate(self, size1, size2, mode):\n        np.correlate(self.x1, self.x2, mode=mode)\n\n    def setup(self, size1, size2, mode):\n        self.x1 = np.linspace(0, 1, num=size1)\n        self.x2 = np.cos(np.linspace(0, 2*np.pi, num=size2))",
        "min_run_count": 2,
        "name": "bench_core.CorrConv.time_correlate",
        "number": 0,
        "param_names": [
            "size1",
            "size2",
            "mode"
        ],
        "params": [
            [
                "50",
                "1000",
                "100000"
            ],
            [
                "10",
                "100",
                "1000",
                "10000"
            ],
            [
                "'valid'",
                "'same'",
                "'full'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9add985c37891263767f640a8caa0571b67ad9fc64587e26fa1403cdbfd46a20",
        "warmup_time": -1
    },
    "bench_core.CountNonzero.time_count_nonzero": {
        "code": "class CountNonzero:\n    def time_count_nonzero(self, numaxes, size, dtype):\n        np.count_nonzero(self.x)\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)",
        "min_run_count": 2,
        "name": "bench_core.CountNonzero.time_count_nonzero",
        "number": 0,
        "param_names": [
            "numaxes",
            "size",
            "dtype"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "100",
                "10000",
                "1000000"
            ],
            [
                "<class 'bool'>",
                "<class 'int'>",
                "<class 'str'>",
                "<class 'object'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "62b6e7f8cdf194df64c7d1c6948ebe3b15027b688ac851c288b08bf147ea21c4",
        "warmup_time": -1
    },
    "bench_core.CountNonzero.time_count_nonzero_axis": {
        "code": "class CountNonzero:\n    def time_count_nonzero_axis(self, numaxes, size, dtype):\n        np.count_nonzero(self.x, axis=self.x.ndim - 1)\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)",
        "min_run_count": 2,
        "name": "bench_core.CountNonzero.time_count_nonzero_axis",
        "number": 0,
        "param_names": [
            "numaxes",
            "size",
            "dtype"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "100",
                "10000",
                "1000000"
            ],
            [
                "<class 'bool'>",
                "<class 'int'>",
                "<class 'str'>",
                "<class 'object'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0af13d073c97801eefc841f06735f316331f6898842d60d7077063e761cc3399",
        "warmup_time": -1
    },
    "bench_core.CountNonzero.time_count_nonzero_multi_axis": {
        "code": "class CountNonzero:\n    def time_count_nonzero_multi_axis(self, numaxes, size, dtype):\n        if self.x.ndim >= 2:\n            np.count_nonzero(self.x, axis=(\n                self.x.ndim - 1, self.x.ndim - 2))\n\n    def setup(self, numaxes, size, dtype):\n        self.x = np.arange(numaxes * size).reshape(numaxes, size)\n        self.x = (self.x % 3).astype(dtype)",
        "min_run_count": 2,
        "name": "bench_core.CountNonzero.time_count_nonzero_multi_axis",
        "number": 0,
        "param_names": [
            "numaxes",
            "size",
            "dtype"
        ],
        "params": [
            [
                "1",
                "2",
                "3"
            ],
            [
                "100",
                "10000",
                "1000000"
            ],
            [
                "<class 'bool'>",
                "<class 'int'>",
                "<class 'str'>",
                "<class 'object'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "539135a464660d1aa5d3e83d59b995843997e3e31d51e8e284bfbd83ddad52d3",
        "warmup_time": -1
    },
    "bench_core.Indices.time_indices": {
        "code": "class Indices:\n    def time_indices(self):\n        np.indices((1000, 500))",
        "min_run_count": 2,
        "name": "bench_core.Indices.time_indices",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2e230aa0719ef3ade68215df513a0a9aafa9d052ee5c2665559e3cea10bf9b51",
        "warmup_time": -1
    },
    "bench_core.PackBits.time_packbits": {
        "code": "class PackBits:\n    def time_packbits(self, dtype):\n        np.packbits(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_core.PackBits.time_packbits",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'bool'>",
                "<class 'numpy.uint64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1e1cdd058f7cb55eb592d5d4a6d37273683a1ab55041e8c4b4ef7c29e5e55313",
        "warmup_time": -1
    },
    "bench_core.PackBits.time_packbits_axis0": {
        "code": "class PackBits:\n    def time_packbits_axis0(self, dtype):\n        np.packbits(self.d2, axis=0)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_core.PackBits.time_packbits_axis0",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'bool'>",
                "<class 'numpy.uint64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3596f631e5980c6f39f8af219cc1bd8bc6cb97ed103fbb9008368ce8e4510c0c",
        "warmup_time": -1
    },
    "bench_core.PackBits.time_packbits_axis1": {
        "code": "class PackBits:\n    def time_packbits_axis1(self, dtype):\n        np.packbits(self.d2, axis=1)\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_core.PackBits.time_packbits_axis1",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'bool'>",
                "<class 'numpy.uint64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "138b6e3b289ecabf2012d7d40274f69f848fc241c53fe21eb8dcf5ff77dc3dd2",
        "warmup_time": -1
    },
    "bench_core.PackBits.time_packbits_little": {
        "code": "class PackBits:\n    def time_packbits_little(self, dtype):\n        np.packbits(self.d, bitorder=\"little\")\n\n    def setup(self, dtype):\n        self.d = np.ones(10000, dtype=dtype)\n        self.d2 = np.ones((200, 1000), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_core.PackBits.time_packbits_little",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'bool'>",
                "<class 'numpy.uint64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b40e33398c541441ca74f3b9af0da0e187cd290dcb8f1c4040cd21b942212b93",
        "warmup_time": -1
    },
    "bench_core.Temporaries.time_large": {
        "code": "class Temporaries:\n    def time_large(self):\n        (self.alarge * 2) + self.blarge\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)",
        "min_run_count": 2,
        "name": "bench_core.Temporaries.time_large",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d1f17784ab0409272af0ac08b2609f381d7257185a54f102e5114b3f8548fbf3",
        "warmup_time": -1
    },
    "bench_core.Temporaries.time_large2": {
        "code": "class Temporaries:\n    def time_large2(self):\n        (self.alarge + self.blarge) - 2\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)",
        "min_run_count": 2,
        "name": "bench_core.Temporaries.time_large2",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "23dea77757706f4d1d936f725e42bdc67c57d9b2f919e4da807d26ffe127ca51",
        "warmup_time": -1
    },
    "bench_core.Temporaries.time_mid": {
        "code": "class Temporaries:\n    def time_mid(self):\n        (self.amid * 2) + self.bmid\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)",
        "min_run_count": 2,
        "name": "bench_core.Temporaries.time_mid",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ad3406f4f9a8d7ad3c489e9028cedc12079758fe89272347756b7ea6e011a267",
        "warmup_time": -1
    },
    "bench_core.Temporaries.time_mid2": {
        "code": "class Temporaries:\n    def time_mid2(self):\n        (self.amid + self.bmid) - 2\n\n    def setup(self):\n        self.amid = np.ones(50000)\n        self.bmid = np.ones(50000)\n        self.alarge = np.ones(1000000)\n        self.blarge = np.ones(1000000)",
        "min_run_count": 2,
        "name": "bench_core.Temporaries.time_mid2",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5ad422ecaa9af109188d4d1fcb95cdfe8fce8d2ed999ef8a241e3af3f1677bbe",
        "warmup_time": -1
    },
    "bench_core.UnpackBits.time_unpackbits": {
        "code": "class UnpackBits:\n    def time_unpackbits(self):\n        np.unpackbits(self.d)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)",
        "min_run_count": 2,
        "name": "bench_core.UnpackBits.time_unpackbits",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8a9b8fdeeee1d01e42caff6c2cd0efc371c72053e373203f670f49c399a19ef2",
        "warmup_time": -1
    },
    "bench_core.UnpackBits.time_unpackbits_axis0": {
        "code": "class UnpackBits:\n    def time_unpackbits_axis0(self):\n        np.unpackbits(self.d2, axis=0)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)",
        "min_run_count": 2,
        "name": "bench_core.UnpackBits.time_unpackbits_axis0",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b842c713e8a843ac2273fe2f17c174ecd27b28a6dace841dac2a13d913caa8f7",
        "warmup_time": -1
    },
    "bench_core.UnpackBits.time_unpackbits_axis1": {
        "code": "class UnpackBits:\n    def time_unpackbits_axis1(self):\n        np.unpackbits(self.d2, axis=1)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)",
        "min_run_count": 2,
        "name": "bench_core.UnpackBits.time_unpackbits_axis1",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7ac672e3d48251be042a8a5e4b8167dbb3b91f0af99b4f01f9d9287e7561cd73",
        "warmup_time": -1
    },
    "bench_core.UnpackBits.time_unpackbits_axis1_little": {
        "code": "class UnpackBits:\n    def time_unpackbits_axis1_little(self):\n        np.unpackbits(self.d2, bitorder=\"little\", axis=1)\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)",
        "min_run_count": 2,
        "name": "bench_core.UnpackBits.time_unpackbits_axis1_little",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6449672a44b525868dbb66b244d23b3cc985ed6310b7c63a3d360091748497fa",
        "warmup_time": -1
    },
    "bench_core.UnpackBits.time_unpackbits_little": {
        "code": "class UnpackBits:\n    def time_unpackbits_little(self):\n        np.unpackbits(self.d, bitorder=\"little\")\n\n    def setup(self):\n        self.d = np.ones(10000, dtype=np.uint8)\n        self.d2 = np.ones((200, 1000), dtype=np.uint8)",
        "min_run_count": 2,
        "name": "bench_core.UnpackBits.time_unpackbits_little",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "074fea3cb327abbd97e59f2acf3ae2eaefb70020bdef1cab122a9190ee139eb8",
        "warmup_time": -1
    },
    "bench_core.VarComplex.time_var": {
        "code": "class VarComplex:\n    def time_var(self, n):\n        self.arr.var()\n\n    def setup(self, n):\n        self.arr = np.random.randn(n) + 1j * np.random.randn(n)",
        "min_run_count": 2,
        "name": "bench_core.VarComplex.time_var",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "10",
                "100",
                "1000",
                "10000",
                "100000",
                "1000000",
                "10000000",
                "100000000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "343d0479b33167dfc332d453e32b8710ee17a22fb693a3856575aa9dfad0d49d",
        "warmup_time": -1
    },
    "bench_function_base.Bincount.time_bincount": {
        "code": "class Bincount:\n    def time_bincount(self):\n        np.bincount(self.d)\n\n    def setup(self):\n        self.d = np.arange(80000, dtype=np.intp)\n        self.e = self.d.astype(np.float64)",
        "min_run_count": 2,
        "name": "bench_function_base.Bincount.time_bincount",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5d90f434eae543f580a5bb7f86e14c4663521f721b5a056155c61223dec781e4",
        "warmup_time": -1
    },
    "bench_function_base.Bincount.time_weights": {
        "code": "class Bincount:\n    def time_weights(self):\n        np.bincount(self.d, weights=self.e)\n\n    def setup(self):\n        self.d = np.arange(80000, dtype=np.intp)\n        self.e = self.d.astype(np.float64)",
        "min_run_count": 2,
        "name": "bench_function_base.Bincount.time_weights",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "21806334def6c126f9bb25e7ed2a2e4d9be995f373cd288727bb4d8e33bb11cb",
        "warmup_time": -1
    },
    "bench_function_base.Histogram1D.time_fine_binning": {
        "code": "class Histogram1D:\n    def time_fine_binning(self):\n        np.histogram(self.d, 10000, (0, 100))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)",
        "min_run_count": 2,
        "name": "bench_function_base.Histogram1D.time_fine_binning",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fd9a7cd0ee34b75f9eddd8c022b58b149397c82b4bd22de6fdb8b6e23c72e19c",
        "warmup_time": -1
    },
    "bench_function_base.Histogram1D.time_full_coverage": {
        "code": "class Histogram1D:\n    def time_full_coverage(self):\n        np.histogram(self.d, 200, (0, 100))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)",
        "min_run_count": 2,
        "name": "bench_function_base.Histogram1D.time_full_coverage",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7a6b3163b94451004a6b27ea9f14f9aa6c0e86e437074c1558a53ad422af141a",
        "warmup_time": -1
    },
    "bench_function_base.Histogram1D.time_small_coverage": {
        "code": "class Histogram1D:\n    def time_small_coverage(self):\n        np.histogram(self.d, 200, (50, 51))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 100000)",
        "min_run_count": 2,
        "name": "bench_function_base.Histogram1D.time_small_coverage",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "324b8676b5ae4c324e05671ffe2058af996d3cb540d845b6701cbae68eb26d99",
        "warmup_time": -1
    },
    "bench_function_base.Histogram2D.time_fine_binning": {
        "code": "class Histogram2D:\n    def time_fine_binning(self):\n        np.histogramdd(self.d, (10000, 10000), ((0, 100), (0, 100)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))",
        "min_run_count": 2,
        "name": "bench_function_base.Histogram2D.time_fine_binning",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2f6f1c99fb221c95e8526dc863c8b1e72546468bf162e20e62539f171241ceae",
        "warmup_time": -1
    },
    "bench_function_base.Histogram2D.time_full_coverage": {
        "code": "class Histogram2D:\n    def time_full_coverage(self):\n        np.histogramdd(self.d, (200, 200), ((0, 100), (0, 100)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))",
        "min_run_count": 2,
        "name": "bench_function_base.Histogram2D.time_full_coverage",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "79d7122f11109af1751f17c3a36c5df88fa3cbb842d49a9859528c7ea37eaf4f",
        "warmup_time": -1
    },
    "bench_function_base.Histogram2D.time_small_coverage": {
        "code": "class Histogram2D:\n    def time_small_coverage(self):\n        np.histogramdd(self.d, (200, 200), ((50, 51), (50, 51)))\n\n    def setup(self):\n        self.d = np.linspace(0, 100, 200000).reshape((-1,2))",
        "min_run_count": 2,
        "name": "bench_function_base.Histogram2D.time_small_coverage",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e8ff2855bc11b18b68832bbd0917468aab6b272a86ec5cf2fd1ac46d3e39adf5",
        "warmup_time": -1
    },
    "bench_function_base.Median.time_even": {
        "code": "class Median:\n    def time_even(self):\n        np.median(self.e)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_function_base.Median.time_even",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c8988ee7d7d40ea51759e7382820be86368c85ad7a8b4ea6bc5d7cf039ad7d0b",
        "warmup_time": -1
    },
    "bench_function_base.Median.time_even_inplace": {
        "code": "class Median:\n    def time_even_inplace(self):\n        np.median(self.e, overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_function_base.Median.time_even_inplace",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4de6b4c5c6fe319606c87af121f4b930d52e60a79b55f19d3e46e759968e8517",
        "warmup_time": -1
    },
    "bench_function_base.Median.time_even_small": {
        "code": "class Median:\n    def time_even_small(self):\n        np.median(self.e[:500], overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_function_base.Median.time_even_small",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ac742d35aa5ca0643a11510aa902569489bf2b225d71a6c8cc12d508167104d0",
        "warmup_time": -1
    },
    "bench_function_base.Median.time_odd": {
        "code": "class Median:\n    def time_odd(self):\n        np.median(self.o)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_function_base.Median.time_odd",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a7c0e54fb005a3f790f8317492d495aa785a5b118a0618dd2c24628ca8289c73",
        "warmup_time": -1
    },
    "bench_function_base.Median.time_odd_inplace": {
        "code": "class Median:\n    def time_odd_inplace(self):\n        np.median(self.o, overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_function_base.Median.time_odd_inplace",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1bcac9a503f2c82792750b26cca859f5c4fa6791d4babfe6200a1c305a196fb0",
        "warmup_time": -1
    },
    "bench_function_base.Median.time_odd_small": {
        "code": "class Median:\n    def time_odd_small(self):\n        np.median(self.o[:500], overwrite_input=True)\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_function_base.Median.time_odd_small",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0b2f23a3032466239bec187b638bc54306788a911d41d58aec416e4f023afb5c",
        "warmup_time": -1
    },
    "bench_function_base.Percentile.time_percentile": {
        "code": "class Percentile:\n    def time_percentile(self):\n        np.percentile(self.e, [25, 35, 55, 65, 75])\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_function_base.Percentile.time_percentile",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5fa63bb5a8b13b569acb81041b61348497a56baf4d93535578165158f78697b0",
        "warmup_time": -1
    },
    "bench_function_base.Percentile.time_quartile": {
        "code": "class Percentile:\n    def time_quartile(self):\n        np.percentile(self.e, [25, 75])\n\n    def setup(self):\n        self.e = np.arange(10000, dtype=np.float32)\n        self.o = np.arange(10001, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_function_base.Percentile.time_quartile",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a7a60e6bb5900bd1b6710d05fdd72798f76a270afd501a0c11b5917020cba619",
        "warmup_time": -1
    },
    "bench_function_base.Select.time_select": {
        "code": "class Select:\n    def time_select(self):\n        np.select(self.cond, [self.d, self.e])\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = [(self.d > 4), (self.d < 2)]\n        self.cond_large = [(self.d > 4), (self.d < 2)] * 10",
        "min_run_count": 2,
        "name": "bench_function_base.Select.time_select",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "89f02a048ace03b6c3269e61811da1ece2dab2a456536225dafaccbc385920a7",
        "warmup_time": -1
    },
    "bench_function_base.Select.time_select_larger": {
        "code": "class Select:\n    def time_select_larger(self):\n        np.select(self.cond_large, ([self.d, self.e] * 10))\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = [(self.d > 4), (self.d < 2)]\n        self.cond_large = [(self.d > 4), (self.d < 2)] * 10",
        "min_run_count": 2,
        "name": "bench_function_base.Select.time_select_larger",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a702e09750946268c44bce105934f13f28b8abe05f71a1f660e967804fafd305",
        "warmup_time": -1
    },
    "bench_function_base.Sort.time_argsort": {
        "code": "class Sort:\n    def time_argsort(self, kind, dtype, array_type):\n        np.argsort(self.arr, kind=kind)\n\n    def setup(self, kind, dtype, array_type):\n        np.random.seed(1234)\n        array_class = array_type[0]\n        self.arr = getattr(SortGenerator, array_class)(self.ARRAY_SIZE, dtype, *array_type[1:])",
        "min_run_count": 2,
        "name": "bench_function_base.Sort.time_argsort",
        "number": 0,
        "param_names": [
            "kind",
            "dtype",
            "array_type"
        ],
        "params": [
            [
                "'quick'",
                "'merge'",
                "'heap'"
            ],
            [
                "'float64'",
                "'int64'",
                "'int16'"
            ],
            [
                "('random',)",
                "('ordered',)",
                "('reversed',)",
                "('uniform',)",
                "('sorted_block', 10)",
                "('sorted_block', 100)",
                "('sorted_block', 1000)"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "624eb47572c94efd36b968e9d3bc7e0626f4bbf3e7578adaa6abc977cd03c833",
        "warmup_time": -1
    },
    "bench_function_base.Sort.time_sort": {
        "code": "class Sort:\n    def time_sort(self, kind, dtype, array_type):\n        # Using np.sort(...) instead of arr.sort(...) because it makes a copy.\n        # This is important because the data is prepared once per benchmark, but\n        # used across multiple runs.\n        np.sort(self.arr, kind=kind)\n\n    def setup(self, kind, dtype, array_type):\n        np.random.seed(1234)\n        array_class = array_type[0]\n        self.arr = getattr(SortGenerator, array_class)(self.ARRAY_SIZE, dtype, *array_type[1:])",
        "min_run_count": 2,
        "name": "bench_function_base.Sort.time_sort",
        "number": 0,
        "param_names": [
            "kind",
            "dtype",
            "array_type"
        ],
        "params": [
            [
                "'quick'",
                "'merge'",
                "'heap'"
            ],
            [
                "'float64'",
                "'int64'",
                "'int16'"
            ],
            [
                "('random',)",
                "('ordered',)",
                "('reversed',)",
                "('uniform',)",
                "('sorted_block', 10)",
                "('sorted_block', 100)",
                "('sorted_block', 1000)"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1fa0d392d237dcaa96c29d3fe5e59749ebb9bfd9e79f9bd3d4f00e0def335ae0",
        "warmup_time": -1
    },
    "bench_function_base.Sort.time_sort_worst": {
        "code": "class SortWorst:\n    def time_sort_worst(self):\n        np.sort(self.worst)\n\n    def setup(self):\n        # quicksort median of 3 worst case\n        self.worst = np.arange(1000000)\n        x = self.worst\n        while x.size > 3:\n            mid = x.size // 2\n            x[mid], x[-2] = x[-2], x[mid]\n            x = x[:-2]",
        "min_run_count": 2,
        "name": "bench_function_base.Sort.time_sort_worst",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ace32d23c7f67f08c3993d54ad4d4b67cd9b56a42a8b95f830141cce64e1d6ec",
        "warmup_time": -1
    },
    "bench_function_base.Where.time_1": {
        "code": "class Where:\n    def time_1(self):\n        np.where(self.cond)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)",
        "min_run_count": 2,
        "name": "bench_function_base.Where.time_1",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4b1f7a67860008b1fa0d58ddf29ace0f2ae879a9c19c7c0da4dc5ec9f9c3e075",
        "warmup_time": -1
    },
    "bench_function_base.Where.time_2": {
        "code": "class Where:\n    def time_2(self):\n        np.where(self.cond, self.d, self.e)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)",
        "min_run_count": 2,
        "name": "bench_function_base.Where.time_2",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9aab7b536e740af04ddd0a32c17a5359fb6db1f56304795fbbef62ffe6a08a63",
        "warmup_time": -1
    },
    "bench_function_base.Where.time_2_broadcast": {
        "code": "class Where:\n    def time_2_broadcast(self):\n        np.where(self.cond, self.d, 0)\n\n    def setup(self):\n        self.d = np.arange(20000)\n        self.e = self.d.copy()\n        self.cond = (self.d > 5000)",
        "min_run_count": 2,
        "name": "bench_function_base.Where.time_2_broadcast",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2e8c53780a92870cc414371e711fb188646805ba43e4159157bc05fa6b822e6f",
        "warmup_time": -1
    },
    "bench_import.Import.time_fft": {
        "code": "class Import:\n    def time_fft(self):\n        self.execute('from numpy import fft')",
        "min_run_count": 2,
        "name": "bench_import.Import.time_fft",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "032a4b610918503dbb969cc5837be23961652784b6221173d38fa901e9811532",
        "warmup_time": -1
    },
    "bench_import.Import.time_linalg": {
        "code": "class Import:\n    def time_linalg(self):\n        self.execute('from numpy import linalg')",
        "min_run_count": 2,
        "name": "bench_import.Import.time_linalg",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c39a1494b3509e08cf7735c691b237b7bea72c7ab9acc811567991c16104f2aa",
        "warmup_time": -1
    },
    "bench_import.Import.time_ma": {
        "code": "class Import:\n    def time_ma(self):\n        self.execute('from numpy import ma')",
        "min_run_count": 2,
        "name": "bench_import.Import.time_ma",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8a42f579234af8dd0de6c97e2456192925e2089772dc64143802bc3d511757e1",
        "warmup_time": -1
    },
    "bench_import.Import.time_matlib": {
        "code": "class Import:\n    def time_matlib(self):\n        self.execute('from numpy import matlib')",
        "min_run_count": 2,
        "name": "bench_import.Import.time_matlib",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1646af4cf76933a57faea27e4294eb5bacd6fa5fa3eb86f10e9e3f8db9a2cd57",
        "warmup_time": -1
    },
    "bench_import.Import.time_numpy": {
        "code": "class Import:\n    def time_numpy(self):\n        self.execute('import numpy')",
        "min_run_count": 2,
        "name": "bench_import.Import.time_numpy",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5cb9a60ea63951e4ed5e53d18cbebb7b1ae313ae422ff739356454e6f9f2c5d7",
        "warmup_time": -1
    },
    "bench_import.Import.time_numpy_inspect": {
        "code": "class Import:\n    def time_numpy_inspect(self):\n        # What are the savings from avoiding to import the inspect module?\n        self.execute('import numpy, inspect')",
        "min_run_count": 2,
        "name": "bench_import.Import.time_numpy_inspect",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3dd22ba8c1d5c49a9d99843d70d69a23add5d539d482ece58b85fe9cbfae98d2",
        "warmup_time": -1
    },
    "bench_import.Import.time_random": {
        "code": "class Import:\n    def time_random(self):\n        self.execute('from numpy import random')",
        "min_run_count": 2,
        "name": "bench_import.Import.time_random",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "93e927c190a453a13a4dc57e51ad273e11e681bf788ef4051cf0b3a255837552",
        "warmup_time": -1
    },
    "bench_indexing.Indexing.time_op": {
        "code": "class Indexing:\n    def time_op(self, indexes, sel, op):\n        self.func()\n\n    def setup(self, indexes, sel, op):\n        sel = sel.replace('I', indexes)\n    \n        ns = {'squares_': get_squares_(),\n              'np': np,\n              'indexes_': get_indexes_(),\n              'indexes_rand_': get_indexes_rand_()}\n    \n        code = \"def run():\\n    for a in squares_.values(): a[%s]%s\"\n        code = code % (sel, op)\n    \n        exec(code, ns)\n        self.func = ns['run']",
        "min_run_count": 2,
        "name": "bench_indexing.Indexing.time_op",
        "number": 0,
        "param_names": [
            "indexes",
            "sel",
            "op"
        ],
        "params": [
            [
                "'indexes_'",
                "'indexes_rand_'"
            ],
            [
                "'I'",
                "':,I'",
                "'np.ix_(I, I)'"
            ],
            [
                "''",
                "'=1'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2465b1e641afa0b484c5c37d765bbcf98df0cc9b75f502c64c2c79fa9e71b8b2",
        "warmup_time": -1
    },
    "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing": {
        "code": "class IndexingSeparate:\n    def time_mmap_fancy_indexing(self):\n        for i in range(1000):\n            self.fp[self.indexes]\n\n    def setup(self):\n        self.tmp_dir = mkdtemp()\n        self.fp = memmap(pjoin(self.tmp_dir, 'tmp.dat'),\n                         dtype=float32, mode='w+', shape=(50, 60))\n        self.indexes = array([3, 4, 6, 10, 20])",
        "min_run_count": 2,
        "name": "bench_indexing.IndexingSeparate.time_mmap_fancy_indexing",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d511fabf6c9d75bca8e0c77070a292a7498f23fd253bf151c2d0472028c8e375",
        "warmup_time": -1
    },
    "bench_indexing.IndexingSeparate.time_mmap_slicing": {
        "code": "class IndexingSeparate:\n    def time_mmap_slicing(self):\n        for i in range(1000):\n            self.fp[5:10]\n\n    def setup(self):\n        self.tmp_dir = mkdtemp()\n        self.fp = memmap(pjoin(self.tmp_dir, 'tmp.dat'),\n                         dtype=float32, mode='w+', shape=(50, 60))\n        self.indexes = array([3, 4, 6, 10, 20])",
        "min_run_count": 2,
        "name": "bench_indexing.IndexingSeparate.time_mmap_slicing",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8aac8af758ba563381c8d021d9163a34a1652b3fcc129ec3555e9221a785b469",
        "warmup_time": -1
    },
    "bench_indexing.IndexingStructured0D.time_array_all": {
        "code": "class IndexingStructured0D:\n    def time_array_all(self):\n        self.B['a'] = self.A['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()",
        "min_run_count": 2,
        "name": "bench_indexing.IndexingStructured0D.time_array_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "972e93e84611a6e63b6d9fe5d2019b3b54f98452ed2b237b58f4d58bbde4072b",
        "warmup_time": -1
    },
    "bench_indexing.IndexingStructured0D.time_array_slice": {
        "code": "class IndexingStructured0D:\n    def time_array_slice(self):\n        self.B['a'][:] = self.A['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()",
        "min_run_count": 2,
        "name": "bench_indexing.IndexingStructured0D.time_array_slice",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7884c48afe99676d42705373c0678163cd9358c0af75b3888566a78b64b1a0ae",
        "warmup_time": -1
    },
    "bench_indexing.IndexingStructured0D.time_scalar_all": {
        "code": "class IndexingStructured0D:\n    def time_scalar_all(self):\n        self.b['a'] = self.a['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()",
        "min_run_count": 2,
        "name": "bench_indexing.IndexingStructured0D.time_scalar_all",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3379d09fc19f9b870f4e9a930bc98b6cda21f792cfb9caf37992752c1ed04c9e",
        "warmup_time": -1
    },
    "bench_indexing.IndexingStructured0D.time_scalar_slice": {
        "code": "class IndexingStructured0D:\n    def time_scalar_slice(self):\n        self.b['a'][:] = self.a['a']\n\n    def setup(self):\n        self.dt = np.dtype([('a', 'f4', 256)])\n    \n        self.A = np.zeros((), self.dt)\n        self.B = self.A.copy()\n    \n        self.a = np.zeros(1, self.dt)[0]\n        self.b = self.a.copy()",
        "min_run_count": 2,
        "name": "bench_indexing.IndexingStructured0D.time_scalar_slice",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ffcfe894af4580d854b9e8b2d38687ab9ee9c372cc0d50fd467e5eab42e974ce",
        "warmup_time": -1
    },
    "bench_indexing.ScalarIndexing.time_assign": {
        "code": "class ScalarIndexing:\n    def time_assign(self, ndim):\n        # time assignment from a python scalar\n        arr = self.array\n        indx = (1,) * ndim\n        for i in range(100):\n            arr[indx] = 5.\n\n    def setup(self, ndim):\n        self.array = np.ones((5,) * ndim)",
        "min_run_count": 2,
        "name": "bench_indexing.ScalarIndexing.time_assign",
        "number": 0,
        "param_names": [
            "ndim"
        ],
        "params": [
            [
                "0",
                "1",
                "2"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "52c0dfa579d132ce77b2ca2d0b042734f9d8f60d0e16ef2af7f292e1d49d5936",
        "warmup_time": -1
    },
    "bench_indexing.ScalarIndexing.time_assign_cast": {
        "code": "class ScalarIndexing:\n    def time_assign_cast(self, ndim):\n        # time an assignment which may use a cast operation\n        arr = self.array\n        indx = (1,) * ndim\n        val = np.int16(43)\n        for i in range(100):\n            arr[indx] = val\n\n    def setup(self, ndim):\n        self.array = np.ones((5,) * ndim)",
        "min_run_count": 2,
        "name": "bench_indexing.ScalarIndexing.time_assign_cast",
        "number": 0,
        "param_names": [
            "ndim"
        ],
        "params": [
            [
                "0",
                "1",
                "2"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "36f3c671c5ba3cb5633f4a6b4e211938c2eb5857440c2a0e3c06281d2c0a5bc7",
        "warmup_time": -1
    },
    "bench_indexing.ScalarIndexing.time_index": {
        "code": "class ScalarIndexing:\n    def time_index(self, ndim):\n        # time indexing.\n        arr = self.array\n        indx = (1,) * ndim\n        for i in range(100):\n            arr[indx]\n\n    def setup(self, ndim):\n        self.array = np.ones((5,) * ndim)",
        "min_run_count": 2,
        "name": "bench_indexing.ScalarIndexing.time_index",
        "number": 0,
        "param_names": [
            "ndim"
        ],
        "params": [
            [
                "0",
                "1",
                "2"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b5a4c10e3553e7101b7fc679cb355150c5b27d7c7b5544f50660fbe581936f73",
        "warmup_time": -1
    },
    "bench_io.Copy.time_cont_assign": {
        "code": "class Copy:\n    def time_cont_assign(self, typename):\n        self.d[...] = 1\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_io.Copy.time_cont_assign",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int8'",
                "'int16'",
                "'float32'",
                "'float64'",
                "'complex64'",
                "'complex128'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "afe3edcb5a646c1dd3efa7d2b5084f3759d877cec053e46705ac093e8bafbddd",
        "warmup_time": -1
    },
    "bench_io.Copy.time_memcpy": {
        "code": "class Copy:\n    def time_memcpy(self, typename):\n        self.d[...] = self.e_d\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_io.Copy.time_memcpy",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int8'",
                "'int16'",
                "'float32'",
                "'float64'",
                "'complex64'",
                "'complex128'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8e4099e96ab5221807bc0dd397733a0016f6f1bbbca8f5b800a8249a6e72bc7e",
        "warmup_time": -1
    },
    "bench_io.Copy.time_memcpy_large_out_of_place": {
        "code": "class Copy:\n    def time_memcpy_large_out_of_place(self, typename):\n        l = np.ones(1024**2, dtype=np.dtype(typename))\n        l.copy()\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_io.Copy.time_memcpy_large_out_of_place",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int8'",
                "'int16'",
                "'float32'",
                "'float64'",
                "'complex64'",
                "'complex128'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "862a7ab3e90582f36eae4004c8ed717e47fc8e8fa042cf49b6c12a5df1d6b4c7",
        "warmup_time": -1
    },
    "bench_io.Copy.time_strided_assign": {
        "code": "class Copy:\n    def time_strided_assign(self, typename):\n        self.dflat[::2] = 2\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_io.Copy.time_strided_assign",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int8'",
                "'int16'",
                "'float32'",
                "'float64'",
                "'complex64'",
                "'complex128'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "61d585e17292b3b6a8aba7775561f3fbffe991d8655b2335bfdbf1c83de99915",
        "warmup_time": -1
    },
    "bench_io.Copy.time_strided_copy": {
        "code": "class Copy:\n    def time_strided_copy(self, typename):\n        self.d[...] = self.e.T\n\n    def setup(self, typename):\n        dtype = np.dtype(typename)\n        self.d = np.arange((50 * 500), dtype=dtype).reshape((500, 50))\n        self.e = np.arange((50 * 500), dtype=dtype).reshape((50, 500))\n        self.e_d = self.e.reshape(self.d.shape)\n        self.dflat = np.arange((50 * 500), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_io.Copy.time_strided_copy",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int8'",
                "'int16'",
                "'float32'",
                "'float64'",
                "'complex64'",
                "'complex128'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e431dccc9dca8066e5245473c4aa724314bd94e7a7a5db466deb0e5cfcfab482",
        "warmup_time": -1
    },
    "bench_io.CopyTo.time_copyto": {
        "code": "class CopyTo:\n    def time_copyto(self):\n        np.copyto(self.d, self.e)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)",
        "min_run_count": 2,
        "name": "bench_io.CopyTo.time_copyto",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "07950888132a0948b3c041b33f0f183b09ef914213babe934461be9b316d3221",
        "warmup_time": -1
    },
    "bench_io.CopyTo.time_copyto_8_dense": {
        "code": "class CopyTo:\n    def time_copyto_8_dense(self):\n        np.copyto(self.d, self.e, where=self.im8)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)",
        "min_run_count": 2,
        "name": "bench_io.CopyTo.time_copyto_8_dense",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a73b9cc35e00d11b5cd0365076a62b7e2e3058a742abdac1ff0632af2afa63ce",
        "warmup_time": -1
    },
    "bench_io.CopyTo.time_copyto_8_sparse": {
        "code": "class CopyTo:\n    def time_copyto_8_sparse(self):\n        np.copyto(self.d, self.e, where=self.m8)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)",
        "min_run_count": 2,
        "name": "bench_io.CopyTo.time_copyto_8_sparse",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6b3380a508d21032c997a83cb0f5f88e055d7c440b0e802e3856e0bba7b42699",
        "warmup_time": -1
    },
    "bench_io.CopyTo.time_copyto_dense": {
        "code": "class CopyTo:\n    def time_copyto_dense(self):\n        np.copyto(self.d, self.e, where=self.im)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)",
        "min_run_count": 2,
        "name": "bench_io.CopyTo.time_copyto_dense",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3fc8f0ec8a3cbc2c0e6efed89c18560d81b4f3055eedac3e4cc6fb8f0ea88b6f",
        "warmup_time": -1
    },
    "bench_io.CopyTo.time_copyto_sparse": {
        "code": "class CopyTo:\n    def time_copyto_sparse(self):\n        np.copyto(self.d, self.e, where=self.m)\n\n    def setup(self):\n        self.d = np.ones(50000)\n        self.e = self.d.copy()\n        self.m = (self.d == 1)\n        self.im = (~ self.m)\n        self.m8 = self.m.copy()\n        self.m8[::8] = (~ self.m[::8])\n        self.im8 = (~ self.m8)",
        "min_run_count": 2,
        "name": "bench_io.CopyTo.time_copyto_sparse",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8b3edb57c11fe88b4cb32c4a592531aad95d8749f99cdaa508ad926e7411faf0",
        "warmup_time": -1
    },
    "bench_io.LoadtxtCSVComments.time_comment_loadtxt_csv": {
        "code": "class LoadtxtCSVComments:\n    def time_comment_loadtxt_csv(self, num_lines):\n        # benchmark handling of lines with comments\n        # when loading in from csv files\n    \n        # inspired by similar benchmark in pandas\n        # for read_csv\n    \n        # need to rewind StringIO object (unfortunately\n        # confounding timing result somewhat) for every\n        # call to timing test proper\n        np.loadtxt(self.data_comments,\n                   delimiter=u',')\n        self.data_comments.seek(0)\n\n    def setup(self, num_lines):\n        data = [u'1,2,3 # comment'] * num_lines\n        # unfortunately, timeit will only run setup()\n        # between repeat events, but not for iterations\n        # within repeats, so the StringIO object\n        # will have to be rewinded in the benchmark proper\n        self.data_comments = StringIO(u'\\n'.join(data))",
        "min_run_count": 2,
        "name": "bench_io.LoadtxtCSVComments.time_comment_loadtxt_csv",
        "number": 0,
        "param_names": [
            "num_lines"
        ],
        "params": [
            [
                "10",
                "100",
                "10000",
                "100000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bc3091851c3292f70850fcd7eb14ea6ca5884ac7374b43c01263cad29f7f685a",
        "warmup_time": -1
    },
    "bench_io.LoadtxtCSVDateTime.time_loadtxt_csv_datetime": {
        "code": "class LoadtxtCSVDateTime:\n    def time_loadtxt_csv_datetime(self, num_lines):\n        # rewind StringIO object -- the timing iterations\n        # are state-dependent\n        X = np.loadtxt(self.csv_data,\n                       delimiter=u',',\n                       dtype=([('dates', 'M8[us]'),\n                               ('values', 'float64')]))\n        self.csv_data.seek(0)\n\n    def setup(self, num_lines):\n        # create the equivalent of a two-column CSV file\n        # with date strings in the first column and random\n        # floating point data in the second column\n        dates = np.arange('today', 20, dtype=np.datetime64)\n        np.random.seed(123)\n        values = np.random.rand(20)\n        date_line = u''\n    \n        for date, value in zip(dates, values):\n            date_line += (str(date) + ',' + str(value) + '\\n')\n    \n        # expand data to specified number of lines\n        data = date_line * (num_lines // 20)\n        self.csv_data = StringIO(data)",
        "min_run_count": 2,
        "name": "bench_io.LoadtxtCSVDateTime.time_loadtxt_csv_datetime",
        "number": 0,
        "param_names": [
            "num_lines"
        ],
        "params": [
            [
                "20",
                "200",
                "2000",
                "20000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "70095fef3c3845550dc9746c84e9f3b187983185c2e2c9d633fd2311bc7ba481",
        "warmup_time": -1
    },
    "bench_io.LoadtxtCSVSkipRows.time_skiprows_csv": {
        "code": "class LoadtxtCSVSkipRows:\n    def time_skiprows_csv(self, skiprows):\n        np.loadtxt(self.fname,\n                   delimiter=',',\n                   skiprows=skiprows)\n\n    def setup(self, skiprows):\n        np.random.seed(123)\n        test_array = np.random.rand(100000, 3)\n        self.fname = 'test_array.csv'\n        np.savetxt(fname=self.fname,\n                   X=test_array,\n                   delimiter=',')",
        "min_run_count": 2,
        "name": "bench_io.LoadtxtCSVSkipRows.time_skiprows_csv",
        "number": 0,
        "param_names": [
            "skiprows"
        ],
        "params": [
            [
                "0",
                "500",
                "10000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3e404fbe768ffacb38decdc20759baa4c49675a337db49def01ca2ad8ec05f2b",
        "warmup_time": -1
    },
    "bench_io.LoadtxtCSVStructured.time_loadtxt_csv_struct_dtype": {
        "code": "class LoadtxtCSVStructured:\n    def time_loadtxt_csv_struct_dtype(self):\n        # obligate rewind of StringIO object\n        # between iterations of a repeat:\n    \n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   dtype=[('category_1', 'S1'),\n                          ('category_2', 'i4'),\n                          ('category_3', 'f8'),\n                          ('category_4', 'S1'),\n                          ('category_5', 'f8')])\n        self.csv_data.seek(0)\n\n    def setup(self):\n        num_lines = 50000\n        data = [u\"M, 21, 72, X, 155\"] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))",
        "min_run_count": 2,
        "name": "bench_io.LoadtxtCSVStructured.time_loadtxt_csv_struct_dtype",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "07198d0fb34f51c139a680e174f6a1285f06d00a9779f096ddd73c2969678198",
        "warmup_time": -1
    },
    "bench_io.LoadtxtCSVdtypes.time_loadtxt_dtypes_csv": {
        "code": "class LoadtxtCSVdtypes:\n    def time_loadtxt_dtypes_csv(self, dtype, num_lines):\n        # benchmark loading arrays of various dtypes\n        # from csv files\n    \n        # state-dependent timing benchmark requires\n        # rewind of StringIO object\n    \n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   dtype=dtype)\n        self.csv_data.seek(0)\n\n    def setup(self, dtype, num_lines):\n        data = [u'5, 7, 888'] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))",
        "min_run_count": 2,
        "name": "bench_io.LoadtxtCSVdtypes.time_loadtxt_dtypes_csv",
        "number": 0,
        "param_names": [
            "dtype",
            "num_lines"
        ],
        "params": [
            [
                "'float32'",
                "'float64'",
                "'int32'",
                "'int64'",
                "'complex128'",
                "'str'",
                "'object'"
            ],
            [
                "10",
                "100",
                "10000",
                "100000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "187d12d6e571661ff9c309e9eceac39f4c4f8767bb2b29b883971db26e32f00d",
        "warmup_time": -1
    },
    "bench_io.LoadtxtReadUint64Integers.time_read_uint64": {
        "code": "class LoadtxtReadUint64Integers:\n    def time_read_uint64(self, size):\n        # mandatory rewind of StringIO object\n        # between iterations of a repeat:\n        np.loadtxt(self.data1)\n        self.data1.seek(0)\n\n    def setup(self, size):\n        arr = np.arange(size).astype('uint64') + 2**63\n        self.data1 = StringIO(u'\\n'.join(arr.astype(str).tolist()))\n        arr = arr.astype(object)\n        arr[500] = -1\n        self.data2 = StringIO(u'\\n'.join(arr.astype(str).tolist()))",
        "min_run_count": 2,
        "name": "bench_io.LoadtxtReadUint64Integers.time_read_uint64",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "550",
                "1000",
                "10000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8bece444885419bd9c391480f21d71718360ad70d21ff3a2e9f3686d6308bbaf",
        "warmup_time": -1
    },
    "bench_io.LoadtxtReadUint64Integers.time_read_uint64_neg_values": {
        "code": "class LoadtxtReadUint64Integers:\n    def time_read_uint64_neg_values(self, size):\n        # mandatory rewind of StringIO object\n        # between iterations of a repeat:\n        np.loadtxt(self.data2)\n        self.data2.seek(0)\n\n    def setup(self, size):\n        arr = np.arange(size).astype('uint64') + 2**63\n        self.data1 = StringIO(u'\\n'.join(arr.astype(str).tolist()))\n        arr = arr.astype(object)\n        arr[500] = -1\n        self.data2 = StringIO(u'\\n'.join(arr.astype(str).tolist()))",
        "min_run_count": 2,
        "name": "bench_io.LoadtxtReadUint64Integers.time_read_uint64_neg_values",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "550",
                "1000",
                "10000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5052543cb6a21400dfb8700019b08f81d3edfdeeb85fab940f5ce3e19325a976",
        "warmup_time": -1
    },
    "bench_io.LoadtxtUseColsCSV.time_loadtxt_usecols_csv": {
        "code": "class LoadtxtUseColsCSV:\n    def time_loadtxt_usecols_csv(self, usecols):\n        # must rewind StringIO because of state\n        # dependence of file reading\n        np.loadtxt(self.csv_data,\n                   delimiter=u',',\n                   usecols=usecols)\n        self.csv_data.seek(0)\n\n    def setup(self, usecols):\n        num_lines = 5000\n        data = [u'0, 1, 2, 3, 4, 5, 6, 7, 8, 9'] * num_lines\n        self.csv_data = StringIO(u'\\n'.join(data))",
        "min_run_count": 2,
        "name": "bench_io.LoadtxtUseColsCSV.time_loadtxt_usecols_csv",
        "number": 0,
        "param_names": [
            "usecols"
        ],
        "params": [
            [
                "2",
                "[1, 3]",
                "[1, 3, 5, 7]"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fb0b1e5cb45978fdd468073eb5f8645968a9ad1bb6fb7cd02dc1d7541791fefe",
        "warmup_time": -1
    },
    "bench_io.Savez.time_vb_savez_squares": {
        "code": "class Savez:\n    def time_vb_savez_squares(self):\n        np.savez('tmp.npz', **self.squares)\n\n    def setup(self):\n        self.squares = get_squares()",
        "min_run_count": 2,
        "name": "bench_io.Savez.time_vb_savez_squares",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1d68d79f6ca00119e591c2cf1dd228713f70a6478358c985911a0c76299407b1",
        "warmup_time": -1
    },
    "bench_itemselection.PutMask.time_dense": {
        "code": "class PutMask:\n    def time_dense(self, values_is_scalar, dtype):\n        np.putmask(self.arr, self.dense_mask, self.vals)\n\n    def setup(self, values_is_scalar, dtype):\n        if values_is_scalar:\n            self.vals = np.array(1., dtype=dtype)\n        else:\n            self.vals = np.ones(1000, dtype=dtype)\n    \n        self.arr = np.ones(1000, dtype=dtype)\n    \n        self.dense_mask = np.ones(1000, dtype=\"bool\")\n        self.sparse_mask = np.zeros(1000, dtype=\"bool\")",
        "min_run_count": 2,
        "name": "bench_itemselection.PutMask.time_dense",
        "number": 0,
        "param_names": [
            "values_is_scalar",
            "dtype"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "166dfab55086e824fc45c71ba79ed453e0de08edbd84c71a8b60468e93c27c89",
        "warmup_time": -1
    },
    "bench_itemselection.PutMask.time_sparse": {
        "code": "class PutMask:\n    def time_sparse(self, values_is_scalar, dtype):\n        np.putmask(self.arr, self.sparse_mask, self.vals)\n\n    def setup(self, values_is_scalar, dtype):\n        if values_is_scalar:\n            self.vals = np.array(1., dtype=dtype)\n        else:\n            self.vals = np.ones(1000, dtype=dtype)\n    \n        self.arr = np.ones(1000, dtype=dtype)\n    \n        self.dense_mask = np.ones(1000, dtype=\"bool\")\n        self.sparse_mask = np.zeros(1000, dtype=\"bool\")",
        "min_run_count": 2,
        "name": "bench_itemselection.PutMask.time_sparse",
        "number": 0,
        "param_names": [
            "values_is_scalar",
            "dtype"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "dadc5e4b5b3dd8f832173b7b7e1f8efd82503d4238e6691b90e9969fd2828f9c",
        "warmup_time": -1
    },
    "bench_itemselection.Take.time_contiguous": {
        "code": "class Take:\n    def time_contiguous(self, shape, mode, dtype):\n        self.arr.take(self.indices, axis=-2, mode=mode)\n\n    def setup(self, shape, mode, dtype):\n        self.arr = np.ones(shape, dtype)\n        self.indices = np.arange(1000)",
        "min_run_count": 2,
        "name": "bench_itemselection.Take.time_contiguous",
        "number": 0,
        "param_names": [
            "shape",
            "mode",
            "dtype"
        ],
        "params": [
            [
                "(1000, 1)",
                "(1000, 2)",
                "(2, 1000, 1)",
                "(1000, 3)"
            ],
            [
                "'raise'",
                "'wrap'",
                "'clip'"
            ],
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "464749957650ef1727b83afc00207bcd11ac8a1d60cd0d9352c205b4cbab00d0",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanargmax": {
        "code": "class Nan:\n    def time_nanargmax(self, array_size, percent_nans):\n        np.nanargmax(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanargmax",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e93b632ae2c175e9f074fecf982b2e75825933044e266a73e608882fb4106e39",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanargmin": {
        "code": "class Nan:\n    def time_nanargmin(self, array_size, percent_nans):\n        np.nanargmin(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanargmin",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9385e2fafd18fc88d1b8c187b5fd6a41beaaa05dd04da8369310d0654de51fdb",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nancumprod": {
        "code": "class Nan:\n    def time_nancumprod(self, array_size, percent_nans):\n        np.nancumprod(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nancumprod",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c5152de8ed506c6bac541397bf24900bfb9232cb7c700c57ab580655a16ef9a1",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nancumsum": {
        "code": "class Nan:\n    def time_nancumsum(self, array_size, percent_nans):\n        np.nancumsum(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nancumsum",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c6f6d799b85c622c7182ea607d345bd1e58a57e0edb2c400d9addfaacbd83c0b",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanmax": {
        "code": "class Nan:\n    def time_nanmax(self, array_size, percent_nans):\n        np.nanmax(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanmax",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "97743a24377113c2ba327e2bedf80ccd0eef0beb04bfd9ff0955fd171e91ed9e",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanmean": {
        "code": "class Nan:\n    def time_nanmean(self, array_size, percent_nans):\n        np.nanmean(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanmean",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "17469b47e08e615431155eecb3988ad949edeed425d54d3250dbe73b4b1a8545",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanmedian": {
        "code": "class Nan:\n    def time_nanmedian(self, array_size, percent_nans):\n        np.nanmedian(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanmedian",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0304fe4c2e9af7017d4850ddd0fbc5c0685194ae26169415a8fb3edc887120cb",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanmin": {
        "code": "class Nan:\n    def time_nanmin(self, array_size, percent_nans):\n        np.nanmin(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanmin",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "422814a93a17c53f1fc66f2c0cf02bd469c610907711b4a88ec30afcca8a4f1a",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanpercentile": {
        "code": "class Nan:\n    def time_nanpercentile(self, array_size, percent_nans):\n        np.nanpercentile(self.arr, q=50)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanpercentile",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "43b19dca34cc3d049c734b37fb526294d75cdae30fd6362dd1d25ee588029890",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanprod": {
        "code": "class Nan:\n    def time_nanprod(self, array_size, percent_nans):\n        np.nanprod(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanprod",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "76f6ddee7a2bd922a811a590da914e871a9da441ace23f624f885eff2ced6dda",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanquantile": {
        "code": "class Nan:\n    def time_nanquantile(self, array_size, percent_nans):\n        np.nanquantile(self.arr, q=0.2)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanquantile",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b6f9f81b2ba7ce0db3202f8e704563ef00acd142d57c08af0abae29275eb1887",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanstd": {
        "code": "class Nan:\n    def time_nanstd(self, array_size, percent_nans):\n        np.nanstd(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanstd",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8b165d52bb3a1a20c40d491c8b58205b060401acb5cb2e98ad86e3280ae1fd8f",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nansum": {
        "code": "class Nan:\n    def time_nansum(self, array_size, percent_nans):\n        np.nansum(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nansum",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "437765c3785e683bce0eb75c444aedb41352d0466d14fa89b112191fc4b4a0ec",
        "warmup_time": -1
    },
    "bench_lib.Nan.time_nanvar": {
        "code": "class Nan:\n    def time_nanvar(self, array_size, percent_nans):\n        np.nanvar(self.arr)\n\n    def setup(self, array_size, percent_nans):\n        np.random.seed(123)\n        # produce a randomly shuffled array with the\n        # approximate desired percentage np.nan content\n        base_array = np.random.uniform(size=array_size)\n        base_array[base_array < percent_nans / 100.] = np.nan\n        self.arr = base_array",
        "min_run_count": 2,
        "name": "bench_lib.Nan.time_nanvar",
        "number": 0,
        "param_names": [
            "array_size",
            "percent_nans"
        ],
        "params": [
            [
                "200",
                "200000"
            ],
            [
                "0",
                "0.1",
                "2.0",
                "50.0",
                "90.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7a04b150fb7a516a6d80b5c4ddf17d050b765c19f7962e0c5e3d1931a694869f",
        "warmup_time": -1
    },
    "bench_lib.Pad.time_pad": {
        "code": "class Pad:\n    def time_pad(self, shape, pad_width, mode):\n        np.pad(self.array, pad_width, mode)\n\n    def setup(self, shape, pad_width, mode):\n        # Make sure to fill the array to make the OS page fault\n        # in the setup phase and not the timed phase\n        self.array = np.full(shape, fill_value=1, dtype=np.float64)",
        "min_run_count": 2,
        "name": "bench_lib.Pad.time_pad",
        "number": 0,
        "param_names": [
            "shape",
            "pad_width",
            "mode"
        ],
        "params": [
            [
                "(4194304,)",
                "(1024, 1024)",
                "(256, 128, 1)",
                "(4, 4, 4, 4)",
                "(1, 1, 1, 1, 1)"
            ],
            [
                "1",
                "8",
                "(0, 32)"
            ],
            [
                "'constant'",
                "'edge'",
                "'linear_ramp'",
                "'mean'",
                "'reflect'",
                "'wrap'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b4277ec92e77c2bf4bb0b2a8e8dce9197194cef3f65e13f14bd7fb5b7e74a8ac",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_dot_a_b": {
        "code": "class Eindot:\n    def time_dot_a_b(self):\n        np.dot(self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_dot_a_b",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "90f6bce9991a3ec6b21cdb7d7612044fe2ab4a6f4baa4d09ad9f1532ae1ed729",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_dot_d_dot_b_c": {
        "code": "class Eindot:\n    def time_dot_d_dot_b_c(self):\n        np.dot(self.d, np.dot(self.b, self.c))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_dot_d_dot_b_c",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bfab7b7d665b79c0d6cd60cdebb0069198b221c435e1376c860d9547ffed5a3b",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_dot_trans_a_at": {
        "code": "class Eindot:\n    def time_dot_trans_a_at(self):\n        np.dot(self.a, self.at)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_dot_trans_a_at",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5312f8c34eaec25db7229551b2d1b3a36a60967397e0d6c2a5f3dd2ef7c9da39",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_dot_trans_a_atc": {
        "code": "class Eindot:\n    def time_dot_trans_a_atc(self):\n        np.dot(self.a, self.atc)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_dot_trans_a_atc",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2aaf3ac46d4867f457064a7af0eb0bb69d2357840c425d21e2dca264654ab0e7",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_dot_trans_at_a": {
        "code": "class Eindot:\n    def time_dot_trans_at_a(self):\n        np.dot(self.at, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_dot_trans_at_a",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3f4eddebca7bb5be74255d929a51634b57aa16904159810bcf998c44c82852fc",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_dot_trans_atc_a": {
        "code": "class Eindot:\n    def time_dot_trans_atc_a(self):\n        np.dot(self.atc, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_dot_trans_atc_a",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "59ac3a40d150a1adaabb06fb254b4308c270e5cd305fb71a0422fc0d352fb0f6",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_einsum_i_ij_j": {
        "code": "class Eindot:\n    def time_einsum_i_ij_j(self):\n        np.einsum('i,ij,j', self.d, self.b, self.c)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_einsum_i_ij_j",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b1430a7cb033c76f16784f9e1ad22a1823dc42f09801eff4f508a03fa87a5894",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_einsum_ij_jk_a_b": {
        "code": "class Eindot:\n    def time_einsum_ij_jk_a_b(self):\n        np.einsum('ij,jk', self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_einsum_ij_jk_a_b",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f59314fd417195a44f7811dc7866043d4ac947486c2065d5e76667cd3efd9b2a",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_einsum_ijk_jil_kl": {
        "code": "class Eindot:\n    def time_einsum_ijk_jil_kl(self):\n        np.einsum('ijk,jil->kl', self.a3, self.b3)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_einsum_ijk_jil_kl",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ca6de720148ca6468c9b96c0a584634bfd37611a176acf7aceb072a6b6d523a9",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_inner_trans_a_a": {
        "code": "class Eindot:\n    def time_inner_trans_a_a(self):\n        np.inner(self.a, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_inner_trans_a_a",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ff937aafce634b08b6e5a183252e02a459877dcfbfc6c7a2dc38a2a0bc2ec61f",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_inner_trans_a_ac": {
        "code": "class Eindot:\n    def time_inner_trans_a_ac(self):\n        np.inner(self.a, self.ac)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_inner_trans_a_ac",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "75be1a984676fcf27a3f71634783126016d5893ab4806f17cc8fc5b9dd0481ed",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_matmul_a_b": {
        "code": "class Eindot:\n    def time_matmul_a_b(self):\n        np.matmul(self.a, self.b)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_matmul_a_b",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8de65997a20d204169d458a6c8dbd028e175482b00a244e57bee527705d8049d",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_matmul_d_matmul_b_c": {
        "code": "class Eindot:\n    def time_matmul_d_matmul_b_c(self):\n        np.matmul(self.d, np.matmul(self.b, self.c))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_matmul_d_matmul_b_c",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "29cf075642392ec27e0bf81b3c28ed75d0470a4c9180bbe2a32673affb49c2dd",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_matmul_trans_a_at": {
        "code": "class Eindot:\n    def time_matmul_trans_a_at(self):\n        np.matmul(self.a, self.at)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_matmul_trans_a_at",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e3c80942140f34f39e469517660d62496f439c0e2b4e8f1e21e0097af4ec25a9",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_matmul_trans_a_atc": {
        "code": "class Eindot:\n    def time_matmul_trans_a_atc(self):\n        np.matmul(self.a, self.atc)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_matmul_trans_a_atc",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "80227843461ad996deb3d17b6b0e1ffc84a639663196e31a9bb49846e9e72da6",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_matmul_trans_at_a": {
        "code": "class Eindot:\n    def time_matmul_trans_at_a(self):\n        np.matmul(self.at, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_matmul_trans_at_a",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b9ed64e91ad9ac7937d4064ed9c1f7a432c0df7b6f912e029126146d76493e97",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_matmul_trans_atc_a": {
        "code": "class Eindot:\n    def time_matmul_trans_atc_a(self):\n        np.matmul(self.atc, self.a)\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_matmul_trans_atc_a",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7d84f2dd41ff3b11ae8fbd1c920eeb5f02793f02d93e39fa84bcb2815ea1a9c1",
        "warmup_time": -1
    },
    "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1": {
        "code": "class Eindot:\n    def time_tensordot_a_b_axes_1_0_0_1(self):\n        np.tensordot(self.a3, self.b3, axes=([1, 0], [0, 1]))\n\n    def setup(self):\n        self.a = np.arange(60000.0).reshape(150, 400)\n        self.ac = self.a.copy()\n        self.at = self.a.T\n        self.atc = self.a.T.copy()\n        self.b = np.arange(240000.0).reshape(400, 600)\n        self.c = np.arange(600)\n        self.d = np.arange(400)\n    \n        self.a3 = np.arange(480000.).reshape(60, 80, 100)\n        self.b3 = np.arange(192000.).reshape(80, 60, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Eindot.time_tensordot_a_b_axes_1_0_0_1",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e0e115ed5626e3f37056c84484c86e35bc62234e7781a233afc1e6a00c19c8c5",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_contig_contig": {
        "code": "class Einsum:\n    def time_einsum_contig_contig(self, dtype):\n        np.einsum(\"ji,i->\", self.two_dim, self.one_dim_small, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_contig_contig",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8adc09afddad8003e7808ad90d675a4ef2706a2932a2ff358e2b814b41bcdff6",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_contig_outstride0": {
        "code": "class Einsum:\n    def time_einsum_contig_outstride0(self, dtype):\n        np.einsum(\"i->\", self.one_dim_big, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_contig_outstride0",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7afd17861ae71dbe77144a1faeeb3176229072baaa2969aaafa10d0bfcc23066",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_mul": {
        "code": "class Einsum:\n    def time_einsum_mul(self, dtype):\n        np.einsum(\"i,->i\", self.one_dim_big, 300, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_mul",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1b2c070beeed615d7775ccda47842645ac2324ad7c182b78fd07af6c12493c9c",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_multiply": {
        "code": "class Einsum:\n    def time_einsum_multiply(self, dtype):\n        np.einsum(\"..., ...\", self.two_dim_small, self.three_dim , optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_multiply",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ed15937fb416e231b01b629d71ead2308c3c7ad6c7a79fb8884cc11ae5814825",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_noncon_contig_contig": {
        "code": "class Einsum:\n    def time_einsum_noncon_contig_contig(self, dtype):\n        np.einsum(\"ji,i->\", self.non_contigous_dim2, self.non_contigous_dim1_small, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_noncon_contig_contig",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c399ae7b56426d1ff9cd53559574b9876a5aacec35b7362d50074279a7828f9a",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_noncon_contig_outstride0": {
        "code": "class Einsum:\n    def time_einsum_noncon_contig_outstride0(self, dtype):\n        np.einsum(\"i->\", self.non_contigous_dim1, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_noncon_contig_outstride0",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6f6986fde8f1314dc839beaf55cad01ed4c9e411aef84aa3fd76fec67abcba70",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_noncon_mul": {
        "code": "class Einsum:\n    def time_einsum_noncon_mul(self, dtype):\n        np.einsum(\"i,->i\", self.non_contigous_dim1, 300, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_noncon_mul",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "45a0761a1c1866f75f24da60fdaf3809b44a2a9b79c52deba9c74d505afe2b44",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_noncon_multiply": {
        "code": "class Einsum:\n    def time_einsum_noncon_multiply(self, dtype):\n        np.einsum(\"..., ...\", self.non_contigous_dim2, self.non_contigous_dim3 , optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_noncon_multiply",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1b9cec6373b83ea65824593eca04f477f6bb2f2f5a7159510dc099b978831c1a",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_noncon_outer": {
        "code": "class Einsum:\n    def time_einsum_noncon_outer(self, dtype):\n        np.einsum(\"i,j\", self.non_contigous_dim1, self.non_contigous_dim1, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_noncon_outer",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d1a535ac18b01c8f11548160cf79ceac023576ddd71ad1ff3c354f82ecfba89c",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_noncon_sum_mul": {
        "code": "class Einsum:\n    def time_einsum_noncon_sum_mul(self, dtype):\n        np.einsum(\",i...->\", 300, self.non_contigous_dim3, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_noncon_sum_mul",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cec57af67bb6867105e9916e16f019a674443caf67052b54b889a6ed365b727b",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_noncon_sum_mul2": {
        "code": "class Einsum:\n    def time_einsum_noncon_sum_mul2(self, dtype):\n        np.einsum(\"i...,->\", self.non_contigous_dim3, 300, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_noncon_sum_mul2",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "660d058923ae9e1e4917c29da2a7b3e0cd96aca4cc8ba90a5cafcb3a6e4592c3",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_outer": {
        "code": "class Einsum:\n    def time_einsum_outer(self, dtype):\n        np.einsum(\"i,j\", self.one_dim, self.one_dim, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_outer",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e2ccf900c5582993ce1bb09fd290fab74f28ce52639739423d15b23b50c40efb",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_sum_mul": {
        "code": "class Einsum:\n    def time_einsum_sum_mul(self, dtype):\n        np.einsum(\",i...->\", 300, self.three_dim_small, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_sum_mul",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d4d9dc7270e9f52c0a201127fcbecbb4697408fd41c4ea16bbae9065318e78cb",
        "warmup_time": -1
    },
    "bench_linalg.Einsum.time_einsum_sum_mul2": {
        "code": "class Einsum:\n    def time_einsum_sum_mul2(self, dtype):\n        np.einsum(\"i...,->\", self.three_dim_small, 300, optimize=True)\n\n    def setup(self, dtype):\n        self.one_dim_small = np.arange(600, dtype=dtype)\n        self.one_dim = np.arange(3000, dtype=dtype)\n        self.one_dim_big = np.arange(480000, dtype=dtype)\n        self.two_dim_small = np.arange(1200, dtype=dtype).reshape(30, 40)\n        self.two_dim = np.arange(240000, dtype=dtype).reshape(400, 600)\n        self.three_dim_small = np.arange(10000, dtype=dtype).reshape(10,100,10)\n        self.three_dim = np.arange(24000, dtype=dtype).reshape(20, 30, 40)\n        # non_contigous arrays\n        self.non_contigous_dim1_small = np.arange(1, 80, 2, dtype=dtype)\n        self.non_contigous_dim1 = np.arange(1, 4000, 2, dtype=dtype)\n        self.non_contigous_dim2 = np.arange(1, 2400, 2, dtype=dtype).reshape(30, 40)\n        self.non_contigous_dim3 = np.arange(1, 48000, 2, dtype=dtype).reshape(20, 30, 40)",
        "min_run_count": 2,
        "name": "bench_linalg.Einsum.time_einsum_sum_mul2",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9e9e8a7cc22a5b242b00cf769e78e61793ee52afffe928cb970712f8f24219cf",
        "warmup_time": -1
    },
    "bench_linalg.Linalg.time_op": {
        "code": "class Linalg:\n    def time_op(self, op, typename):\n        self.func(self.a)\n\n    def setup(self, op, typename):\n        np.seterr(all='ignore')\n    \n        self.func = getattr(np.linalg, op)\n    \n        if op == 'cholesky':\n            # we need a positive definite\n            self.a = np.dot(get_squares_()[typename],\n                            get_squares_()[typename].T)\n        else:\n            self.a = get_squares_()[typename]\n    \n        # check that dtype is supported at all\n        try:\n            self.func(self.a[:2, :2])\n        except TypeError:\n            raise NotImplementedError()",
        "min_run_count": 2,
        "name": "bench_linalg.Linalg.time_op",
        "number": 0,
        "param_names": [
            "op",
            "type"
        ],
        "params": [
            [
                "'svd'",
                "'pinv'",
                "'det'",
                "'norm'"
            ],
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "af5f67d37b335b9d90510e579b0a142550c4a692f3409adff2c2fbcb835b5034",
        "warmup_time": -1
    },
    "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64": {
        "code": "class Lstsq:\n    def time_numpy_linalg_lstsq_a__b_float64(self):\n        np.linalg.lstsq(self.a, self.b, rcond=-1)\n\n    def setup(self):\n        self.a = get_squares_()['float64']\n        self.b = get_indexes_rand()[:100].astype(np.float64)",
        "min_run_count": 2,
        "name": "bench_linalg.Lstsq.time_numpy_linalg_lstsq_a__b_float64",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8986b54baed47d44faf78455a011ab17ccdfb51cc62cf0e48087f054a52c29e6",
        "warmup_time": -1
    },
    "bench_ma.Concatenate.time_it": {
        "code": "class Concatenate:\n    def time_it(self, mode, n):\n        np.ma.concatenate(self.args)\n\n    def setup(self, mode, n):\n        # avoid np.zeros's lazy allocation that cause page faults during benchmark.\n        # np.fill will cause pagefaults to happen during setup.\n        normal = np.full((n, n), 0, int)\n        unmasked = np.ma.zeros((n, n), int)\n        masked = np.ma.array(normal, mask=True)\n    \n        mode_parts = mode.split('+')\n        base = mode_parts[0]\n        promote = 'masked' in mode_parts[1:]\n    \n        if base == 'ndarray':\n            args = 10 * (normal,)\n        elif base == 'unmasked':\n            args = 10 * (unmasked,)\n        else:\n            args = 10 * (masked,)\n    \n        if promote:\n            args = args[:-1] + (masked,)\n    \n        self.args = args",
        "min_run_count": 2,
        "name": "bench_ma.Concatenate.time_it",
        "number": 0,
        "param_names": [
            "mode",
            "n"
        ],
        "params": [
            [
                "'ndarray'",
                "'unmasked'",
                "'ndarray+masked'",
                "'unmasked+masked'",
                "'masked'"
            ],
            [
                "2",
                "100",
                "2000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c5266b41dad24011ae7e64de9ff53d788ddeb5d55cbb4cff451dc49af0c70298",
        "warmup_time": -1
    },
    "bench_ma.Indexing.time_0d": {
        "code": "class Indexing:\n    def time_0d(self, masked, ndim, size):\n        self.m[self.idx_0d]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)",
        "min_run_count": 2,
        "name": "bench_ma.Indexing.time_0d",
        "number": 0,
        "param_names": [
            "masked",
            "ndim",
            "size"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "1",
                "2"
            ],
            [
                "10",
                "100",
                "1000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3af17398e826ce96894f8d9e3df13390b6057d8ab4646cccf3dafe3a6b530dea",
        "warmup_time": -1
    },
    "bench_ma.Indexing.time_1d": {
        "code": "class Indexing:\n    def time_1d(self, masked, ndim, size):\n        self.m[self.idx_1d]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)",
        "min_run_count": 2,
        "name": "bench_ma.Indexing.time_1d",
        "number": 0,
        "param_names": [
            "masked",
            "ndim",
            "size"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "1",
                "2"
            ],
            [
                "10",
                "100",
                "1000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2dc73766d9324469077751387174000e90cd198310ae5d0b5bbfbe2b3a0b1d55",
        "warmup_time": -1
    },
    "bench_ma.Indexing.time_scalar": {
        "code": "class Indexing:\n    def time_scalar(self, masked, ndim, size):\n        self.m[self.idx_scalar]\n\n    def setup(self, masked, ndim, size):\n        x = np.arange(size**ndim).reshape(ndim * (size,))\n    \n        if masked:\n            self.m = np.ma.array(x, mask=x%2 == 0)\n        else:\n            self.m = np.ma.array(x)\n    \n        self.idx_scalar = (size//2,) * ndim\n        self.idx_0d = (size//2,) * ndim + (Ellipsis,)\n        self.idx_1d = (size//2,) * (ndim - 1)",
        "min_run_count": 2,
        "name": "bench_ma.Indexing.time_scalar",
        "number": 0,
        "param_names": [
            "masked",
            "ndim",
            "size"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "1",
                "2"
            ],
            [
                "10",
                "100",
                "1000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "20842912a6d684f5d66c15e2ef6fc5994066b617ff4c673efb382b98bd70c190",
        "warmup_time": -1
    },
    "bench_ma.MA.time_masked_array": {
        "code": "class MA:\n    def time_masked_array(self):\n        np.ma.masked_array()\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)",
        "min_run_count": 2,
        "name": "bench_ma.MA.time_masked_array",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "569cb888c6b874c3b64957cab882b3e04f2d830d4581ce6aed29c758d2c32fa2",
        "warmup_time": -1
    },
    "bench_ma.MA.time_masked_array_l100": {
        "code": "class MA:\n    def time_masked_array_l100(self):\n        np.ma.masked_array(self.l100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)",
        "min_run_count": 2,
        "name": "bench_ma.MA.time_masked_array_l100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1bd9f2518b045c4e7f662bb4528b56e49605d20fd412c8657d0ef38741838eb5",
        "warmup_time": -1
    },
    "bench_ma.MA.time_masked_array_l100_t100": {
        "code": "class MA:\n    def time_masked_array_l100_t100(self):\n        np.ma.masked_array(self.l100, self.t100)\n\n    def setup(self):\n        self.l100 = range(100)\n        self.t100 = ([True] * 100)",
        "min_run_count": 2,
        "name": "bench_ma.MA.time_masked_array_l100_t100",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5756fb2ab73509c5b839cd02f3317b36da59fd9b3eee66bad94c4cde42a86bb9",
        "warmup_time": -1
    },
    "bench_ma.UFunc.time_1d": {
        "code": "class UFunc:\n    def time_1d(self, a_masked, b_masked, size):\n        np.ma.add(self.a_1d, self.b_1d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)",
        "min_run_count": 2,
        "name": "bench_ma.UFunc.time_1d",
        "number": 0,
        "param_names": [
            "a_masked",
            "b_masked",
            "size"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ],
            [
                "10",
                "100",
                "1000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "3367abb12ea2e83d13287419c09a5fcfdec21cb8b976041105622e5f2455219a",
        "warmup_time": -1
    },
    "bench_ma.UFunc.time_2d": {
        "code": "class UFunc:\n    def time_2d(self, a_masked, b_masked, size):\n        # broadcasting happens this time\n        np.ma.add(self.a_2d, self.b_2d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)",
        "min_run_count": 2,
        "name": "bench_ma.UFunc.time_2d",
        "number": 0,
        "param_names": [
            "a_masked",
            "b_masked",
            "size"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ],
            [
                "10",
                "100",
                "1000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2f6eefd233384bed94c580db5fcefc09e11a86f0008ccf16cbf1dff95b0b9c23",
        "warmup_time": -1
    },
    "bench_ma.UFunc.time_scalar": {
        "code": "class UFunc:\n    def time_scalar(self, a_masked, b_masked, size):\n        np.ma.add(self.a_scalar, self.b_scalar)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)",
        "min_run_count": 2,
        "name": "bench_ma.UFunc.time_scalar",
        "number": 0,
        "param_names": [
            "a_masked",
            "b_masked",
            "size"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ],
            [
                "10",
                "100",
                "1000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4496f86f82cad9053c558f7f3b1f7a8ad9ccd4d18b3a7d5dd2e0dd1192c8e4d9",
        "warmup_time": -1
    },
    "bench_ma.UFunc.time_scalar_1d": {
        "code": "class UFunc:\n    def time_scalar_1d(self, a_masked, b_masked, size):\n        np.ma.add(self.a_scalar, self.b_1d)\n\n    def setup(self, a_masked, b_masked, size):\n        x = np.arange(size).astype(np.uint8)\n    \n        self.a_scalar = np.ma.masked if a_masked else 5\n        self.b_scalar = np.ma.masked if b_masked else 3\n    \n        self.a_1d = np.ma.array(x, mask=x%2 == 0 if a_masked else np.ma.nomask)\n        self.b_1d = np.ma.array(x, mask=x%3 == 0 if b_masked else np.ma.nomask)\n    \n        self.a_2d = self.a_1d.reshape(1, -1)\n        self.b_2d = self.a_1d.reshape(-1, 1)",
        "min_run_count": 2,
        "name": "bench_ma.UFunc.time_scalar_1d",
        "number": 0,
        "param_names": [
            "a_masked",
            "b_masked",
            "size"
        ],
        "params": [
            [
                "True",
                "False"
            ],
            [
                "True",
                "False"
            ],
            [
                "10",
                "100",
                "1000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "98dfb3a1d0e42b2006cb34ac1dde59953825c9fbf5f1d3685a4ca3127525adc6",
        "warmup_time": -1
    },
    "bench_overrides.ArrayFunction.time_mock_broadcast_to_duck": {
        "code": "class ArrayFunction:\n    def time_mock_broadcast_to_duck(self):\n        mock_broadcast_to(self.duck_array, ())\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]",
        "min_run_count": 2,
        "name": "bench_overrides.ArrayFunction.time_mock_broadcast_to_duck",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b54211444ccedb1ab418dbbf6ec0f6a2ef4262f33dff86946a325e943e80ba0e",
        "warmup_time": -1
    },
    "bench_overrides.ArrayFunction.time_mock_broadcast_to_numpy": {
        "code": "class ArrayFunction:\n    def time_mock_broadcast_to_numpy(self):\n        mock_broadcast_to(self.numpy_array, ())\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]",
        "min_run_count": 2,
        "name": "bench_overrides.ArrayFunction.time_mock_broadcast_to_numpy",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a77448f26c942ff1b0caa4cfa8e496e7f3b84342a4b3b798fadfde02460e4a7a",
        "warmup_time": -1
    },
    "bench_overrides.ArrayFunction.time_mock_concatenate_duck": {
        "code": "class ArrayFunction:\n    def time_mock_concatenate_duck(self):\n        mock_concatenate(self.duck_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]",
        "min_run_count": 2,
        "name": "bench_overrides.ArrayFunction.time_mock_concatenate_duck",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ca0f8a5a984c328b123d685cd3abebcfe69e74236884e9ae936604992f36247a",
        "warmup_time": -1
    },
    "bench_overrides.ArrayFunction.time_mock_concatenate_many": {
        "code": "class ArrayFunction:\n    def time_mock_concatenate_many(self):\n        mock_concatenate(self.many_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]",
        "min_run_count": 2,
        "name": "bench_overrides.ArrayFunction.time_mock_concatenate_many",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d63644407e7bb0c62ecd497191be5179221a5471d2679821ab9cd51e58e33b81",
        "warmup_time": -1
    },
    "bench_overrides.ArrayFunction.time_mock_concatenate_mixed": {
        "code": "class ArrayFunction:\n    def time_mock_concatenate_mixed(self):\n        mock_concatenate(self.mixed_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]",
        "min_run_count": 2,
        "name": "bench_overrides.ArrayFunction.time_mock_concatenate_mixed",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f0f836ffe9cd3cd7558defd3fcf150b87fed04847e82126cb3d0be71cf1db5d0",
        "warmup_time": -1
    },
    "bench_overrides.ArrayFunction.time_mock_concatenate_numpy": {
        "code": "class ArrayFunction:\n    def time_mock_concatenate_numpy(self):\n        mock_concatenate(self.numpy_arrays, axis=0)\n\n    def setup(self):\n        self.numpy_array = np.array(1)\n        self.numpy_arrays = [np.array(1), np.array(2)]\n        self.many_arrays = 500 * self.numpy_arrays\n        self.duck_array = DuckArray()\n        self.duck_arrays = [DuckArray(), DuckArray()]\n        self.mixed_arrays = [np.array(1), DuckArray()]",
        "min_run_count": 2,
        "name": "bench_overrides.ArrayFunction.time_mock_concatenate_numpy",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ba531ff260ae0e34362db5e75dc2787f752347a622d2ac57279a05124ea3c43a",
        "warmup_time": -1
    },
    "bench_random.Bounded.time_bounded": {
        "code": "class Bounded:\n    def time_bounded(self, bitgen, args):\n            \"\"\"\n            Timer for 8-bit bounded values.\n    \n            Parameters (packed as args)\n            ----------\n            dt : {uint8, uint16, uint32, unit64}\n                output dtype\n            max : int\n                Upper bound for range. Lower is always 0.  Must be <= 2**bits.\n            \"\"\"\n            dt, max = args\n            if bitgen == 'numpy':\n                self.rg.randint(0, max + 1, nom_size, dtype=dt)\n            else:\n                self.rg.integers(0, max + 1, nom_size, dtype=dt)\n\n    def setup(self, bitgen, args):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()",
        "min_run_count": 2,
        "name": "bench_random.Bounded.time_bounded",
        "number": 0,
        "param_names": [
            "rng",
            "dt_max"
        ],
        "params": [
            [
                "'PCG64'",
                "'MT19937'",
                "'Philox'",
                "'SFC64'",
                "'numpy'"
            ],
            [
                "[<class 'numpy.uint8'>, 95]",
                "[<class 'numpy.uint8'>, 64]",
                "[<class 'numpy.uint8'>, 127]",
                "[<class 'numpy.uint16'>, 95]",
                "[<class 'numpy.uint16'>, 1024]",
                "[<class 'numpy.uint16'>, 1535]",
                "[<class 'numpy.uint16'>, 2047]",
                "[<class 'numpy.uint32'>, 1024]",
                "[<class 'numpy.uint32'>, 1535]",
                "[<class 'numpy.uint32'>, 2047]",
                "[<class 'numpy.uint64'>, 95]",
                "[<class 'numpy.uint64'>, 1024]",
                "[<class 'numpy.uint64'>, 1535]",
                "[<class 'numpy.uint64'>, 2047]"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1976966bc3e0f289c56524699eb45b095dab1d74806707d5e3e40f3165b1aa29",
        "warmup_time": -1
    },
    "bench_random.Choice.time_choice": {
        "code": "class Choice:\n    def time_choice(self, v):\n        self.rng.choice(self.a, 1000, replace=False)\n\n    def setup(self, v):\n        self.a = np.arange(v)\n        self.rng = np.random.default_rng()",
        "min_run_count": 2,
        "name": "bench_random.Choice.time_choice",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "1000.0",
                "1000000.0",
                "100000000.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "732a2a02157fac586fed5ed7e5cb87b3f922e3ee957fac07cc8a392d51f1e462",
        "warmup_time": -1
    },
    "bench_random.Choice.time_legacy_choice": {
        "code": "class Choice:\n    def time_legacy_choice(self, v):\n        np.random.choice(self.a, 1000, replace=False)\n\n    def setup(self, v):\n        self.a = np.arange(v)\n        self.rng = np.random.default_rng()",
        "min_run_count": 2,
        "name": "bench_random.Choice.time_legacy_choice",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "1000.0",
                "1000000.0",
                "100000000.0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f8ea1e2859fc2421cf7aafc0c6f30d0342781a578958dbadfeeb1cfc31cf6cf1",
        "warmup_time": -1
    },
    "bench_random.Permutation.time_permutation_1d": {
        "code": "class Permutation:\n    def time_permutation_1d(self):\n        np.random.permutation(self.a_1d)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random(self.n)\n        self.a_2d = np.random.random((self.n, 2))",
        "min_run_count": 2,
        "name": "bench_random.Permutation.time_permutation_1d",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "551dd96381ce6ea1af2f4261ae7b78bb04024222f86e42dc477bced10c5d3326",
        "warmup_time": -1
    },
    "bench_random.Permutation.time_permutation_2d": {
        "code": "class Permutation:\n    def time_permutation_2d(self):\n        np.random.permutation(self.a_2d)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random(self.n)\n        self.a_2d = np.random.random((self.n, 2))",
        "min_run_count": 2,
        "name": "bench_random.Permutation.time_permutation_2d",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "afbad8cd57abad2c145db591d5d673799f4702d837eb9c1fa2f69c5c853fe526",
        "warmup_time": -1
    },
    "bench_random.Permutation.time_permutation_int": {
        "code": "class Permutation:\n    def time_permutation_int(self):\n        np.random.permutation(self.n)\n\n    def setup(self):\n        self.n = 10000\n        self.a_1d = np.random.random(self.n)\n        self.a_2d = np.random.random((self.n, 2))",
        "min_run_count": 2,
        "name": "bench_random.Permutation.time_permutation_int",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "71e1c9cf4d468f4c66f76d7a4215275d590d638c56a84ce00a9da324d7d79818",
        "warmup_time": -1
    },
    "bench_random.RNG.time_32bit": {
        "code": "class RNG:\n    def time_32bit(self, bitgen):\n        min, max = self.uint32info.min, self.uint32info.max\n        if bitgen == 'numpy':\n            self.rg.randint(min, max + 1, nom_size, dtype=np.uint32)\n        else:\n            self.rg.integers(min, max + 1, nom_size, dtype=np.uint32)\n\n    def setup(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()\n        self.int32info = np.iinfo(np.int32)\n        self.uint32info = np.iinfo(np.uint32)\n        self.uint64info = np.iinfo(np.uint64)",
        "min_run_count": 2,
        "name": "bench_random.RNG.time_32bit",
        "number": 0,
        "param_names": [
            "rng"
        ],
        "params": [
            [
                "'PCG64'",
                "'MT19937'",
                "'Philox'",
                "'SFC64'",
                "'numpy'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "cb6866d2a229860446d329ed86cec74da9f3f495d544006e29dba8f0eb9a2a29",
        "warmup_time": -1
    },
    "bench_random.RNG.time_64bit": {
        "code": "class RNG:\n    def time_64bit(self, bitgen):\n        min, max = self.uint64info.min, self.uint64info.max\n        if bitgen == 'numpy':\n            self.rg.randint(min, max + 1, nom_size, dtype=np.uint64)\n        else:\n            self.rg.integers(min, max + 1, nom_size, dtype=np.uint64)\n\n    def setup(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()\n        self.int32info = np.iinfo(np.int32)\n        self.uint32info = np.iinfo(np.uint32)\n        self.uint64info = np.iinfo(np.uint64)",
        "min_run_count": 2,
        "name": "bench_random.RNG.time_64bit",
        "number": 0,
        "param_names": [
            "rng"
        ],
        "params": [
            [
                "'PCG64'",
                "'MT19937'",
                "'Philox'",
                "'SFC64'",
                "'numpy'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f427158e9352900d3a4249235778210c55419c9a6abd475fba10b12a612f62cc",
        "warmup_time": -1
    },
    "bench_random.RNG.time_normal_zig": {
        "code": "class RNG:\n    def time_normal_zig(self, bitgen):\n        self.rg.standard_normal(nom_size)\n\n    def setup(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()\n        self.int32info = np.iinfo(np.int32)\n        self.uint32info = np.iinfo(np.uint32)\n        self.uint64info = np.iinfo(np.uint64)",
        "min_run_count": 2,
        "name": "bench_random.RNG.time_normal_zig",
        "number": 0,
        "param_names": [
            "rng"
        ],
        "params": [
            [
                "'PCG64'",
                "'MT19937'",
                "'Philox'",
                "'SFC64'",
                "'numpy'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b07ff35f63c9be7b9129a247a6f3b90d3209858b607b91e42b0be9c75a7cdf2f",
        "warmup_time": -1
    },
    "bench_random.RNG.time_raw": {
        "code": "class RNG:\n    def time_raw(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg.random_integers(self.int32info.max, size=nom_size)\n        else:\n            self.rg.integers(self.int32info.max, size=nom_size, endpoint=True)\n\n    def setup(self, bitgen):\n        if bitgen == 'numpy':\n            self.rg = np.random.RandomState()\n        else:\n            self.rg = Generator(getattr(np.random, bitgen)())\n        self.rg.random()\n        self.int32info = np.iinfo(np.int32)\n        self.uint32info = np.iinfo(np.uint32)\n        self.uint64info = np.iinfo(np.uint64)",
        "min_run_count": 2,
        "name": "bench_random.RNG.time_raw",
        "number": 0,
        "param_names": [
            "rng"
        ],
        "params": [
            [
                "'PCG64'",
                "'MT19937'",
                "'Philox'",
                "'SFC64'",
                "'numpy'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9a10bd242f667f726dd0b180cc185c6eb1a96cc178b96a6f905d269b2f8641c6",
        "warmup_time": -1
    },
    "bench_random.Randint.time_randint_fast": {
        "code": "class Randint:\n    def time_randint_fast(self):\n        \"\"\"Compare to uint32 below\"\"\"\n        np.random.randint(0, 2**30, size=10**5)",
        "min_run_count": 2,
        "name": "bench_random.Randint.time_randint_fast",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bb8c6b342d125e6ce85eba74f81e9a3f69eb3a1f4948921a73b680d3ea4f312e",
        "warmup_time": -1
    },
    "bench_random.Randint.time_randint_slow": {
        "code": "class Randint:\n    def time_randint_slow(self):\n        \"\"\"Compare to uint32 below\"\"\"\n        np.random.randint(0, 2**30 + 1, size=10**5)",
        "min_run_count": 2,
        "name": "bench_random.Randint.time_randint_slow",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "97dcc24881c776455f5c6a04bec764909ac9a0e4f7cfde6413f8d60a487adbc5",
        "warmup_time": -1
    },
    "bench_random.Randint_dtype.time_randint_fast": {
        "code": "class Randint_dtype:\n    def time_randint_fast(self, name):\n        high = self.high[name]\n        np.random.randint(0, high, size=10**5, dtype=name)\n\n    def setup(self, name):\n        from numpy.lib import NumpyVersion\n        if NumpyVersion(np.__version__) < '1.11.0.dev0':\n            raise NotImplementedError",
        "min_run_count": 2,
        "name": "bench_random.Randint_dtype.time_randint_fast",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "'bool'",
                "'uint8'",
                "'uint16'",
                "'uint32'",
                "'uint64'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "686cd267595db36e1a5b21a65b9f0a77efb9cd65c4b1b7f631b7ffe955087d2b",
        "warmup_time": -1
    },
    "bench_random.Randint_dtype.time_randint_slow": {
        "code": "class Randint_dtype:\n    def time_randint_slow(self, name):\n        high = self.high[name]\n        np.random.randint(0, high + 1, size=10**5, dtype=name)\n\n    def setup(self, name):\n        from numpy.lib import NumpyVersion\n        if NumpyVersion(np.__version__) < '1.11.0.dev0':\n            raise NotImplementedError",
        "min_run_count": 2,
        "name": "bench_random.Randint_dtype.time_randint_slow",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "'bool'",
                "'uint8'",
                "'uint16'",
                "'uint32'",
                "'uint64'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "5288dc43a24dc0ad0085d813bc9c7f1501cff277adbffe869256718c92d76bbd",
        "warmup_time": -1
    },
    "bench_random.Random.time_rng": {
        "code": "class Random:\n    def time_rng(self, name):\n        self.func(*self.params)\n\n    def setup(self, name):\n        items = name.split()\n        name = items.pop(0)\n        params = [float(x) for x in items]\n    \n        self.func = getattr(np.random, name)\n        self.params = tuple(params) + ((100, 100),)",
        "min_run_count": 2,
        "name": "bench_random.Random.time_rng",
        "number": 0,
        "param_names": [
            "param1"
        ],
        "params": [
            [
                "'normal'",
                "'uniform'",
                "'weibull 1'",
                "'binomial 10 0.5'",
                "'poisson 10'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "20d7c6d641e664676dba02e39f4358735344639b5c0798301d8702c6d4b0cb1f",
        "warmup_time": -1
    },
    "bench_random.Shuffle.time_100000": {
        "code": "class Shuffle:\n    def time_100000(self):\n        np.random.shuffle(self.a)\n\n    def setup(self):\n        self.a = np.arange(100000)",
        "min_run_count": 2,
        "name": "bench_random.Shuffle.time_100000",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "008b63ed906c93eff862ba9a6aad85a0ed290deb009fa1085447a66b23e8d717",
        "warmup_time": -1
    },
    "bench_records.Records.time_fromarrays_formats_as_list": {
        "code": "class Records:\n    def time_fromarrays_formats_as_list(self):\n        np.core.records.fromarrays(self.arrays, formats=self.formats)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number",
        "min_run_count": 2,
        "name": "bench_records.Records.time_fromarrays_formats_as_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "621e3b86832fdf9664c674069c3d1fbeb10cddf260e4c4b4a3b47ec05c71fbb1",
        "warmup_time": -1
    },
    "bench_records.Records.time_fromarrays_formats_as_string": {
        "code": "class Records:\n    def time_fromarrays_formats_as_string(self):\n        np.core.records.fromarrays(self.arrays, formats=self.formats_str)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number",
        "min_run_count": 2,
        "name": "bench_records.Records.time_fromarrays_formats_as_string",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "856269c6f0b81d23f7e9fd24a17d47ff29142465b7d193cc5de403c1c6fdd235",
        "warmup_time": -1
    },
    "bench_records.Records.time_fromarrays_w_dtype": {
        "code": "class Records:\n    def time_fromarrays_w_dtype(self):\n        np.core.records.fromarrays(self.arrays, dtype=self.dtype_)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number",
        "min_run_count": 2,
        "name": "bench_records.Records.time_fromarrays_w_dtype",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7535af7828629025f0ce5b805ff36e75f86ca00ab8925e3205495d9c0cb452d5",
        "warmup_time": -1
    },
    "bench_records.Records.time_fromarrays_wo_dtype": {
        "code": "class Records:\n    def time_fromarrays_wo_dtype(self):\n        np.core.records.fromarrays(self.arrays)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number",
        "min_run_count": 2,
        "name": "bench_records.Records.time_fromarrays_wo_dtype",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b1e0d759f5513721633b892f2f293f27755a92bd041c2b7b5aee9baaa692f0dc",
        "warmup_time": -1
    },
    "bench_records.Records.time_fromstring_formats_as_list": {
        "code": "class Records:\n    def time_fromstring_formats_as_list(self):\n        np.core.records.fromstring(self.buffer, formats=self.formats)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number",
        "min_run_count": 2,
        "name": "bench_records.Records.time_fromstring_formats_as_list",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "44623a8f23a4a6d5f9e6fd58862f0f43ffa66d92b1dc983b93c1c5d4ca04b939",
        "warmup_time": -1
    },
    "bench_records.Records.time_fromstring_formats_as_string": {
        "code": "class Records:\n    def time_fromstring_formats_as_string(self):\n        np.core.records.fromstring(self.buffer, formats=self.formats_str)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number",
        "min_run_count": 2,
        "name": "bench_records.Records.time_fromstring_formats_as_string",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e9e4abd8a0616b036d2d91c9f40cf36ae088fee51103890a20583acf8edc9496",
        "warmup_time": -1
    },
    "bench_records.Records.time_fromstring_w_dtype": {
        "code": "class Records:\n    def time_fromstring_w_dtype(self):\n        np.core.records.fromstring(self.buffer, dtype=self.dtype_)\n\n    def setup(self):\n        self.l50 = np.arange(1000)\n        self.fields_number = 10000\n        self.arrays = [self.l50 for _ in range(self.fields_number)]\n        self.formats = [self.l50.dtype.str for _ in range(self.fields_number)]\n        self.formats_str = ','.join(self.formats)\n        self.dtype_ = np.dtype(\n            [\n                ('field_{}'.format(i), self.l50.dtype.str)\n                for i in range(self.fields_number)\n            ]\n        )\n        self.buffer = self.l50.tostring() * self.fields_number",
        "min_run_count": 2,
        "name": "bench_records.Records.time_fromstring_w_dtype",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "788e2036232e1c48d6ed7b1c95326e4007fa638fa1d38a9935a20bb4ffc0b501",
        "warmup_time": -1
    },
    "bench_reduce.AddReduce.time_axis_0": {
        "code": "class AddReduce:\n    def time_axis_0(self):\n        [np.add.reduce(a, axis=0) for a in self.squares]\n\n    def setup(self):\n        self.squares = get_squares().values()",
        "min_run_count": 2,
        "name": "bench_reduce.AddReduce.time_axis_0",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2af9934f0fbbc8408edad22dfb037bd0861b919664055e5fe609f4058bffd1d9",
        "warmup_time": -1
    },
    "bench_reduce.AddReduce.time_axis_1": {
        "code": "class AddReduce:\n    def time_axis_1(self):\n        [np.add.reduce(a, axis=1) for a in self.squares]\n\n    def setup(self):\n        self.squares = get_squares().values()",
        "min_run_count": 2,
        "name": "bench_reduce.AddReduce.time_axis_1",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9e926386f8f433cfbcbea78e95c4f2cb3755951748b965430ab5e407be5d4b66",
        "warmup_time": -1
    },
    "bench_reduce.AddReduceSeparate.time_reduce": {
        "code": "class AddReduceSeparate:\n    def time_reduce(self, axis, typename):\n        np.add.reduce(self.a, axis=axis)\n\n    def setup(self, axis, typename):\n        self.a = get_squares()[typename]",
        "min_run_count": 2,
        "name": "bench_reduce.AddReduceSeparate.time_reduce",
        "number": 0,
        "param_names": [
            "axis",
            "type"
        ],
        "params": [
            [
                "0",
                "1"
            ],
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9fe950161a3a7c6883be4205a98ad6f3b268adcb3448bb900588c9a05f1b4d41",
        "warmup_time": -1
    },
    "bench_reduce.AnyAll.time_all_fast": {
        "code": "class AnyAll:\n    def time_all_fast(self):\n        self.zeros.all()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 1, bool)",
        "min_run_count": 2,
        "name": "bench_reduce.AnyAll.time_all_fast",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "337055e8376d23b58323da5853a1ce18e7025e49c95efd41d01732d37a916411",
        "warmup_time": -1
    },
    "bench_reduce.AnyAll.time_all_slow": {
        "code": "class AnyAll:\n    def time_all_slow(self):\n        self.ones.all()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 1, bool)",
        "min_run_count": 2,
        "name": "bench_reduce.AnyAll.time_all_slow",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9e00fb89e58c9b2b417aa7e9a7920769076051c19ff0c466ae4aab094bdb5dc3",
        "warmup_time": -1
    },
    "bench_reduce.AnyAll.time_any_fast": {
        "code": "class AnyAll:\n    def time_any_fast(self):\n        self.ones.any()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 1, bool)",
        "min_run_count": 2,
        "name": "bench_reduce.AnyAll.time_any_fast",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1bed9465b7afde4e6e437837f60b2b4315f05e9186392b2df64a3ecfd4fb8b98",
        "warmup_time": -1
    },
    "bench_reduce.AnyAll.time_any_slow": {
        "code": "class AnyAll:\n    def time_any_slow(self):\n        self.zeros.any()\n\n    def setup(self):\n        # avoid np.zeros's lazy allocation that would\n        # cause page faults during benchmark\n        self.zeros = np.full(100000, 0, bool)\n        self.ones = np.full(100000, 1, bool)",
        "min_run_count": 2,
        "name": "bench_reduce.AnyAll.time_any_slow",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fdb7e7815fcaa4c4c0a8613bdd1f28b855d03f3732f123a144a613fcaa23d01f",
        "warmup_time": -1
    },
    "bench_reduce.ArgMax.time_argmax": {
        "code": "class ArgMax:\n    def time_argmax(self, dtype):\n        np.argmax(self.d)\n\n    def setup(self, dtype):\n        self.d = np.zeros(200000, dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_reduce.ArgMax.time_argmax",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'bool'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "2843a21fe3f8f99974c2c8e3ea2c53595d3246781016dfc14abd6116d720ba5e",
        "warmup_time": -1
    },
    "bench_reduce.MinMax.time_max": {
        "code": "class MinMax:\n    def time_max(self, dtype):\n        np.max(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_reduce.MinMax.time_max",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>",
                "<class 'numpy.int64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "514f3cab642bc43d526e91045a6374f6aca5840683583600a5d8cbe85fb787dc",
        "warmup_time": -1
    },
    "bench_reduce.MinMax.time_min": {
        "code": "class MinMax:\n    def time_min(self, dtype):\n        np.min(self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_reduce.MinMax.time_min",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>",
                "<class 'numpy.int64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e6b22576b375226197a12de92f4a1cc57b3559e74d1fffbf7c304ae08ead1283",
        "warmup_time": -1
    },
    "bench_reduce.SmallReduction.time_small": {
        "code": "class SmallReduction:\n    def time_small(self):\n        np.sum(self.d)\n\n    def setup(self):\n        self.d = np.ones(100, dtype=np.float32)",
        "min_run_count": 2,
        "name": "bench_reduce.SmallReduction.time_small",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6c036bc421f0fb669164ceb2814d8765d6f3a6c7c38f5e2e55a3fc00945c9468",
        "warmup_time": -1
    },
    "bench_scalar.ScalarMath.time_abs": {
        "code": "class ScalarMath:\n    def time_abs(self, typename):\n        n = self.num\n        res = abs(abs(abs(abs(abs(abs(abs(abs(abs(abs(n))))))))))\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)",
        "min_run_count": 2,
        "name": "bench_scalar.ScalarMath.time_abs",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "4455712cecc7a36b6664d8435041d88c8385b150426edf80c9652d713090d59e",
        "warmup_time": -1
    },
    "bench_scalar.ScalarMath.time_addition": {
        "code": "class ScalarMath:\n    def time_addition(self, typename):\n        n = self.num\n        res = n + n + n + n + n + n + n + n + n + n\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)",
        "min_run_count": 2,
        "name": "bench_scalar.ScalarMath.time_addition",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "9338cca1a13271882005f3af2b833860de23437ced9888d5237592a45a47ca42",
        "warmup_time": -1
    },
    "bench_scalar.ScalarMath.time_addition_pyint": {
        "code": "class ScalarMath:\n    def time_addition_pyint(self, typename):\n        n = self.num\n        res = n + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)",
        "min_run_count": 2,
        "name": "bench_scalar.ScalarMath.time_addition_pyint",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8687771d39a17bf8ba6048fde6c27b589dd90ff44366e42f474bb80f86777a4f",
        "warmup_time": -1
    },
    "bench_scalar.ScalarMath.time_multiplication": {
        "code": "class ScalarMath:\n    def time_multiplication(self, typename):\n        n = self.num\n        res = n * n * n * n * n * n * n * n * n * n\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)",
        "min_run_count": 2,
        "name": "bench_scalar.ScalarMath.time_multiplication",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "82e5f176831c477ac6b64f1f6ad36287503a6828c01cfb418988e51da57dfabf",
        "warmup_time": -1
    },
    "bench_scalar.ScalarMath.time_power_of_two": {
        "code": "class ScalarMath:\n    def time_power_of_two(self, typename):\n        n = self.num\n        res = n**2, n**2, n**2, n**2, n**2, n**2, n**2, n**2, n**2, n**2\n\n    def setup(self, typename):\n        self.num = np.dtype(typename).type(2)",
        "min_run_count": 2,
        "name": "bench_scalar.ScalarMath.time_power_of_two",
        "number": 0,
        "param_names": [
            "type"
        ],
        "params": [
            [
                "'int16'",
                "'float16'",
                "'int32'",
                "'float32'",
                "'int64'",
                "'float64'",
                "'complex64'",
                "'longfloat'",
                "'complex128'",
                "'complex256'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "0dc2bcfb77ec9b5825169520f9b946b72a87d72a8b6d909fbb58cb728e29ab08",
        "warmup_time": -1
    },
    "bench_shape_base.Block.time_3d": {
        "code": "class Block3D:\n    def time_3d(self, n, mode):\n        if mode == 'block':\n            np.block(self.block)\n        else:  # mode == 'copy'\n            [arr.copy() for arr in self.arr_list]\n\n    def setup(self, n, mode):\n        # Slow setup method: hence separated from the others above\n        self.a000 = np.ones((2 * n, 2 * n, 2 * n), int) * 1\n    \n        self.a100 = np.ones((3 * n, 2 * n, 2 * n), int) * 2\n        self.a010 = np.ones((2 * n, 3 * n, 2 * n), int) * 3\n        self.a001 = np.ones((2 * n, 2 * n, 3 * n), int) * 4\n    \n        self.a011 = np.ones((2 * n, 3 * n, 3 * n), int) * 5\n        self.a101 = np.ones((3 * n, 2 * n, 3 * n), int) * 6\n        self.a110 = np.ones((3 * n, 3 * n, 2 * n), int) * 7\n    \n        self.a111 = np.ones((3 * n, 3 * n, 3 * n), int) * 8\n    \n        self.block = [\n            [\n                [self.a000, self.a001],\n                [self.a010, self.a011],\n            ],\n            [\n                [self.a100, self.a101],\n                [self.a110, self.a111],\n            ]\n        ]\n        self.arr_list = [a\n                         for two_d in self.block\n                         for one_d in two_d\n                         for a in one_d]",
        "min_run_count": 2,
        "name": "bench_shape_base.Block.time_3d",
        "number": 0,
        "param_names": [
            "n",
            "mode"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ],
            [
                "'block'",
                "'copy'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b9a48960b73fb3f85bfc2dc0e571c65492e2e23f6ba46efdbaa83c229a840ed3",
        "warmup_time": -1
    },
    "bench_shape_base.Block.time_block_complicated": {
        "code": "class Block:\n    def time_block_complicated(self, n):\n        np.block([[self.one_2d, self.two_2d],\n                  [self.three_2d],\n                  [self.four_1d],\n                  [self.five_0d, self.six_1d],\n                  [self.zero_2d]])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)",
        "min_run_count": 2,
        "name": "bench_shape_base.Block.time_block_complicated",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f5020e81ec4b44cc8c43385d45447eb00773324ed075f3e140a83e6deea1b5b1",
        "warmup_time": -1
    },
    "bench_shape_base.Block.time_block_simple_column_wise": {
        "code": "class Block:\n    def time_block_simple_column_wise(self, n):\n        np.block([[self.a_2d], [self.b_2d]])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)",
        "min_run_count": 2,
        "name": "bench_shape_base.Block.time_block_simple_column_wise",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ace4adce497cb59167431a3cb0e9336e9a4ca74c5a028728f072cb377034afac",
        "warmup_time": -1
    },
    "bench_shape_base.Block.time_block_simple_row_wise": {
        "code": "class Block:\n    def time_block_simple_row_wise(self, n):\n        np.block([self.a_2d, self.b_2d])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)",
        "min_run_count": 2,
        "name": "bench_shape_base.Block.time_block_simple_row_wise",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7e68cd3ac85d87ea0960b4e3480f3447d612752cc5da0d8e622d44883521fb9a",
        "warmup_time": -1
    },
    "bench_shape_base.Block.time_nested": {
        "code": "class Block:\n    def time_nested(self, n):\n        np.block([\n            [\n                np.block([\n                   [self.one],\n                   [self.three],\n                   [self.four]\n                ]),\n                self.two\n            ],\n            [self.five, self.six],\n            [self.zero]\n        ])\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)",
        "min_run_count": 2,
        "name": "bench_shape_base.Block.time_nested",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "76a91fd4afc8a0e86b6afd79d5f3ea4ecd9fbbef884ae0500b470509e9e8b67e",
        "warmup_time": -1
    },
    "bench_shape_base.Block.time_no_lists": {
        "code": "class Block:\n    def time_no_lists(self, n):\n        np.block(1)\n        np.block(np.eye(3 * n))\n\n    def setup(self, n):\n        self.a_2d = np.ones((2 * n, 2 * n))\n        self.b_1d = np.ones(2 * n)\n        self.b_2d = 2 * self.a_2d\n    \n        self.a = np.ones(3 * n)\n        self.b = np.ones(3 * n)\n    \n        self.one_2d = np.ones((1 * n, 3 * n))\n        self.two_2d = np.ones((1 * n, 3 * n))\n        self.three_2d = np.ones((1 * n, 6 * n))\n        self.four_1d = np.ones(6 * n)\n        self.five_0d = np.ones(1 * n)\n        self.six_1d = np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero_2d = np.full((2 * n, 6 * n), 0)\n    \n        self.one = np.ones(3 * n)\n        self.two = 2 * np.ones((3, 3 * n))\n        self.three = 3 * np.ones(3 * n)\n        self.four = 4 * np.ones(3 * n)\n        self.five = 5 * np.ones(1 * n)\n        self.six = 6 * np.ones(5 * n)\n        # avoid np.zeros's lazy allocation that might cause\n        # page faults during benchmark\n        self.zero = np.full((2 * n, 6 * n), 0)",
        "min_run_count": 2,
        "name": "bench_shape_base.Block.time_no_lists",
        "number": 0,
        "param_names": [
            "size"
        ],
        "params": [
            [
                "1",
                "10",
                "100"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6bc26f65802cda859473d4bbdd7c111e5084ace7bd39cca0c9ca3aad06eee9ea",
        "warmup_time": -1
    },
    "bench_shape_base.Block2D.time_block2d": {
        "code": "class Block2D:\n    def time_block2d(self, shape, dtype, n_chunks):\n        np.block(self.block_list)\n\n    def setup(self, shape, dtype, n_chunks):\n    \n        self.block_list = [\n             [np.full(shape=[s//n_chunk for s, n_chunk in zip(shape, n_chunks)],\n                     fill_value=1, dtype=dtype) for _ in range(n_chunks[1])]\n            for _ in range(n_chunks[0])\n        ]",
        "min_run_count": 2,
        "name": "bench_shape_base.Block2D.time_block2d",
        "number": 0,
        "param_names": [
            "shape",
            "dtype",
            "n_chunks"
        ],
        "params": [
            [
                "(16, 16)",
                "(32, 32)",
                "(64, 64)",
                "(128, 128)",
                "(256, 256)",
                "(512, 512)",
                "(1024, 1024)"
            ],
            [
                "'uint8'",
                "'uint16'",
                "'uint32'",
                "'uint64'"
            ],
            [
                "(2, 2)",
                "(4, 4)"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "93de8827eb35255e1f0daea4c5054d670f73b0c62c2cb54fc42a81e29c851ea8",
        "warmup_time": -1
    },
    "bench_trim_zeros.TrimZeros.time_trim_zeros": {
        "code": "class TrimZeros:\n    def time_trim_zeros(self, dtype, size):\n        np.trim_zeros(self.array)\n\n    def setup(self, dtype, size):\n        n = size // 3\n        self.array = np.hstack([\n            np.zeros(n),\n            np.random.uniform(size=n),\n            np.zeros(n),\n        ]).astype(dtype)",
        "min_run_count": 2,
        "name": "bench_trim_zeros.TrimZeros.time_trim_zeros",
        "number": 0,
        "param_names": [
            "dtype",
            "size"
        ],
        "params": [
            [
                "dtype('int64')",
                "dtype('float64')",
                "dtype('complex128')",
                "dtype('bool')"
            ],
            [
                "3000",
                "30000",
                "300000"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "aa967874dea8e59b67e272fc23171647622694eafb5361945f785d17500097c3",
        "warmup_time": -1
    },
    "bench_ufunc.ArgParsing.time_add_arg_parsing": {
        "code": "class ArgParsing:\n    def time_add_arg_parsing(self, arg_pack):\n        np.add(*arg_pack.args, **arg_pack.kwargs)",
        "min_run_count": 2,
        "name": "bench_ufunc.ArgParsing.time_add_arg_parsing",
        "number": 0,
        "param_names": [
            "arg_kwarg"
        ],
        "params": [
            [
                "(array(1.), array(2.))",
                "(array(1.), array(2.), array(3.))",
                "(array(1.), array(2.), out=array(3.))",
                "(array(1.), array(2.), out=(array(3.),))",
                "(array(1.), array(2.), out=array(3.), subok=True, where=True)",
                "(array(1.), array(2.), subok=True)",
                "(array(1.), array(2.), subok=True, where=True)",
                "(array(1.), array(2.), array(3.), subok=True, where=True)"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "7f8c98d0d3e4d48d2e4c78bc17a51a7d437b9b658ebf673e6829d145b6f109ce",
        "warmup_time": -1
    },
    "bench_ufunc.ArgParsingReduce.time_add_reduce_arg_parsing": {
        "code": "class ArgParsingReduce:\n    def time_add_reduce_arg_parsing(self, arg_pack):\n        np.add.reduce(*arg_pack.args, **arg_pack.kwargs)",
        "min_run_count": 2,
        "name": "bench_ufunc.ArgParsingReduce.time_add_reduce_arg_parsing",
        "number": 0,
        "param_names": [
            "arg_kwarg"
        ],
        "params": [
            [
                "(array([0., 1.]))",
                "(array([0., 1.]), 0)",
                "(array([0., 1.]), axis=0)",
                "(array([0., 1.]), 0, None)",
                "(array([0., 1.]), axis=0, dtype=None)",
                "(array([0., 1.]), 0, None, array(0.))",
                "(array([0., 1.]), axis=0, dtype=None, out=array(0.))",
                "(array([0., 1.]), out=array(0.))"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ad65096c8033c570321d0bbb8effaa15bce7a6faab47e96c8848d61173fc5b40",
        "warmup_time": -1
    },
    "bench_ufunc.Broadcast.time_broadcast": {
        "code": "class Broadcast:\n    def time_broadcast(self):\n        self.d - self.e\n\n    def setup(self):\n        self.d = np.ones((50000, 100), dtype=np.float64)\n        self.e = np.ones((100,), dtype=np.float64)",
        "min_run_count": 2,
        "name": "bench_ufunc.Broadcast.time_broadcast",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "131ce9ba025e2d78a4dfdbaf95871da67ac00aac41956c1ad64741a2102ec6c5",
        "warmup_time": -1
    },
    "bench_ufunc.Custom.time_and_bool": {
        "code": "class Custom:\n    def time_and_bool(self):\n        (self.b & self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)",
        "min_run_count": 2,
        "name": "bench_ufunc.Custom.time_and_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a86867e3b34ed9b571d5ef3232fb916555165cd1f489297b101f04a727403281",
        "warmup_time": -1
    },
    "bench_ufunc.Custom.time_nonzero": {
        "code": "class Custom:\n    def time_nonzero(self):\n        np.nonzero(self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)",
        "min_run_count": 2,
        "name": "bench_ufunc.Custom.time_nonzero",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "a2bfcc4d1a399fb5b9457fa59e9d2c10beefaeb8109557be1756181651549625",
        "warmup_time": -1
    },
    "bench_ufunc.Custom.time_not_bool": {
        "code": "class Custom:\n    def time_not_bool(self):\n        (~self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)",
        "min_run_count": 2,
        "name": "bench_ufunc.Custom.time_not_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "fabc3a193c9287d44cf4cff6d9352e67d1261c1a605327d0d5f5d29af1cc3b5c",
        "warmup_time": -1
    },
    "bench_ufunc.Custom.time_or_bool": {
        "code": "class Custom:\n    def time_or_bool(self):\n        (self.b | self.b)\n\n    def setup(self):\n        self.b = np.ones(20000, dtype=bool)",
        "min_run_count": 2,
        "name": "bench_ufunc.Custom.time_or_bool",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "d8cc3603bfff2d105d4e8d30e48ffa58120a715cf2920d7831270952b719b429",
        "warmup_time": -1
    },
    "bench_ufunc.CustomInplace.time_char_or": {
        "code": "class CustomInplace:\n    def time_char_or(self):\n        np.bitwise_or(self.c, 0, out=self.c)\n        np.bitwise_or(0, self.c, out=self.c)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomInplace.time_char_or",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "e17e62b7756bffe100ff86408f24dcfb06a25b928f488c08f96ef0db5607f861",
        "warmup_time": -1
    },
    "bench_ufunc.CustomInplace.time_char_or_temp": {
        "code": "class CustomInplace:\n    def time_char_or_temp(self):\n        0 | self.c | 0\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomInplace.time_char_or_temp",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1be81c7b7584c25261a4190fbfcf024b7b724516f69cad112327ad0d40e5476e",
        "warmup_time": -1
    },
    "bench_ufunc.CustomInplace.time_double_add": {
        "code": "class CustomInplace:\n    def time_double_add(self):\n        np.add(self.d, 1., out=self.d)\n        np.add(1., self.d, out=self.d)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomInplace.time_double_add",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "f19662f4a311fc929de94204a4b67241b1bb5ccf947f71bac733c613ee769865",
        "warmup_time": -1
    },
    "bench_ufunc.CustomInplace.time_double_add_temp": {
        "code": "class CustomInplace:\n    def time_double_add_temp(self):\n        1. + self.d + 1.\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomInplace.time_double_add_temp",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1e74700f4180455a4703910e2f5c4fda2ebd6ee1401a18d1a1ca8f093f3710e3",
        "warmup_time": -1
    },
    "bench_ufunc.CustomInplace.time_float_add": {
        "code": "class CustomInplace:\n    def time_float_add(self):\n        np.add(self.f, 1., out=self.f)\n        np.add(1., self.f, out=self.f)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomInplace.time_float_add",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "b11f548bdfbecba94fc50571119e32ffe7d6d2bbab330966d2acd80a91550b51",
        "warmup_time": -1
    },
    "bench_ufunc.CustomInplace.time_float_add_temp": {
        "code": "class CustomInplace:\n    def time_float_add_temp(self):\n        1. + self.f + 1.\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomInplace.time_float_add_temp",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "715b0deebbb271f4d643d0575a3b913ed3729b2562da829c102f64b902f3de4d",
        "warmup_time": -1
    },
    "bench_ufunc.CustomInplace.time_int_or": {
        "code": "class CustomInplace:\n    def time_int_or(self):\n        np.bitwise_or(self.i, 0, out=self.i)\n        np.bitwise_or(0, self.i, out=self.i)\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomInplace.time_int_or",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "1e6eb0dc45e0d0d9a3dddce986d8940c73e4771e5e80bebc25eef75022122950",
        "warmup_time": -1
    },
    "bench_ufunc.CustomInplace.time_int_or_temp": {
        "code": "class CustomInplace:\n    def time_int_or_temp(self):\n        0 | self.i | 0\n\n    def setup(self):\n        self.c = np.ones(500000, dtype=np.int8)\n        self.i = np.ones(150000, dtype=np.int32)\n        self.f = np.zeros(150000, dtype=np.float32)\n        self.d = np.zeros(75000, dtype=np.float64)\n        # fault memory\n        self.f *= 1.\n        self.d *= 1.",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomInplace.time_int_or_temp",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "8892315dfcc7e6bf5be252fc352286cca4e2b317312e17686096539d1ca30496",
        "warmup_time": -1
    },
    "bench_ufunc.CustomScalar.time_add_scalar2": {
        "code": "class CustomScalar:\n    def time_add_scalar2(self, dtype):\n        np.add(self.d, 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomScalar.time_add_scalar2",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "6c5ed02e001dd9bafa33d7f7b38ceb98abf8cdf8467193e7c0f53f94cf1bbc81",
        "warmup_time": -1
    },
    "bench_ufunc.CustomScalar.time_divide_scalar2": {
        "code": "class CustomScalar:\n    def time_divide_scalar2(self, dtype):\n        np.divide(self.d, 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomScalar.time_divide_scalar2",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "c32304caa2530a08b1034bd1ca4e575a5b9349681d9dde77b5994b93d5898994",
        "warmup_time": -1
    },
    "bench_ufunc.CustomScalar.time_divide_scalar2_inplace": {
        "code": "class CustomScalar:\n    def time_divide_scalar2_inplace(self, dtype):\n        np.divide(self.d, 1, out=self.d)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomScalar.time_divide_scalar2_inplace",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "64e072c5d7cf47aa563db42bf4dea71a999c35f748b3f79a086af9c7cb266c92",
        "warmup_time": -1
    },
    "bench_ufunc.CustomScalar.time_less_than_scalar2": {
        "code": "class CustomScalar:\n    def time_less_than_scalar2(self, dtype):\n        (self.d < 1)\n\n    def setup(self, dtype):\n        self.d = np.ones(20000, dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomScalar.time_less_than_scalar2",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "43e21cdb587cd06cf289354bcb31a9856168b6822ed5b5e599736c5c280aa660",
        "warmup_time": -1
    },
    "bench_ufunc.CustomScalarFloorDivideInt.time_floor_divide_int": {
        "code": "class CustomScalarFloorDivideInt:\n    def time_floor_divide_int(self, dtpye, divisor):\n        self.x // divisor\n\n    def setup(self, dtype, divisor):\n        iinfo = np.iinfo(dtype)\n        self.x = np.arange(\n                max(iinfo.min, self.min_value),\n                min(iinfo.max, self.max_value), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc.CustomScalarFloorDivideInt.time_floor_divide_int",
        "number": 0,
        "param_names": [
            "dtype",
            "divisors"
        ],
        "params": [
            [
                "<class 'numpy.int8'>",
                "<class 'numpy.int16'>",
                "<class 'numpy.int32'>",
                "<class 'numpy.int64'>"
            ],
            [
                "8",
                "-8",
                "43",
                "-43",
                "0"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "124fed333c76a597fe63e8c8d83c22504ec8666cc96a6d652d48a32c17769b04",
        "warmup_time": -1
    },
    "bench_ufunc.Scalar.time_add_scalar": {
        "code": "class Scalar:\n    def time_add_scalar(self):\n        (self.x + self.x)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)",
        "min_run_count": 2,
        "name": "bench_ufunc.Scalar.time_add_scalar",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "eb95fd29e2ab6b42cbf524521b2f2318da4375c69e9eb9bd9367c5e2b2a30ea3",
        "warmup_time": -1
    },
    "bench_ufunc.Scalar.time_add_scalar_conv": {
        "code": "class Scalar:\n    def time_add_scalar_conv(self):\n        (self.x + 1.0)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)",
        "min_run_count": 2,
        "name": "bench_ufunc.Scalar.time_add_scalar_conv",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "bbf133739c730b558f163bfa0a41965f82312794363f18948bd93de0cdefc11a",
        "warmup_time": -1
    },
    "bench_ufunc.Scalar.time_add_scalar_conv_complex": {
        "code": "class Scalar:\n    def time_add_scalar_conv_complex(self):\n        (self.y + self.z)\n\n    def setup(self):\n        self.x = np.asarray(1.0)\n        self.y = np.asarray((1.0 + 1j))\n        self.z = complex(1.0, 1.0)",
        "min_run_count": 2,
        "name": "bench_ufunc.Scalar.time_add_scalar_conv_complex",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "ca23715a82f5300e9537e32b5a25944d9c56e195013449e49701a86f2600b87e",
        "warmup_time": -1
    },
    "bench_ufunc.UFunc.time_ufunc_types": {
        "code": "class UFunc:\n    def time_ufunc_types(self, ufuncname):\n        [self.f(*arg) for arg in self.args]\n\n    def setup(self, ufuncname):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, ufuncname)\n        except AttributeError:\n            raise NotImplementedError()\n        self.args = []\n        for t, a in get_squares_().items():\n            arg = (a,) * self.f.nin\n            try:\n                self.f(*arg)\n            except TypeError:\n                continue\n            self.args.append(arg)",
        "min_run_count": 2,
        "name": "bench_ufunc.UFunc.time_ufunc_types",
        "number": 0,
        "param_names": [
            "ufunc"
        ],
        "params": [
            [
                "'abs'",
                "'absolute'",
                "'add'",
                "'arccos'",
                "'arccosh'",
                "'arcsin'",
                "'arcsinh'",
                "'arctan'",
                "'arctan2'",
                "'arctanh'",
                "'bitwise_and'",
                "'bitwise_not'",
                "'bitwise_or'",
                "'bitwise_xor'",
                "'cbrt'",
                "'ceil'",
                "'conj'",
                "'conjugate'",
                "'copysign'",
                "'cos'",
                "'cosh'",
                "'deg2rad'",
                "'degrees'",
                "'divide'",
                "'divmod'",
                "'equal'",
                "'exp'",
                "'exp2'",
                "'expm1'",
                "'fabs'",
                "'float_power'",
                "'floor'",
                "'floor_divide'",
                "'fmax'",
                "'fmin'",
                "'fmod'",
                "'frexp'",
                "'gcd'",
                "'greater'",
                "'greater_equal'",
                "'heaviside'",
                "'hypot'",
                "'invert'",
                "'isfinite'",
                "'isinf'",
                "'isnan'",
                "'isnat'",
                "'lcm'",
                "'ldexp'",
                "'left_shift'",
                "'less'",
                "'less_equal'",
                "'log'",
                "'log10'",
                "'log1p'",
                "'log2'",
                "'logaddexp'",
                "'logaddexp2'",
                "'logical_and'",
                "'logical_not'",
                "'logical_or'",
                "'logical_xor'",
                "'matmul'",
                "'maximum'",
                "'minimum'",
                "'mod'",
                "'modf'",
                "'multiply'",
                "'negative'",
                "'nextafter'",
                "'not_equal'",
                "'positive'",
                "'power'",
                "'rad2deg'",
                "'radians'",
                "'reciprocal'",
                "'remainder'",
                "'right_shift'",
                "'rint'",
                "'sign'",
                "'signbit'",
                "'sin'",
                "'sinh'",
                "'spacing'",
                "'sqrt'",
                "'square'",
                "'subtract'",
                "'tan'",
                "'tanh'",
                "'true_divide'",
                "'trunc'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 10,
        "type": "time",
        "unit": "seconds",
        "version": "5e9a778c538969f78e1a50b387862004b9261c57231bd40e2b48ff4b647e46d8",
        "warmup_time": -1
    },
    "bench_ufunc_strides.AVX_BFunc.time_ufunc": {
        "code": "class AVX_BFunc:\n    def time_ufunc(self, ufuncname, dtype, stride):\n        self.f(self.arr1[::stride], self.arr2[::stride])\n\n    def setup(self, ufuncname, dtype, stride):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, ufuncname)\n        except AttributeError:\n            raise NotImplementedError()\n        N = 10000\n        self.arr1 = np.array(np.random.rand(stride*N), dtype=dtype)\n        self.arr2 = np.array(np.random.rand(stride*N), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc_strides.AVX_BFunc.time_ufunc",
        "number": 0,
        "param_names": [
            "avx_based_bfunc",
            "dtype",
            "stride"
        ],
        "params": [
            [
                "'maximum'",
                "'minimum'"
            ],
            [
                "'f'",
                "'d'"
            ],
            [
                "1",
                "2",
                "4"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 10,
        "type": "time",
        "unit": "seconds",
        "version": "d5f7476238150410a90783e3473e3450318af3bdbdd6438270304e15de264b65",
        "warmup_time": -1
    },
    "bench_ufunc_strides.AVX_UFunc_log.time_log": {
        "code": "class AVX_UFunc_log:\n    def time_log(self, stride, dtype):\n        np.log(self.arr[::stride])\n\n    def setup(self, stride, dtype):\n        np.seterr(all='ignore')\n        N = 10000\n        self.arr = np.array(np.random.random_sample(stride*N), dtype=dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc_strides.AVX_UFunc_log.time_log",
        "number": 0,
        "param_names": [
            "stride",
            "dtype"
        ],
        "params": [
            [
                "1",
                "2",
                "4"
            ],
            [
                "'f'",
                "'d'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 10,
        "type": "time",
        "unit": "seconds",
        "version": "758b2c2d627de74fb1523a7612f0bc5575388c40d22107bcee8e49ecb7cbbfd4",
        "warmup_time": -1
    },
    "bench_ufunc_strides.AVX_cmplx_arithmetic.time_ufunc": {
        "code": "class AVX_cmplx_arithmetic:\n    def time_ufunc(self, bfuncname, stride, dtype):\n        self.f(self.arr1[::stride], self.arr2[::stride])\n\n    def setup(self, bfuncname, stride, dtype):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, bfuncname)\n        except AttributeError:\n            raise NotImplementedError()\n        N = 10000\n        self.arr1 = np.ones(stride*N, dtype)\n        self.arr2 = np.ones(stride*N, dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc_strides.AVX_cmplx_arithmetic.time_ufunc",
        "number": 0,
        "param_names": [
            "bfunc",
            "stride",
            "dtype"
        ],
        "params": [
            [
                "'add'",
                "'subtract'",
                "'multiply'",
                "'divide'"
            ],
            [
                "1",
                "2",
                "4"
            ],
            [
                "'F'",
                "'D'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 10,
        "type": "time",
        "unit": "seconds",
        "version": "f24369a374aa5ed56c4f8005b4a576599dd925f79363650c1c952f5ad949e970",
        "warmup_time": -1
    },
    "bench_ufunc_strides.AVX_cmplx_funcs.time_ufunc": {
        "code": "class AVX_cmplx_funcs:\n    def time_ufunc(self, bfuncname, stride, dtype):\n        self.f(self.arr1[::stride])\n\n    def setup(self, bfuncname, stride, dtype):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, bfuncname)\n        except AttributeError:\n            raise NotImplementedError()\n        N = 10000\n        self.arr1 = np.ones(stride*N, dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc_strides.AVX_cmplx_funcs.time_ufunc",
        "number": 0,
        "param_names": [
            "bfunc",
            "stride",
            "dtype"
        ],
        "params": [
            [
                "'reciprocal'",
                "'absolute'",
                "'square'",
                "'conjugate'"
            ],
            [
                "1",
                "2",
                "4"
            ],
            [
                "'F'",
                "'D'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 10,
        "type": "time",
        "unit": "seconds",
        "version": "0b4e70f85f0a98773362fec07faa3dfa62df38218f8044b5e1874d19e5ff991d",
        "warmup_time": -1
    },
    "bench_ufunc_strides.AVX_ldexp.time_ufunc": {
        "code": "class AVX_ldexp:\n    def time_ufunc(self, dtype, stride):\n        self.f(self.arr1[::stride], self.arr2[::stride])\n\n    def setup(self, dtype, stride):\n        np.seterr(all='ignore')\n        self.f = getattr(np, 'ldexp')\n        N = 10000\n        self.arr1 = np.array(np.random.rand(stride*N), dtype=dtype)\n        self.arr2 = np.array(np.random.rand(stride*N), dtype='i')",
        "min_run_count": 2,
        "name": "bench_ufunc_strides.AVX_ldexp.time_ufunc",
        "number": 0,
        "param_names": [
            "dtype",
            "stride"
        ],
        "params": [
            [
                "'f'",
                "'d'"
            ],
            [
                "1",
                "2",
                "4"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 10,
        "type": "time",
        "unit": "seconds",
        "version": "7b1485348542d48680da2c54ca6f3126661e7a3df7bc726f193d3961f6708ebe",
        "warmup_time": -1
    },
    "bench_ufunc_strides.LogisticRegression.time_train": {
        "code": "class LogisticRegression:\n    def time_train(self, dtype):\n        self.train(1000)\n\n    def setup(self, dtype):\n        np.random.seed(42)\n        self.size = 250\n        features = 16\n        self.X_train = np.random.rand(self.size,features).astype(dtype)\n        self.Y_train = np.random.choice(2,self.size).astype(dtype)\n        # Initialize weights\n        self.W = np.zeros((features,1), dtype=dtype)\n        self.b = np.zeros((1,1), dtype=dtype)\n        self.alpha = 0.1",
        "min_run_count": 2,
        "name": "bench_ufunc_strides.LogisticRegression.time_train",
        "number": 0,
        "param_names": [
            "dtype"
        ],
        "params": [
            [
                "<class 'numpy.float32'>",
                "<class 'numpy.float64'>"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 1000,
        "type": "time",
        "unit": "seconds",
        "version": "e86e16eb2784715dd92cc28fe3cf3d4b7cd03bbfb23570674abc1d06d35e8505",
        "warmup_time": -1
    },
    "bench_ufunc_strides.Mandelbrot.time_mandel": {
        "code": "class Mandelbrot:\n    def time_mandel(self):\n        self.mandelbrot_set(-0.74877,-0.74872,0.06505,0.06510,1000,1000,2048)",
        "min_run_count": 2,
        "name": "bench_ufunc_strides.Mandelbrot.time_mandel",
        "number": 0,
        "param_names": [],
        "params": [],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 60.0,
        "type": "time",
        "unit": "seconds",
        "version": "74f62bffab8b9720277f099c1fb8d06c8eb635599e335a58345cf121cd5a7b59",
        "warmup_time": -1
    },
    "bench_ufunc_strides.Unary.time_ufunc": {
        "code": "class Unary:\n    def time_ufunc(self, ufuncname, stride, stride_out, dtype):\n        self.f(self.arr[::stride], self.arr_out[::stride_out])\n\n    def setup(self, ufuncname, stride, stride_out, dtype):\n        np.seterr(all='ignore')\n        try:\n            self.f = getattr(np, ufuncname)\n        except AttributeError:\n            raise NotImplementedError()\n        N = 10000\n        self.arr = np.ones(stride*N, dtype)\n        self.arr_out = np.empty(stride_out*N, dtype)",
        "min_run_count": 2,
        "name": "bench_ufunc_strides.Unary.time_ufunc",
        "number": 0,
        "param_names": [
            "ufunc",
            "stride_in",
            "stride_out",
            "dtype"
        ],
        "params": [
            [
                "'sin'",
                "'cos'",
                "'exp'",
                "'log'",
                "'sqrt'",
                "'absolute'",
                "'reciprocal'",
                "'square'",
                "'rint'",
                "'floor'",
                "'ceil'",
                "'trunc'",
                "'frexp'",
                "'isnan'",
                "'isfinite'",
                "'isinf'",
                "'signbit'"
            ],
            [
                "1",
                "2",
                "4"
            ],
            [
                "1",
                "2",
                "4"
            ],
            [
                "'f'",
                "'d'"
            ]
        ],
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 10,
        "type": "time",
        "unit": "seconds",
        "version": "198a80e36deafe4897bf3d24c73c0e1de18bcc84e634bb4d0c97b38f34feb700",
        "warmup_time": -1
    },
    "version": 2
}